#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Peter Warasin <peter@endian.com>"
__date__ = "2011-11-29"

import os
import glob
import UserDict

IFACES_PATH = '/sys/class/net'

def get_bridges_from_sys():
    """Retrieve bridges information from /sys/class/net/ ."""
    bridges = {}
    for iface in glob.glob('%s/*' % IFACES_PATH):
        if_path = os.path.join(IFACES_PATH, iface)
        br_path = os.path.join(if_path, 'bridge')
        if not os.path.isdir(br_path):
            continue
        br_name = os.path.basename(if_path)
        br_data = {'device': br_name}
        try:
            fd = open(os.path.join(br_path, 'bridge_id'))
            br_data['id'] = fd.read().strip()
            fd.close()
        except:
            continue
        try:
            fd = open(os.path.join(br_path, 'stp_state'))
            br_data['stp'] = fd.read().strip() == '1'
            fd.close()
        except:
            continue
        br_data['ports'] = [os.path.basename(x) for x in glob.glob(os.path.join(if_path, 'brif/*'))]
        bridges[br_name] = br_data
    return bridges


class Bridges(UserDict.UserDict):
    """
    This class represents a "brctl show" holding all
    necessary information of that output easily accessible with python

    the class is a dict with bridge names as keys and the following
    data-structure as value:

    {
        'device': None,
        'id': '',
        'stp': False,
        'ports': ['', ''],
    }

    'device':   devicename, example: br0'
    'id':       bridge id, example: '0000.80c6ca001000'
    'stp':      is True if the spanning tree protocol is enabled
    'ports':    a list of interfaces which are bridge members.
                Example: ['lan2.40', 'eth0']

    The class contains also a field 'nicmap' which maps network interfaces
    to the bridge having it as member.

    'param load': if False data will not be loaded. This is needed for testing
    'type  load': bool

    """
    def __init__(self, load=True):
        self.data = {}
        self.nicmap = {}
        if load:
            self.load()

    def load(self):
        self.data = get_bridges_from_sys()

    def diff(self, data2):
        """
        compare bridge configuration supplied by 'data2' with current
        configuration.
        Returns a dict of the following structure:
        {
            'remove': { 'brX': [''] },
            'add': { 'brY': [''] },
            'create': { 'brZ': [''] },
        }
        The three dicts describe what has to be done in current
        configuration in order to have the situation of 'data2':
        'remove' interfaces to be removed from a certain bridge.
        'add'    interfaces to be added to a certain bridge.
        'create' bridge to be created with interfaces as its members.

        All three dict entries contain dictionaries with bridge names
        as key and a list of interface names as value.

        'data2' is of the following structure:
        {
            'brX': {
                       'device': 'brX',
                       'ports': ['', '', ...],
                   },
            ...
        }
        
        :param data2: the bridge setup used to compare with current setup.
        :type data2: a dict containing bridge setups.

        """
        def append_or_create(d, k, v):
            if k not in d:
                d[k] = []
            d[k].append(v)

        ret = {
            'remove': {},
            'add': {},
            'create': {},
            }
        for k,v in data2.iteritems():
            # case when the bridge has to be created
            if k not in self.data:
                ret['create'][k] = v['ports']
                continue
            # case when the bridge has to remove interfaces
            for i in self.data[k]['ports']:
                if i not in data2[k]['ports']:
                    append_or_create(ret['remove'], k, i)
            # case when the bridge has to add interfaces
            for i in data2[k]['ports']:
                if i not in self.data[k]['ports']:
                    append_or_create(ret['add'], k, i)
        # search for bridges not known by the configuration which
        # perhaps have interfaces as members which need to be removed because
        # perhaps to be used in another bridge.
        for k,v in self.data.iteritems():
            if k in data2:
                continue
            for i in v['ports']:
                append_or_create(ret['remove'], k, i)
        return ret

__all__ = [
    'Bridges',
    ]

if __name__ == '__main__':
    a = Bridges()
    import pprint
    pprint.pprint(a)

    pprint.pprint(a.nicmap)
