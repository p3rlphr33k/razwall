#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2012 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from UserList import UserList
import sys

__all__ = ['ConfigList']

class ConfigList(UserList):
    def __init__(self, initlist=None,
                 defaultInsert=None,
                 defaultAppend=None):
        UserList.__init__(self, initlist)
        self.defaultInsert = []
        if defaultInsert:
            self.defaultInsert.extend(defaultInsert)
        else:
            try:
                self.defaultInsert.extend(initlist.defaultInsert)
            except AttributeError:
                pass
        self.defaultAppend = []
        if defaultAppend:
            self.defaultAppend.extend(defaultAppend)
        else:
            try:
                self.defaultAppend.extend(initlist.defaultAppend)
            except AttributeError:
                pass

    def __contains__(self, y):
        ret = UserList.__contains__(self, y)
        ret |= y in self.defaultInsert
        ret |= y in self.defaultAppend
        return ret

    def __getitem__(self, y):
        i = a = 0
        if y < 0:
            y = len(self)+y
        if y < 0:
            raise IndexError("List index out of range")
        try:
            i = len(self.defaultInsert)
            if y < i:
                return self.defaultInsert[y]
        except TypeError:
            pass
        try:
            a = len(self.data)
            if y-i < a:
                return self.data[y-i]
        except TypeError:
            pass
        try:
            return self.defaultAppend[y-i-a]
        except TypeError:
            pass
        raise IndexError("List index out of range")

    def __len__(self):
        ret = 0
        try:
            ret += len(self.data)
        except TypeError:
            pass
        try:
            ret += len(self.defaultInsert)
        except TypeError:
            pass
        try:
            ret += len(self.defaultAppend)
        except TypeError:
            pass

        return ret

    def __iter__(self):
        d = [self.defaultInsert,
             self.data,
             self.defaultAppend]
        for i in d:
            try:
                for j in i:
                    yield(j)
            except TypeError:
                pass

    def __repr__(self):
        ret = []
        d = [self.defaultInsert,
             self.data,
             self.defaultAppend]
        for i in d:
            try:
                ret += i
            except TypeError:
                pass
        return repr(ret)

    def __eq__(self, x):
        d = i = a = []
        if self.data:
            if type(self.data) != type(x):
                return False
        if type(self.data) == type([]):
            d = self.data
        if type(self.defaultInsert) == type([]):
            i = self.defaultInsert
        if type(self.defaultAppend) == type([]):
            a = self.defaultAppend

        id = []
        if d == x:
            return True
        id = i+d
        if id == x:
            return True
        if d + a == x:
            return True
        if id + a == x:
            return True
        return False

    def __getslice__(self, i, j):
        data = []
        d = [self.defaultInsert,
             self.data,
             self.defaultAppend]
        for val in d:
            try:
                data.extend(val)
            except TypeError:
                pass

        return data[i:j]

    def index(self, x, start=0, stop=sys.maxint):
        data = []
        d = [self.defaultInsert,
             self.data,
             self.defaultAppend]
        for val in d:
            try:
                data.extend(val)
            except TypeError:
                pass

        return data.index(x, start, stop)
