#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import time
import threading

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2015-05-22"

_cache = {}
_lock = threading.Lock()
_last_purge = 0

PURGE_TIMEOUT = 10

__all__ = [ 'get', 'set', 'purge', 'size' ]

def get(username, password, provider):
    """
        Get an element from the cache
    """
    key = '%s\0%s\0%s' % (username, password, provider)
    try:
        result = _cache[key]
    except:
        return None
    if result[0] < time.time():
        return None
    return result[1]

def set(username, password, provider, result, cache_timeout):
    """
        Add a new element to the cache
    """
    if time.time() > _last_purge + PURGE_TIMEOUT:
        purge()
    key = '%s\0%s\0%s' % (username, password, provider)
    _cache[key] = (time.time() + cache_timeout, result)

def purge():
    """
        Purge the expired elements from the cache
    """
    global _last_purge
    try:
        _lock.acquire()
        now = time.time()
        _last_purge = now
        for key, value in _cache.items():
            if value[0] < now:
                try:
                    del _cache[key]
                except:
                    pass
    finally:
        _lock.release()

def size():
    """
        Return the number of elements in the cache
    """
    return len(_cache)

