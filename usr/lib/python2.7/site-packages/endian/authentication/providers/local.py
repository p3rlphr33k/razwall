#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import crypt
from endian.core.i18n import _
from endian.core.logger import logger
from endian.core.sha512crypt import sha512crypt
from endian.emi.acl import UserNotFoundError, InvalidPasswordError, UserNotEnableddError
from endian.authentication.providers.commons import StorageAuthProvider


__all__ = ['LocalAuthProvider']

class LocalAuthProvider(StorageAuthProvider):
    id = "local"
    name = _("Local")
    can_authenticate = True
    can_get_user = True
    can_list_users = True
    can_update_user = True
    can_create_user = True
    can_delete_user = True
    can_get_group = True
    can_list_groups = True
    can_update_group = True
    can_create_group = True
    can_delete_group = True
    enabled_for_vpn = True

    def authenticate(self, username, password, scope, password_already_verified=False, **argv):
        user = self.fetch_user(username, check_acl=False)
        # Check if the user exist
        if not user:
            logger.debug("User '%s' does not exist" % username)
            raise UserNotFoundError()
        # Password check
        if not password_already_verified and not self.compare_password(user, password):
            logger.debug("Incorrect password supplied for user '%s'" % username)
            raise InvalidPasswordError()
        # Check if the user is active
        if not user.get('enabled', False):
            logger.debug("Access denied for disabled user '%s'" % username)
            raise UserNotEnableddError()
        # Success
        user = dict(user)
        if 'password' in user:
            del user['password']
        if 'password_type' in user:
            del user['password_type']
        return user

    def get_user(self, username, scope, retrieve_attributes="*", **argv):
        user = self.fetch_user(username, check_acl=False)
        if not user:
            raise UserNotFoundError()
        if retrieve_attributes:
            return self._prepare_result(user, retrieve_attributes)
        else:
            return user

    def list_users(self, scope, retrieve_attributes=["name"], **argv):
        # XXX: beware that this check needs to be improved once
        #      we'll have multiple local storages.
        return [self._prepare_result(user, retrieve_attributes)
                for user in self.fetch_users(check_acl=False, **argv)
                if user.get('provider_name') in ('', None, 'local')]

    def compare_password(self, user, password):
        user_password = user.get('password', None)
        password_type = user.get('password_type', None) or 'plain'

        if password_type == 'sha512crypt': # SHA512 Crypt (default password encoding)
            return sha512crypt(password, user_password) == user_password
        elif password_type == 'plain':     # Plain text password
            return user_password == password
        elif password_type == 'crypt':     # Unix-style crypt password
                                           # (used by the users imported from the old OpenVPN config)
            return crypt.crypt(password, user_password) == user_password
        elif password_type == 'no-password':
            return False                   # User without a password
        return False

