#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import pwd
import grp
from endian.core.i18n import _
from endian.emi.acl import UserNotFoundError, InvalidPasswordError
from endian.authentication.providers.commons import AuthProvider
from endian.authentication.common import PERMISSION_FULL
from endian.authentication.utils import shadow

__all__ = ['SystemAuthProvider']

ALL_ATTRIBUTES = ['ID', 'name', 'remark', 'enabled', 'user_memberof', 'user_permissions']

class SystemAuthProvider(AuthProvider):

    id = "system"
    name = _("System accounts")
    can_authenticate = True
    can_get_user = True
    can_list_users = True

    def _prepare_result(self, pwd_entry, retrieve_attributes):
        if not retrieve_attributes or retrieve_attributes == "*":
            retrieve_attributes = [
                'name',
                'remark',
                'ID',
                'enabled',
                'user_memberof',
                'user_permissions'
            ]
        result = {}
        for key in retrieve_attributes:
            if key == 'name':
                result[key] = pwd_entry[0] # pw_name
            elif key == 'remark':
                result[key] = pwd_entry[4] # pw_gecos
            elif key == 'ID':
                result[key] = pwd_entry[2] # pw_uid
            elif key == 'enabled':
                encrypted_password = shadow.get_encrypted_password(pwd_entry[0])
                result[key] = not encrypted_password.startswith("!") and encrypted_password != 'x'
            elif key == 'user_memberof':
                result[key] = [x[0] for x in grp.getgrall() if pwd_entry[0] in x[3]]
            elif key == 'user_permissions':
                result[key] = (pwd_entry[2] == 0) and [PERMISSION_FULL] or []
        return result

    def authenticate(self, username, password, scope, password_already_verified=False, **argv):
        if not password_already_verified and not shadow.authenticate(username, password):
            try:
                pwd.getpwnam(username)
                raise InvalidPasswordError()
            except KeyError:
                raise UserNotFoundError()
        result = self.get_user(username, scope)
        return result

    def get_user(self, username, scope, retrieve_attributes="*", **argv):
        try:
            pwd_entry = pwd.getpwnam(username)
        except KeyError:
            raise UserNotFoundError()
        if retrieve_attributes:
            return self._prepare_result(pwd_entry, retrieve_attributes)
        else:
            return self._prepare_result(pwd_entry, ALL_ATTRIBUTES)

    def list_users(self, scope, retrieve_attributes=["name"], **argv):
        return self._filter_results(\
               [self._prepare_result(pwd_entry, retrieve_attributes) \
                for pwd_entry in pwd.getpwall()], **argv)
