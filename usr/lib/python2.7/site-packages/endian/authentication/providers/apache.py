#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi.acl import AuthException, UserNotFoundError, InvalidPasswordError
from endian.authentication.providers.commons import AuthProvider
from endian.authentication.common import PERMISSION_FULL, PERMISSION_API
from endian.authentication.utils.htpasswd import HtPasswd, HtGroups

__all__ = ['ApacheAuthProvider']

AUTH_USER_FILE = "/var/efw/auth/users"
AUTH_GROUP_FILE = "/etc/httpd/groups"
ALL_ATTRIBUTES = ['name', 'enabled', 'user_memberof', 'user_permissions']

class ApacheAuthProvider(AuthProvider):

    id = "apache"
    name = _("Apache mod_auth")
    can_authenticate = True
    can_get_user = True
    can_list_users = True
    can_create_user = True
    can_delete_user = True
    can_update_user = True

    def _prepare_result(self, username, retrieve_attributes, gt=None):
        if gt == None:
            gt = HtGroups(AUTH_GROUP_FILE)
        if not retrieve_attributes or retrieve_attributes == "*":
            retrieve_attributes = [
                'name',
                'enabled',
                'user_memberof',
                'user_permissions'
            ]
        result = {}
        for key in retrieve_attributes:
            if key == 'name':
                result[key] = username
            elif key == 'enabled':
                result[key] = True
            elif key == 'user_memberof':
                result[key] = gt.get_groups_by_user(username)
            elif key == 'user_permissions':
                result[key] = (username in ['admin', 'support']) and [PERMISSION_FULL, PERMISSION_API] or []
        return result

    def authenticate(self, username, password, scope, password_already_verified=False, **argv):
        ht = HtPasswd(AUTH_USER_FILE)
        if password_already_verified:
            if username not in ht.users():
                raise UserNotFoundError()
            result = self._prepare_result(username, ALL_ATTRIBUTES)
            return result
        if ht.verify_password(username, password):
            result = self._prepare_result(username, ALL_ATTRIBUTES)
            return result
        if username in ht.users():
            raise InvalidPasswordError()
        else:
            raise UserNotFoundError()

    def get_user(self, username, scope, retrieve_attributes="*", **argv):
        ht = HtPasswd(AUTH_USER_FILE)
        if username in ht.users():
            if retrieve_attributes:
                return self._prepare_result(username, retrieve_attributes)
            else:
                return self._prepare_result(username, ALL_ATTRIBUTES)
        raise UserNotFoundError()

    def list_users(self, scope, retrieve_attributes=["name"], **argv):
        ht = HtPasswd(AUTH_USER_FILE)
        gt = HtGroups(AUTH_GROUP_FILE)
        return self._filter_results(\
                [self._prepare_result(user, retrieve_attributes, gt) \
                 for user in ht.users()], **argv)

    def create_user(self, username, scope, password=None, args=None):
        """
            Overwrite this function to create a new user.

            :param username: name of the user
            :type username: str
            :param scope: name of the scope
            :type scope: str
            :param password: password of the user
            :type password: str
            :rtype: dict
        """
        ht = HtPasswd(AUTH_USER_FILE)
        ht.add_user(username, password)
        return self._prepare_result(username, ALL_ATTRIBUTES)

    def delete_user(self, username, scope):
        """
        Delete a user from the storage.
        """
        ht = HtPasswd(AUTH_USER_FILE)
        if username in ht.users():
            user = self._prepare_result(username, ALL_ATTRIBUTES)
            ht.delete_user(username)
            return user
        else:
            raise UserNotFoundError()

    def update_user(self, username, scope, new_values):
        """
        Update user values (e.g. password) in the storage.
        """
        ht = HtPasswd(AUTH_USER_FILE)
        if username in ht.users():
            user = self._prepare_result(username, ALL_ATTRIBUTES)
        else:
            raise UserNotFoundError()

        # Update the values
        for attribute, value in new_values.iteritems():
            if not attribute:
                raise AuthException("Attribute '' not found")
            if attribute.upper() == 'ID':
                raise AuthException("Cannot set the id")
            if attribute == 'password':
                ht.change_password(username, value)
            elif attribute == 'enabled' and not value:
                ht.change_password(username, None) # disable the user
                user['enabled'] = False

        return user

