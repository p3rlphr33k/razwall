#!/usr/bin/python

__all__ = [
]

from endian.core.logger import *
import os
import stat

from endian.core.csvfile import CSVFile
from endian.data import DataSource
from endian.core.runner import run
from endian.migration.migration import mainHandler
from endian.core.treefilter import toBool

BASE="/var/efw/"
CONFIG="/var/efw/portfw/config"
DNAT="/var/efw/dnat/config"
SNAT="/var/efw/snat/config"
class RuleEntry:
    def __init__(self):
        self._meta = ['key1', 'key2', 'proto', 'src_port', 
                      'target_ip', 'target_port', 'enabled',
                      'src_ip', 'access_ip', 'remark',
                      'src_dev', 'log', 'nat']
        self.key1 = '0'
        self.key2 = '0'
        self.proto = ''
        self.src_port = ''
        self.target_ip = ''
        self.target_port = ''
        self.enabled = 'on'
        self.src_ip = '0/0'
        self.access_ip = '0/0'
        self.remark = ''
        self.log = 'off'
        self.src_dev = ''
        self.nat = ''
        self.i = 0

def portfwToDnat():
    debug("Call portfwToDnat migration")
    obj = RuleEntry()
    ds = DataSource()

    if os.path.exists(CONFIG):
        file = CONFIG
    else:
        file = CONFIG+".rpmsave"

    debug("Check for migration of portfw config file")
    if not os.path.exists(file):
        return

    config = CSVFile(file, obj, tolerant=True).load()
    if config == None:
        return

    run("touch %s 2>/dev/null" % DNAT, failOk=True)
    run("touch %s 2>/dev/null" % SNAT, failOk=True)
    run("chown nobody.nogroup %s 2>/dev/null" % DNAT, failOk=True)
    run("chown nobody.nogroup %s 2>/dev/null" % SNAT, failOk=True)

    dnat = ds.dnat.config
    snat = ds.snat.config
    pos = 0
    key1mapper = {}
    for rule in config._data:
        pos += 1
        debug("Process line %s"%pos)

        # acl item
        if rule.key2 != '0':
            item = key1mapper[rule.key1]
            debug("DNAT MIGRATION: add ACL to rule #%s" % rule.key1)
            if item.get('src_ip', '') == '':
                item['src_ip'] = rule.access_ip
            else:
                item['src_ip'] = "%s&%s" % (
                    item['src_ip'],
                    rule.access_ip
                    )
            continue

        # new portfw item 
        item = {}
        dnat.append(item)
        key1mapper[rule.key1] = item


        # migrate portfw rule:
        #
        # src_* has been the parameter where to connect in portfw
        # that's dst_* now!
        # access_* is now src_*
        # 
        # src_*    -> dst_*
        # access_* -> src_*
        #

        # nat item
        debug("DNAT MIGRATION: add portfw rule #%s" % pos)
        item['enabled'] = rule.enabled
        item['proto'] = rule.proto
        item['src_dev'] = ''
        item['src_ip'] = ''
        item['dst_dev'] = rule.src_dev
        item['dst_ip'] = rule.src_ip
        item['dst_port'] = rule.src_port
        item['target_ip'] = rule.target_ip
        item['target_port'] = rule.target_port
        item['nat_target'] = 'DNAT'
        item['remark'] = rule.remark
        item['log'] = rule.log
        item['filter_target'] = 'ACCEPT'
        if rule.proto.lower() not in ['tcp', 'udp', 'tcp&udp']:
            item['dst_port'] = ''
            item['target_port'] = ''
        if rule.src_ip in ['0.0.0.0', '0']:
            item['dst_ip'] = ''
        if rule.src_dev == 'ANY':
            item['dst_dev'] = 'UPLINK:ANY'
        if item['dst_port'] == 'ALL':
            item['dst_port'] = ''
        if item['target_port'] == 'ALL':
            item['target_port'] = ''

        if not toBool(rule.nat):
            continue

        debug("DNAT MIGRATION: implicitely add snat rule for portfw rule #%s" % pos)

        snatitem = {
            'enabled': 'on',
            'proto': item['proto'],
            'src_ip': '',
            'dst_ip': item['target_ip'],
            'dst_port': item['target_port'],
            'dst_dev': '',
            'target': 'SNAT',
            'remark': 'Migrated from portfw rule #%s'%pos,
            'log': item['log'],
            'snat_to': ''
            }
        snat.append(snatitem)
 
    info("DNAT MIGRATION: migrate portfw configuration")
    dnat.write()
    snat.write()
    run("rm -Rf %s"%os.path.dirname(file))

def enterpriseToCommunity():
    debug("Call enterpriseToCommunity migration")
    DIRS=['vpnfw']
    for i in DIRS:
        backup = "%s/%s/config.rpmsave" % (BASE, i)
        orig = "%s/%s/config" % (BASE, i)
        if not os.path.exists(backup):
            continue
        try:
            data = os.stat(orig)
            if data[stat.ST_SIZE] > 0:
                continue
        except OSError:
            # if config does not exist -> migrate
            pass
        info("ENTERPRISE MIGRATION: move %s back to %s" %(
                backup,
                orig                
                ))
        if os.path.exists(orig):
            os.unlink(orig)
        os.rename(backup, orig)
        run("chown nobody.nogroup %s 2>/dev/null" % orig, failOk=True)
        

def main():
    enterpriseToCommunity()
    portfwToDnat()

if __name__ == '__main__':
    mainHandler(main)
