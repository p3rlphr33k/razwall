#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Peter Warasin <peter@endian.com>"
__date__ = "2012-01-19"

from endian.firewall.engine import registerSubst
from endian.core.zones import getZones
from uplinksdaemon.uplinks import UplinksPool

PREFIX="ZONEMEMBERS"

class SubstZoneMembers(object):
    """
        substitutes 'value', which is taken as a ZONEMEMBERS:<zone> string
        to a set of interfaces which are members of said zone.

        If the zone has more members than one, a list of & separated
        interfaces will be returned.

        Each interface is specified as PHYSDEV:<interfacename>
    """
    def __init__(self, logger=None, listSeparator="&", exclude_stealth=False):
        """
        instantiates substitutor with following possible options:

        :param logger: instance to logger, which allows to have debug output
        :type logger: logger instance
        :param listSeparator: defines list separator. if None, real list will be returned
        :type listSeparator: string
        """
        self.log = logger
        self.listSeparator = listSeparator
        self._zonecache = getZones()
        self._uplink_pool = None
        self._exclude_stealth = exclude_stealth

    def _get_uplink_pool(self):
        if self._uplink_pool is None:
            self._uplink_pool = UplinksPool()
        return self._uplink_pool

    # XXX: make this better! in super class!
    def debug(self, msg, *args, **kw):
        if self.log:
            self.log.debug(msg, *args, **kw)

    def process(self, value, rule=None, params=None):
        if not value.startswith(PREFIX+":"):
            if self.listSeparator:
                return value
            else:
                return [value]

        tok = value.split(':')
        zone = tok[1]
        if len(tok) > 2:
            # handles for example ZONEMEMBERS:VPN:all to be ignored
            raise KeyError("Invalid zone '%s'" % zone)

        ret = None
        try:
            ret = self._zonecache[zone].members
        except KeyError:
            raise KeyError("Zone '%s' does not exist" % zone)
        if not ret:
            raise KeyError("Zone '%s' does not have any members" % zone)

        if self._exclude_stealth:
            stealth_ifs = set()
            for ul in self._get_uplink_pool().iterUplinks():
                if ul.getSettings()['RED_TYPE'] == 'STEALTH':
                    data = ul.getData()
                    if 'BRIDGE_PORT' in data:
                        stealth_ifs.add(data.get('BRIDGE_PORT'))
            ret = filter(lambda x: x not in stealth_ifs, ret)

        # prefix each interface with PHYSDEV:
        ret = map(lambda x: "PHYSDEV:"+x, ret)
        self.debug("Substituted Zone '%s' into '%s'",
                   zone,
                   ret)
        if self.listSeparator:
            return self.listSeparator.join(ret)
        else:
            return ret


registerSubst(PREFIX, SubstZoneMembers())

__all__ = [
    'SubstZoneMembers',
    ]

