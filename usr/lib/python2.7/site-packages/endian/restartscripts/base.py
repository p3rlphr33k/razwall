#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import os
from endian.job.commons import Job, action, function, run, send_cmd_to_engine, get_total_memory

class BaseJob(Job):

    @action(name="start",
            on="startup",
            priority=1,
            options={"debug":(bool,"Be more verbose.")}
            )
    def start(self, options):
        try:
            is_arm = os.uname()[4].startswith('arm')
        except:
            is_arm = False

        if is_arm:
            max_number_of_jobs = 10
        else:
            # Set the max number of concurrent jobs according to the amount of ram
            total_memory = get_total_memory(logger=self.logger)
            if total_memory <= 256*1024: # 256Mb
                max_number_of_jobs = 10
            elif total_memory <= 512*1024: # 512Mb
                max_number_of_jobs = 20
            elif total_memory < 1024*1024: # 1Gb
                max_number_of_jobs = 40
            else: # > 1Gb
                max_number_of_jobs = 0 # unlimited
        send_cmd_to_engine("config max_jobs %d" % max_number_of_jobs)

        # Kill nash
        run("killall -q nash", suppress_output=True)

        # Activate swap
        run("swapon -a", suppress_output=True)

        # Setup loopback
        run("ifconfig lo 127.0.0.1/8 up")

    @function(name="get_version")
    def get_version(self, options):
        """ Get version """
        from endian.core.version import get_version
        return get_version()

    @function(name="get_release")
    def get_release(self, options):
        """ Get release """
        from endian.core.version import get_release
        return get_release()

    @function(name="get_brand")
    def get_brand(self, options):
        """ Get brand """
        from endian.core.version import get_brand
        return get_brand()

    @function(name="get_company")
    def get_company(self, options):
        """ Get company """
        from endian.core.version import get_company
        return get_company()

    @function(name="get_kernel_version")
    def get_kernel_version(self, options):
        """ Get kernel version """
        from endian.core.version import get_kernel_version
        return get_kernel_version()

    @function(name="noop")
    def noop(self, options):
        """ No Operation - Do nothing """
        return "OK"

    @function(name="reboot")
    def reboot(self, options):
        """ Reboot the system """
        run("/sbin/shutdown -r now", suppress_output=True)
        return "Reboot"

    @function(name="shutdown")
    def shutdown(self, options):
        """ Shutdown the system """
        run("/sbin/shutdown -h now", suppress_output=True)
        return "Shutdown"

