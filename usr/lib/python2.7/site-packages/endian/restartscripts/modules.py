#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import os
from endian.job.commons import Job, action, file_exists, run, getoutput, remove_path, \
    read_file_content, write_file_content

class ModulesJob(Job):

    def detect_hardware(self):
        if not file_exists("/sbin/kudzu"):
            return
        # Detecting Hardware
        try:
            self.info("Detecting Hardware")
            kudzu = getoutput("kudzu -qps -t 30")
            modules = set([line[8:] for line in kudzu.split('\n') if line.startswith('driver: ')])
            for module in modules:
                if module not in ["unknown", "ignore"]:
                    run("modprobe -k %s" % module, suppress_output=True)
        except Exception, ex:
            self.error(ex)

    @action(name="start",
            on="startup",
            depends="base",
            priority=2,
            options={"debug":(bool,"Be more verbose.")}
            )
    def start(self, options):
        Job.start(self, options)

        # Load modules
        system_release = os.uname()[2]

        modules_dir = "/lib/modules/%s/" % system_release
        if os.path.isdir(modules_dir) and os.access(modules_dir, os.W_OK):
            self.info("Calculating module dependencies...")
            run("depmod --quick", suppress_output=True)
        else:
            self.info("Not running depmod because %s is not writeable.", modules_dir)

        self.info("Updating System.map file location")
        boot_system_map = "/boot/System.map-" + system_release
        if os.path.exists(boot_system_map):
            remove_path("/boot/System.map")
            os.symlink(boot_system_map, "/boot/System.map")

        self.detect_hardware()

        # Initialize USB controllers
        self.info("Initializing USB controllers")
        run("mount -n -t usbfs none /proc/bus/usb")

        self.info("Initializing USB storage devices")
        run("modprobe usb-storage", suppress_output=True)
        run("modprobe sd_mod", suppress_output=True)

        # Unmount the initrd, if necessary
        mounts = read_file_content("/proc/mounts", logger=self.logger)
        if "/initrd" in mounts and "/initrd/loopfs" not in mounts:
            run("umount /initrd", suppress_output=True)
            run("blockdev --flushbufs /dev/ram0", suppress_output=True)

        # Initializing Power Management ACPI first, then APM.
        # APM won't load if ACPI is initialized anyway.
        self.info("Initializing Power Management")

        for module in ["ac", "battery", "button", "fan", "processor", "thermal", "apm", "bridge", "br_netfilter"]:
            run("modprobe %s" % module, suppress_output=True)

        self.info("Setting kernel settings")
        run("sysctl -e -p /etc/sysctl.conf", suppress_output=True)
        run("modprobe ebt_limit")

        try:
            tcp_max_syn_backlog = read_file_content("/proc/sys/net/ipv4/tcp_max_syn_backlog", logger=self.logger)
            if tcp_max_syn_backlog:
                write_file_content("/proc/sys/net/ipv4/tcp_max_syn_backlog", "%s" % int(tcp_max_syn_backlog) * 8)
        except Exception, ex:
            self.error(ex)

        write_file_content("/proc/sys/net/core/somaxconn", "8192")

        # capi
        run("modprobe capi", suppress_output=True)
