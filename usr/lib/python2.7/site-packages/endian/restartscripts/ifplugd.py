#!/usr/bin/python
from endian.job.commons import *
from uplinksdaemon.uplinks import *

ETC = "/etc/ifplugd/"
IFPLUGCONF = "ifplugd.conf"
IFPLUGACTION = "ifplugd.action"

class IfplugdJob(Job):

    def save_config(self):
        config_values = {}
        config_values['INTERFACES'] = ""
        ul = UplinksPool()
        for item in map(lambda x: x.getSettings().get('RED_DEV',''), ul.iterUplinks()):
            config_values['INTERFACES'] = item+" "+config_values['INTERFACES']
        write_config(os.path.join(ETC, IFPLUGACTION+".tmpl"),
                     os.path.join(ETC, IFPLUGACTION),
                     config_values)
        run("chmod +x %s" % os.path.join(ETC, IFPLUGACTION))
        return write_config(os.path.join(ETC, IFPLUGCONF+".tmpl"), os.path.join(ETC, IFPLUGCONF), config_values)

    @action(name="start",
            on="startup",
            depends=["network=start"],
            exit_status="start", 
            priority=85,
            options={"debug":(bool,"Be more verbose.")}
            )
    def start(self, options):
        Job.start(self, options)
        self.info("Starting ifplugd...")
        options['force'] = True
        return self.restart(options)

    @action(name="stop",
            options={"debug":(bool,"Be more verbose.")}
            )    
    def stop(self, options):
        Job.stop(self, options)
        if options.get("onboot"):
            return EXIT_STATUS_STOP
        run("/etc/init.d/ifplugd condstop")
        return EXIT_STATUS_STOP

    @action(name="restart",
            depends=["network=start"],
            exit_status="start",
            options={"debug":(bool,"Be more verbose."),
                     "force":(bool,"Forces start.")})        
    def restart(self, options):
        Job.restart(self, options)
        self.info("Restarting ifplugd...")
        changed = self.save_config()
        if options.get('force', False) or changed:
           run("/etc/init.d/ifplugd condstop")
        run("/etc/init.d/ifplugd start")

    @action(name="updatewizard",
            on="updatewizard",
            priority=85,
            exit_status=DONT_CHANGE_STATUS,
            options={"debug":(bool,"Be more verbose.")}
            )
    def updatewizard(self, options):
        self.info("Updatewizard ifplugd")
        options['force'] = True
        return self.restart(options)
