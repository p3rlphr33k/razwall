#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

"""
.. mod:: dnsblackhole - Contains the DnsBlackHoleJob job.

.. synopsis:: Contains the DnsBlackHoleJob job.

.. automodule:: dnsblackhole

Contains the DnsBlackHoleJob.

.. moduleauthor:: Alber Maximilian
"""
__all__ = [
    'DnsBlackHoleJob'
]

from endian.job.commons import action, send_cmd_to_engine, Job
from endian.job.generic.cronjob import AnaCronJob

class DnsBlackHoleJob(AnaCronJob, Job):
    """
    .. autoclass:: AnaCronJob

    Resets the dnsblackhole cron scripts.
    """

    settings_file_name = "dnsmasq/settings"
    scripts = {"blackholedns":
                   ("/usr/local/bin/getblackholedns",
                    "DNSMASQ_UPDATE_SCHEDULE")}

    @action(name="start",
            on="startup",
            priority=40,
            depends=["emi=start"],
            exit_status="start",
            options={"debug":(bool,"Be more verbose."),
                     "no_unset":(bool,"Do not unset symlinks."),
                     "no_set":(bool,"Do not set symlinks."),
                     "no_pre_unset":(bool,"Do not trigger pre_unset hook."),
                     "no_post_unset":(bool,"Do not trigger post_unset hook."),
                     "no_pre_set":(bool,"Do not trigger pre_set hook."),
                     "no_post_set":(bool,"Do not trigger post_set hook.")}
            )
    def start(self, options):
        """
        .. autofunction:: start

        Resets the scripts.
        """
        AnaCronJob.start(self, options)

        send_cmd_to_engine("restart getblackholedns options(update:True)")
        pass

    @action(name="restart",
            depends=["emi=start"],
            exit_status="start",
            options={"debug":(bool,"Be more verbose."),
                     "no_unset":(bool,"Do not unset symlinks."),
                     "no_set":(bool,"Do not set symlinks."),
                     "no_pre_unset":(bool,"Do not trigger pre_unset hook."),
                     "no_post_unset":(bool,"Do not trigger post_unset hook."),
                     "no_pre_set":(bool,"Do not trigger pre_set hook."),
                     "no_post_set":(bool,"Do not trigger post_set hook.")}
            )
    def restart(self, options):
        """
        .. autofunction:: start

        Resets the scripts.
        """
        AnaCronJob.restart(self, options)

        send_cmd_to_engine("restart dnsmasq options(force:True)")
        # XXX: may be not force if restartdnsmasq gets rid of the extra config file
        pass

    pass
