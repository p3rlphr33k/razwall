#!/usr/bin/python
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2012-2013 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | efw-ipsec is free software: you can redistribute it and/or modify it     |
# | under the terms of GNU General Public License (GPL) version 2.0          |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | efw-ipsec is distributed in the hope that it will be useful,             |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with efw-ipsec.     |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+

import endian.core.i18n
from endian.emi import entities
from endian.emi import widgets
from endian.validators.network import NetworkAddress

__all__ = [
    "IPsecCertificateTypeOptions",
    "IPsecSettings",
]

class IPsecCertificateTypeOptions(entities.Entity):
    entities.using_options(type='const')

    id = entities.Field(entities.Unicode, primary_key=True, nullable=False)
    name = entities.Field(entities.Unicode, nullable=False)

    values = [
        {'ID': 'selected', 'name': _("Use selected certificate")},
        {'ID': 'cert', 'name': _("Use an existing certificate")},
        {'ID': 'new_cert', 'name': _("Generate a new certificate")},
        {'ID': 'upload_cert', 'name': _("Upload a certificate")},
        {'ID': 'upload_cert_req', 'name': _("Upload a certificate signing request")},
    ]

class IPsecSettings(entities.Entity):
    entities.using_options(namespace='vpn.settings', type='settings', register_datasource=True)

    ENABLED = entities.Field(entities.Boolean,
        label_text=_("Enable IPsec"),
        default=False)

    VIRTUAL_IP_POOL = entities.Field(entities.Unicode,
        label_text=_("Roadwarriors virtual IP (inner IP) pool"),
        nullable=True,
        validator=NetworkAddress)

    CERT_FILENAME = entities.ManyToOne(
        label_text=_("Certificate"),
        target="ca:Certificate",
        target_filter_key="has_key&has_type_client",
        target_filter_value="True&False",
        toggle_name="cert_option",
        toggle_option="cert",
        singleselect_type="chosen",
        nullable=True,
        required=False)

    CA_FILENAME = entities.Field(entities.Unicode)

    DPD_DELAY = entities.Field(entities.Integer(not_empty=True, min=0),
        label_text="Ping delay (in seconds)",
        default=30)

    DPD_TIMEOUT = entities.Field(entities.Integer(not_empty=True, min=0),
        label_text="Timeout interval (in seconds) - IKEv1 only",
        default=120)

    DBG_DMN = entities.Field(entities.Boolean,
        label_text=_("Main daemon setup/cleanup/signal handling"),
        default=False)
    DBG_MGR = entities.Field(entities.Boolean,
        label_text=_("IKE SA manager"),
        default=False)
    DBG_IKE = entities.Field(entities.Boolean,
        label_text=_("IKE SA"),
        default=False)
    DBG_CHD = entities.Field(entities.Boolean,
        label_text=_("Child SA"),
        default=False)
    DBG_JOB = entities.Field(entities.Boolean,
        label_text=_("Jobs queueing/processing and thread pool"),
        default=False)
    DBG_CFG = entities.Field(entities.Boolean,
        label_text=_("Configuration management and plugins"),
        default=False)
    DBG_KNL = entities.Field(entities.Boolean,
        label_text=_("IPsec/Networking kernel interface"),
        default=False)
    DBG_NET = entities.Field(entities.Boolean,
        label_text=_("IKE network communication"),
        default=False)
    DBG_ASN = entities.Field(entities.Boolean,
        label_text=_("Low-level encoding/decoding (ASN.1, X.509 etc.)"),
        default=False)
    DBG_ENC = entities.Field(entities.Boolean,
        label_text=_("Packet encoding/decoding encryption/decryption"),
        default=False)
    DBG_TLS = entities.Field(entities.Boolean,
        label_text=_("Messages from libtls"),
        default=False)
    DBG_LIB = entities.Field(entities.Boolean,
        label_text=_("Messages from libstrongwan"),
        default=False)
    DBG_TNC = entities.Field(entities.Boolean,
        label_text=_("Trusted Network Connect"),
        default=False)
    DBG_IMC = entities.Field(entities.Boolean,
        label_text=_("Integrity Measurement Collector"),
        default=False)
    DBG_IMV = entities.Field(entities.Boolean,
        label_text=_("Integrity Measurement Verifier"),
        default=False)
    DBG_PTS = entities.Field(entities.Boolean,
        label_text=_("Platform Trust Service"),
        default=False)

