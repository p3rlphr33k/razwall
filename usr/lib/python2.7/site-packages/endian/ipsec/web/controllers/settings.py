#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2012-2015 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | efw-ipsec is free software: you can redistribute it and/or modify it     |
# | under the terms of GNU General Public License (GPL) version 2.0          |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | efw-ipsec is distributed in the hope that it will be useful,             |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with efw-ipsec.     |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.ca.schema.ca import Certificate
from endian.ca.common import DEFAULT_DIGEST
from endian.ca.web.controllers.common import BaseCertificateSettingsController
from endian.ipsec.commands import ipsec_reload
from endian.ipsec.web.widgets.settings import IPsecSettingsEditor

__all__ = ['IPsecSettingsController']

class IPsecSettingsController(BaseCertificateSettingsController):
    title = _("IPsec settings")

    settingsWidget = IPsecSettingsEditor

    cert_option_field = "cert_option"
    filename_field = "CERT_FILENAME"

    def _apply(self, **args):
        self.storage.changed = False
        ipsec_reload()

    def onLoad(self, data):
        data['selected_cert'] = data.get(self.filename_field, "")
        if not data.get("new_cert_digest"):
            data["new_cert_digest"] = DEFAULT_DIGEST
        return data

    def onSubmit(self, data):
        # workaraound for problem with empty file input fields
        data['new_cert_type'] = "server" # make sure we always use server for cert type
        return data

    def onStore(self, data):
        data = super(IPsecSettingsController, self).onStore(data)
        if data.get(self.cert_option_field) == "selected":
            data['CERT_FILENAME'] = data.get('selected_cert', "")
        cert = Certificate.get_by_id(data[self.filename_field])
        if cert and cert.has_type_client:
            data['CERT_FILENAME'] = ""
            data['error'] = _("Imported certificate has type client.")
        elif cert and not cert.has_key:
            data['CERT_FILENAME'] = ""
            data['error'] = _("Imported certificate does not provide a private key.")
        if not cert:
            data['CA_FILENAME'] = ""
        else:
            data['CA_FILENAME'] = cert.ca_id

        if 'error' in data:
            return data

        # we need to delete all keys which should not be saved into the settings file
        delete = []
        for key, value in data.iteritems():
            if key.startswith("new_") or key.startswith("upload_"):
                delete.append(key)
        for key in delete:
            del data[key]
        del data[self.cert_option_field]
        del data['selected_cert']
        return data
