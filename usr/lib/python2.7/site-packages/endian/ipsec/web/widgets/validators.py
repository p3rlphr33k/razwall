#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2012-2013 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | efw-ipsec is free software: you can redistribute it and/or modify it     |
# | under the terms of GNU General Public License (GPL) version 2.0          |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | efw-ipsec is distributed in the hope that it will be useful,             |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with efw-ipsec.     |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+

import re

import endian.core.i18n
from endian.core import logger
from endian.validators.core import Invalid
from endian.validators.form import FormValidator

from endian.ipsec.schema import IPsecConnection

__all__ = [
    'UniqueNameValidator',
    'AuthenticationValidator',
    'DontRenameIfConnectedValidator',
]

RESERVED_NAMES = ["host", "01", "block", "private", "clear", "packetdefault"]


class UniqueNameValidator(FormValidator):
    """
    Validator for unique connection name
    """
    def _(s): return s

    storage = None

    messages = {
        'unique': _("The connection name must be unique"),
        'invalid': _("The name must only contains letters and numbers"),
        'reserved': _("Invalid reserved name"),
    }

    re_name = re.compile(r'^[a-zA-Z0-9]+$')

    def _to_python(self, value_dict, state):
        if self.storage is None:
            self.storage = IPsecConnection.storage()
        try:
            id = int(value_dict.get("ID"))
        except:
            id = -1
        name = value_dict.get('name') or ""
        name = name.strip()
        if name.lower() in RESERVED_NAMES:
            error_dict = {
                'name': self.message('reserved', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        if not self.re_name.search(name):
            error_dict = {
                'name': self.message('invalid', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        for item in self.storage.select(name=name):
            if int(item.get("ID")) != id:
                error_dict = {
                    'name': self.message('unique', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
        value_dict['name'] = name
        return value_dict


class AuthenticationValidator(FormValidator):
    """
    Validator for authentication options
    """
    def _(s): return s

    storage = None

    messages = {
        'duplicate_peerid': _('When used, local ID and remote ID must not be equal'),
        'missing_remote_peerid': _('You must specify a correct Distinguished Name (DN) for this authentication'),
        'psk_already_exist': _("You can only define one roadwarrior connection when using pre-shared key authentication"),
        'secret_short': _("Pre-shared key is too short"),
        'secret_invalid': _("Invalid characters found in pre-shared key"),
        'missing_value': _("Please enter a value"),
        'already_used': _("This certificate is already used for another connection"),
    }

    re_secret = re.compile(r'[\'",&]')

    def _to_python(self, value_dict, state):
        # check local/remote peer id
        if value_dict.get('local_peerid') and value_dict.get('local_peerid') == value_dict.get('remote_peerid'):
            error_dict = {
                'local_peerid': self.message('duplicate_peerid', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        # authentication check
        auth_type = value_dict.get('auth_type')
        if auth_type == 'psk': # PSK
            logger.debug("PSK")
            secret = value_dict.get('secret')
            # allow only one roadwarrior/psk without remote IP-address
            if not value_dict.get('remote_address'):
                for con in IPsecConnection.storage().select():
                    if str(con.ID) != str(value_dict['ID']) and con.auth_type == 'psk' and not con.remote_address:
                        error_dict = {
                            'auth_type': self.message('psk_already_exist', state)
                        }
                        raise Invalid("", value_dict, state, error_dict=error_dict)
            # check password
            if not secret:
                error_dict = {
                    'secret': self.message('secret_short', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
            if self.re_secret.match(secret):
                error_dict = {
                    'secret': self.message('secret_invalid', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
        elif auth_type == 'auth-dn': # Peer is identified by either IPV4_ADDR, FQDN, USER_FQDN or DER_ASN1_DN string in remote ID field
            if not value_dict.get('remote_peerid'):
                error_dict = {
                    'remote_peerid': self.message('missing_remote_peerid', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
        elif auth_type == 'cert': # Existing certificate
            logger.debug("Certificate")
            # check if the certificate is used for another connection
            for con in IPsecConnection.storage().select():
                if str(con.ID) != str(value_dict['ID']) and con.auth_type == 'cert' and con.cert_filename == value_dict['cert_filename']:
                    error_dict = {
                        'cert_filename': self.message('already_used', state)
                    }
                    raise Invalid("", value_dict, state, error_dict=error_dict)

        return value_dict


class DontRenameIfConnectedValidator(FormValidator):
    """
    Block renamining of connected tunnels
    """
    def _(s): return s

    storage = None

    messages = {
        'connected': _("Cannot rename an ongoing connection"),
    }

    def _to_python(self, value_dict, state):
        if self.storage == None:
            self.storage = IPsecConnection.storage()
        try:
            id = int(value_dict.get("ID"))
        except:
            return value_dict
        connection = self.storage.load(id)
        if connection is None or connection.name == value_dict.get('name'):
            return value_dict
        if connection.is_connected:
            error_dict = {
                'name': self.message('connected', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        else:
            return value_dict
