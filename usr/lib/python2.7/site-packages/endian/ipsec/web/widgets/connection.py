#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2012-2013 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | efw-ipsec is free software: you can redistribute it and/or modify it     |
# | under the terms of GNU General Public License (GPL) version 2.0          |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | efw-ipsec is distributed in the hope that it will be useful,             |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with efw-ipsec.     |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+

import os
import endian.core.i18n
from endian.validators.core import FieldsMatch
from endian.emi import widgets
from endian.emi import fieldset

from endian.authentication.handlers.ca import CA_CERTS_DIR
from endian.ca.web.widgets.common import get_new_cert_fields, get_upload_cert_fields, get_upload_cert_req_fields
from endian.ca.web.widgets.validators import CertificateValidator
from endian.ipsec.schema import IPsecConnection
from endian.ipsec.web.widgets.validators import UniqueNameValidator, AuthenticationValidator, DontRenameIfConnectedValidator

__all__ = [
    "ConnectionGrid",
    "ConnectionEditor",
    "ConnectionInfoWidget",
]

class DownloadPem(widgets.Action):
    name = "pem"
    image = "/images/download.png"
    title = _("Download PEM file")
    link = "/manage/ca/certificate/pem?ID=%(cert_filename)s"

    def condition(self, args):
        return args.get('cert_filename') and os.path.exists(os.path.join(CA_CERTS_DIR,args.get('cert_filename'))) or False

class DownloadP12(widgets.Action):
    name = "p12"
    image = "/images/download_encrypted.png"
    title = _("Download PKCS12 file")
    link = "/manage/ca/certificate/p12?ID=%(cert_filename)s"

    def condition(self, args):
        return args.get('cert_filename') and os.path.exists(os.path.join(CA_CERTS_DIR,args.get('cert_filename')[:-8] + ".p12")) or False

class ConnectionResetAction(widgets.Action):
    name = "reset"
    title = _("Reset connection")
    image = "/images/reload.png"
    command = "commands.ipsec.resetConnection"
    command_args = {'name': 'name'}
    ajax_support = True

class InfoAction(widgets.Action):
    name = "info"
    image = "/images/info.png"
    title = _("View connection details")
    link = "info?name=%(name)s"

    def condition(self, args):
        return args.get('enabled')
    #   return args.get('is_connected')

class ConnectionGrid(widgets.KendoGrid):
    new_label = _("Add new connection")
    sortable = True
    selectable = False
    
    entity = IPsecConnection
    
    columns = [
        # widgets.CheckBoxColumn(name='ID'),
        widgets.Column(name="name", title=_("Name"), empty_value=""),
        widgets.Column(name="type_label", title=_("Type"), empty_value=""),
        widgets.Column(name="common_name_type", title=_("Common Name"), empty_value=""),
        widgets.Column(name="remark", title=_("Remark"), empty_value=""),
        widgets.Column(name="status", title=_("Status"), empty_value=""),
        widgets.ActionsColumn(["enable", "edit", ConnectionResetAction, DownloadP12, InfoAction, "deleteConfirm"])
    ]

class ConnectionEditor(widgets.GridEditor):
    title = _("Add new connection")
    edit_title = _("Change connection")
    javascript = widgets.GridEditor.javascript + [
        widgets.static.jquery_ui_accordion_endian,
        widgets.static.JSLink(link='/toscawidgets/resources/endian.ipsec.web/static/js/connection.js', javascript=[widgets.static.jquery_js])
    ]
    
    entity = IPsecConnection
    
    children = fieldset.FieldsGroup(
        fields=IPsecConnection.fields(fields=[
            "name",
            "remark",
            "connection_type",
            fieldset.FieldsGroup(
                id="authentication",
                info_text=_("Authentication"),
                fields=IPsecConnection.fields(fields=[
                    "auth_type",
                    fieldset.FieldsGroup(
                        id="authentication_options",
                        columns=1,
                        expands=False,
                        fields=IPsecConnection.fields(fields=[
                            # PSK
                            "secret",
                            # Use an existing certificate
                            "cert_filename"
                        ])
                    ),
                    get_new_cert_fields(toggle_name="auth_type", label={
                        "new_cert_name" : _("User's full name or system hostname"),
                        "new_cert_email" : _("User's email address"),
                        "new_cert_ou": _("User's department")
                    }),
                    get_upload_cert_fields(toggle_name="auth_type"),
                    get_upload_cert_req_fields(toggle_name="auth_type")
                ]),
            ),
            fieldset.FieldsGroup(
                id="local",
                info_text=_("Local"),
                fields=IPsecConnection.fields(fields=[
                    "local_peerid",
                    "interface",
                    "local_subnet",
                ]),
            ),
            fieldset.FieldsGroup(
                id="remote",
                info_text=_("Remote"),
                fields=IPsecConnection.fields(fields=[
                    "remote_peerid",
                    "remote_address",
                    "remote_subnet",
                    "vhost",
                ])
            ),
            fieldset.FieldsGroup(
                id="options",
                info_text=_("Options"),
                fields=IPsecConnection.fields(fields=[
                    "dpd_action",
                ])
            ),

            fieldset.FieldsGroup(
                id="advanced",
                accordion=True,
                accordion_collapses=True,
                fields=[
                    fieldset.FieldsGroup(
                        id="advanced_options",
                        title=_("Advanced"),
                        fields=IPsecConnection.fields(fields=[
                            fieldset.FieldsGroup(
                                id="ike_options",
                                info_text=_("Internet Key Exchange protocol configuration"),
                                fields=IPsecConnection.fields(fields=[
                                    "ike_encryption",
                                    "ike_integrity",
                                    "ike_grouptype",
                                    "ike_lifetime",
                                    "ike_version",
                                ])),
                            fieldset.FieldsGroup(
                                id="esp_options",
                                info_text=_("Encapsulating security payload configuration"),
                                fields=IPsecConnection.fields(fields=[
                                    "esp_encryption",
                                    "esp_integrity",
                                    "esp_grouptype",
                                    "esp_keylife",
                                ])),
                            fieldset.FieldsGroup(
                                id="additional_options",
                                info_text=_("Additional options"),
                                fields=IPsecConnection.fields(fields=[
                                    "compression",
                                    "modeconfig",
                                    "auto",
                                ])),
                        ]))
                ]
            ),
            "enabled",
            "ID",
        ])
    )

    chained_validators = [
        UniqueNameValidator(),
        DontRenameIfConnectedValidator(),
        CertificateValidator("auth_type"),
        AuthenticationValidator(),
        FieldsMatch('new_cert_password', 'new_cert_password_confirm', # check if password and confirm password match
                    messages={'invalidNoMatch': _("Certificate passwords do not match")})
    ]

class ConnectionInfoWidget(widgets.Container):
    template = "endian.ipsec.web.templates.connection_info"

