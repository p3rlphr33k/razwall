#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2012-2013 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | efw-ipsec is free software: you can redistribute it and/or modify it     |
# | under the terms of GNU General Public License (GPL) version 2.0          |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | efw-ipsec is distributed in the hope that it will be useful,             |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with efw-ipsec.     |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+

import endian.core.i18n
from endian.validators.core import FieldsMatch
from endian.emi import widgets, fieldset, entities
from endian.emi.entities.fieldset import range_options
from endian.ca.web.widgets.common import get_new_cert_fields, get_upload_cert_fields, get_upload_cert_req_fields
from endian.ca.web.widgets.validators import CertificateValidator
from endian.ca.web.widgets.ca import CertificateDownloadField, CertificateAuthorityDownloadField
from endian.ipsec.schema import IPsecSettings

__all__ = [
    "IPsecSettingsEditor"
]

class IPsecSettingsEditor(widgets.SettingsEditor):
    within_box = True
    
    entity = IPsecSettings
    
    children = fieldset.FieldsGroup(
        id="global_settings",
        fields=IPsecSettings.fields(fields=[
            "VIRTUAL_IP_POOL",
            fieldset.FieldsGroup(
                id="dpd",
                info_text=_("Dead Peer Detection"),
                fields=IPsecSettings.fields(fields=[
                    "DPD_DELAY",
                    "DPD_TIMEOUT",
                ])
            ),
            fieldset.FieldsGroup(
                id="certificate_management",
                info_text=_("Server certificate"),
                fields=IPsecSettings.fields(fields=[
                    widgets.SingleSelectField("cert_option",
                        label_text=_("Certificate configuration"),
                        options=range_options(info=dict(
                            target="ipsec:IPsecCertificateTypeOptions"
                        )),
                        hover_help=False,
                        not_empty=True),
                    fieldset.FieldsGroup(
                        id="certificate_details",
                        columns=1,
                        expands=False,
                        fields=IPsecSettings.fields(fields=[
                            CertificateDownloadField("selected_cert",
                                not_available_text = _("Select a certificate via the '%s'.") % _("Certificate configuration"),
                                show_details=True,
                                show_pem=False,
                                show_pkcs12=False,
                                suppress_label=True,
                                toggle_name="cert_option",
                                toggle_option="selected"),
                            "CERT_FILENAME"
                        ])
                    ),
                    get_new_cert_fields(toggle_name="cert_option", label={
                        "new_cert_name" : _("System hostname"),
                        "new_cert_email" : _("Administrator email address"),
                        "new_cert_ou": _("Department name")
                    },
                    not_fields=[
                        "new_cert_type"
                    ],
                    expands=[
                        "new_cert_country"
                    ]),
                    get_upload_cert_fields(toggle_name="cert_option", pkcs12_only=True),
                    get_upload_cert_req_fields(toggle_name="cert_option")
                ])
            ),
            fieldset.FieldsGroup(
                id="ca_management",
                info_text=_("Certificate Authority"),
                toggle_name="cert_option",
                toggle_option="selected",
                fields=[
                    CertificateAuthorityDownloadField("CA_FILENAME",
                        not_available_text = _("No CA certificate available for the selected certificate."),
                        show_details=False,
                        show_pem=True,
                        show_pkcs12=False,
                        suppress_label=True,
                        expands=True),
                ]
            ),
            fieldset.FieldsGroup(
                id="advanced_settings",
                accordion=True,
                accordion_collapses=True,
                fields=[
                    fieldset.FieldsGroup(
                        id="advanced_settings_options",
                        title=_("Debug options"),
                        fields=IPsecSettings.fields(fields=[
                            "DBG_DMN", "DBG_MGR", "DBG_IKE", "DBG_CHD", "DBG_JOB", "DBG_CFG", "DBG_KNL", "DBG_NET", "DBG_ASN", "DBG_ENC", "DBG_TLS", "DBG_LIB", "DBG_TNC", "DBG_IMC", "DBG_IMV", "DBG_PTS"
                        ])
                    )
                ]
            ),

        ])
    )
    
    chained_validators = [
        CertificateValidator("cert_option"),
        FieldsMatch('new_cert_password', 'new_cert_password_confirm', # check if password and confirm password match
                    messages={'invalidNoMatch': _("Certificate passwords do not match")})
    ]
