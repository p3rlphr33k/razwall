#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2016-06-16"

from UserDict import DictMixin
from endian.core.holistic_lock import HolisticLock

LOCK = '/var/run/nvstorage.lck'

__all__ = [
    'AbstractNVStorage',
]

class AbstractNVStorage(DictMixin):

    def __init__(self, *args, **kwargs):
        self._hlock = HolisticLock(LOCK)

    def _read(self, op=None, key=None):
        " Read data - op is 'get', 'set' or 'unset', key is the readed/updated/delete key "
        raise NotImplementedError()

    def _write(self, data, op=None, key=None):
        " Write data - op is 'set' or 'unset', key is the updated/delete key "
        raise NotImplementedError()

    def _lock(self):
        self._hlock.acquire()

    def _unlock(self):
        self._hlock.release()

    def __iter__(self):
        data = self._read()
        return iter(data)

    def __getitem__(self, key):
        data = self._read('get', key)
        return data[key]

    def __len__(self):
        data = self._read()
        return len(data)

    def __setitem__(self, key, value):
        try:
            self._lock()
            data = self._read('set', key)
            data[key] = value
            self._write(data, 'set', key)
        finally:
            self._unlock()

    def __delitem__(self, key):
        try:
            self._lock()
            data = self._read('unset', key)
            del data[key]
            self._write(data, 'unset', key)
        finally:
            self._unlock()

    def __contains__(self, item):
        data = self._read()
        return data.__contains__(item)

    def keys(self):
        " Return a copy of the dictionary’s list of keys. "
        data = self._read()
        return data.keys()

    def values(self):
        " Return a copy of the dictionary’s list of (key, value) pairs. "
        data = self._read()
        return data.values()

    def items(self):
        " Test for the presence of key in the dictionary. "
        data = self._read()
        return data.items()

    def iteritems(self):
        " Return an iterator over the dictionary’s (key, value) pairs. "
        data = self._read()
        return data.iteritems()

    def iterkeys(self):
        " Return an iterator over the dictionary’s keys. "
        data = self._read()
        return data.iterkeys()

    def itervalues(self):
        " Return an iterator over the dictionary’s values. "
        data = self._read()
        return data.itervalues()

    def has_key(self, key):
        " Test for the presence of key in the dictionary. "
        data = self._read('get', key)
        return data.has_key(key)

    def pop(self, key, default=None):
        " Not implemented "
        raise NotImplementedError()

    def popitem(self):
        " Not implemented "
        raise NotImplementedError()

    def clear(self):
        " Not implemented "
        raise NotImplementedError()

    def setdefault(self, key, default=None):
        " Not implemented "
        raise NotImplementedError()

    def update(*args, **kwds):
        " Not implemented "
        raise NotImplementedError()

    def __getattr__(self, key):
        try:
            return self.__getitem__(key)
        except KeyError:
            raise AttributeError("NVStorage instance has no attribute '%s'"%key)

