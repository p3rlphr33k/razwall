#!/usr/bin/python
#
#        +-----------------------------------------------------------------------------+
#        | Endian Firewall                                                             |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) 2005-2009 Endian                                              |
#        |         Endian GmbH/Srl                                                     |
#        |         Bergweg 41 Via Monte                                                |
#        |         39057 Eppan/Appiano                                                 |
#        |         ITALIEN/ITALIA                                                      |
#        |         info@endian.it                                                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        | http://www.fsf.org/                                                         |
#        +-----------------------------------------------------------------------------+
#

import os, os.path, gettext, subprocess, time, httplib, sys, urllib
from htmltmpl import TemplateManager, TemplateProcessor
from Cheetah.Template import Template
from Cheetah.Tools import RecursiveNull
import endian.core.i18n

WIDGETDIR = '/usr/share/efw-gui/core/widgets'

class BaseWidget(object):
    values = {}
    filename = None
    __compiledir = '/tmp'
    cheetah = False
    
    def __init__(self, filename, cheetah=False):
        self.cheetah = cheetah
        self.filename = filename
        
    def __prepare(self):
        template = TemplateManager(compiledir=self.__compiledir).prepare(self.filename)
        return template
    
    def __fillValues(self):
        if not self.cheetah:
            tproc = TemplateProcessor(html_escape=0, debug=0)
            for key, item in self.values.iteritems():
                tproc.set(key, item)
            return tproc
        elif self.cheetah:
            null = RecursiveNull.RecursiveNull()
            tproc = Template(file=self.filename, searchList=[{'_':_}, self.values, null])
            return str(tproc)
        return None
    
    def display(self,content_type="text/html"):
        header = "Cache-Control: no-cache, must-revalidate\r\n"\
                 "Expires: Mon, 26 Jul 1997 05:00:00 GMT\r\n"\
                 "Pragma: no-cache\r\n"\
                 "Content-type: %s\r\n\r\n" %(content_type)
        print header + self.getString(True) 
    
    def getString(self, exception=False):
        if not self.cheetah:
            template = self.__prepare()
        tproc = self.__fillValues()
        if not self.cheetah:
            return tproc.process(template)
        elif self.cheetah:
            return tproc
        
    def set(self,name,value):
        self.setValue(name,value)
        
    def setValue(self,name,value):
        self.values[name] = value

    def isTrue(self,x):
        if x != None and x != False and x != 0:
            if not self.cheetah:
                return 1
            elif self.cheetah:
                return True
        else:
            if not self.cheetah:
                return 0
            elif self.cheetah:
                return False

###############################
# FORM FIELD TEMPLATES ########
###############################

class EmptyFieldWidget(BaseWidget):
    """
     params (hashref):
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
    """
    filename = "%s/empty.pltmpl" %(WIDGETDIR)        

    def __init__(self, hidden=None, toggle_id=None):
        if hidden != None:
            self.setValue('V_HIDDEN', hidden)
        if toggle_id != None:
            self.setValue('V_TOGGLE_ID',toggle_id)

class TextFieldWidget(BaseWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_VALUE (required)
             desc - value of the field
             value - string
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_SIZE (optional)
             desc - size of input field
             value - int (default=30)
         V_MAXLENGTH (optional)
             desc - max length of value
             value - int optional (default=undefined)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """
    filename = "%s/text.pltmpl" %(WIDGETDIR)        

    def __init__(self,id,name,value,required=False,hidden=False,disabled=False,
                 size='30',maxlength=None,toggle_id=None,label=None):
        self.setValue('V_ID',id)
        self.setValue('V_NAME', name)
        self.setValue('V_VALUE', value)
        self.setValue('V_REQUIRED',self.isTrue(required))
        self.setValue('V_HIDDEN',self.isTrue(hidden))
        self.setValue('V_DISABLED',self.isTrue(disabled))
        self.setValue('V_SIZE',size)
        self.setValue('V_MAXLENGTH', maxlength)
        self.setValue('V_TOGGLE_ID', toggle_id)
        self.setValue('T_LABEL', label)

class PasswordFieldWidget(TextFieldWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_VALUE (required)
             desc - value of the field
             value - string
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_SIZE (optional)
             desc - size of input field
             value - int (default=30)
         V_MAXLENGTH (optional)
             desc - max length of value
             value - int optional (default=undefined)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """

    filename = "%s/password.pltmpl" %(WIDGETDIR)

class TextareaFieldWidget(BaseWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_VALUE (required)
             desc - value of the field
             value - string
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_COLS (optional)
             desc - cols of textarea field
             value - int (default=28)
         V_ROWS (optional)
             desc - rows of textarea field
             value - int (default=10)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """
    filename = "%s/textarea.pltmpl" %(WIDGETDIR)
    
    def __init__(self,id,name,value,required=False,hidden=False,disabled=False,
                 cols='28',rows='10',toggle_id=None,label=None):
        self.setValue('V_ID',id)
        self.setValue('V_NAME', name)
        self.setValue('V_VALUE', value)
        self.setValue('V_REQUIRED',self.isTrue(required))
        self.setValue('V_HIDDEN',self.isTrue(hidden))
        self.setValue('V_DISABLED',self.isTrue(disabled))
        self.setValue('V_COLS',cols)
        self.setValue('V_ROWS',rows)
        if toggle_id != None:
            self.setValue('V_TOGGLE_ID', toggle_id)
        if label != None:
            self.setValue('T_LABEL', label)

class CheckboxFieldWidget(BaseWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_VALUE (required)
             desc - value of the field
             value - string
         V_CHECKED (optional)
             desc - status of the checkbox
             value - 1 if true, 0 if false (default=0)
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
         T_CHECKBOX (required)
             desc - label text which descripes the field
             value - string
    """
    filename = "%s/checkbox.pltmpl" %(WIDGETDIR)

    def __init__(self,id,name,value,checkbox,required=False,hidden=False,checked=False,
                 disabled=False,toggle_id=None,label=None):
        self.setValue('V_ID',id)
        self.setValue('V_NAME', name)
        self.setValue('V_VALUE', value)
        self.setValue('T_CHECKBOX',checkbox)
        self.setValue('V_REQUIRED',self.isTrue(required))
        self.setValue('V_HIDDEN',self.isTrue(hidden))
        self.setValue('V_CHECKED',self.isTrue(checked))
        self.setValue('V_DISABLED',self.isTrue(disabled))
        if toggle_id != None:
            self.setValue('V_TOGGLE_ID', toggle_id)
        if label != None:
            self.setValue('T_LABEL', label)

class RadiobuttonFieldWidget(BaseWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
         T_NAME (required)
             desc - name of the field, used by post
             value - string
         V_OPTIONS (required)
             desc - value of the field
             value - string
             V_VALUE (required)
                 desc - value of the option
                 value - string
             V_CHECKED (required)
                 desc - defines if option is selected
                 value - string
             T_DESCRIPTION (required)
                 desc - text which describes the option
                 value - string (default=<V_VALUE> not implemented yet)
         T_DESCRIPTION (optional)
             desc - text which describes the radiobutton-group
             value - string
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """
    filename = "%s/radiobutton.pltmpl" %(WIDGETDIR)
    
    def __init__(self,id,name,options,description=None,required=False,
                 label=None,hidden=False,):
        self.setValue('V_ID', id)
        self.setValue('V_NAME', name)
        self.setValue('V_OPTIONS', options)
        self.setValue('T_LABEL', label)
        self.setValue('T_DESCRIPTION', description)
        self.setValue('V_REQUIRED', self.isTrue(required))
        self.setValue('V_HIDDEN', self.isTrue(hidden))


class SelectFieldWidget(BaseWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_OPTIONS (required)
             desc - array of the options for the select box
             value - array
             V_VALUE (required)
                 desc - value of the option
                 value - string
             V_SELECTED (required)
                 desc - defines if option is selected
                 value - string
             T_OPTION (optional)
                 desc - text which describes the option
                 value - string (default=<V_VALUE> not implemented yet)
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_TOGGLE_ACTION (optional)
             desc - defines if field toggles other fields, uses <TOGGLE_ID> to identify the other fields
             value - 1 if true, 0 if false (default=0)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """
    filename = "%s/select.pltmpl" %(WIDGETDIR)

    def __init__(self,id,name,options,required=False,hidden=False,disabled=False,
                 toggle_action=False,toggle_id=None,label=None):
        self.setValue('V_ID',id)
        self.setValue('V_NAME', name)
        self.setValue('V_OPTIONS',options)
        self.setValue('V_REQUIRED',self.isTrue(required))
        self.setValue('V_HIDDEN',self.isTrue(hidden))
        self.setValue('V_DISABLED',self.isTrue(disabled))
        self.setValue('V_TOGGLE_ACTION',self.isTrue(toggle_action))
        if toggle_id != None:
            self.setValue('V_TOGGLE_ID', toggle_id)
        if label != None:
            self.setValue('T_LABEL', label)
            
class MultiSelectFieldWidget(SelectFieldWidget):
    """
     params (hashref):
         V_ID (required)
             desc - id of the field, label id=<id>_field
             value - string
             required
         V_NAME (required)
             desc - name of the field, used by post
             value - string
         V_OPTIONS (required)
             desc - array of the options for the select box
             value - array
             V_VALUE (required)
                 desc - value of the option
                 value - string
             V_SELECTED (required)
                 desc - defines if option is selected
                 value - string
             T_OPTION (optional)
                 desc - text which describes the option
                 value - string (default=<V_VALUE> not implemented yet)
         V_SIZE (optional)
             desc - size of input field
             value - int (default=9)
         V_REQUIRED (optional)
             desc - show * if required
             value - 1 if true, 0 if false (default=0)
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_DISABLED (optional)
             desc - value of the field
             value - 1 if true, 0 if false (default=0)
         V_TOGGLE_ID (optional)
             desc - id of field which toggles this field
             value - string (default=undefined)
         T_LABEL (optional)
             desc - label text which descripes the field
             value - string (default=undefined)
    """
    filename = "%s/multiselect.pltmpl" %(WIDGETDIR)

    def __init__(self,id,name,options,required=False,hidden=False,disabled=False,
                 toggle_action=False,toggle_id=None,label=None,size='9'):
        SelectFieldWidget.__init__(self, id, name, options, required, hidden, disabled, 
                                   toggle_action, toggle_id, label)
        self.setValue('V_SIZE',size)

class CategoryWidget(BaseWidget):
    """
     params (hashref):
         T_TITLE (required)
             desc - 
             value - 
         V_NAME (required)
             desc - 
             value - 
         V_HIDDEN (optional)
             desc - defines if this field is visible
             value - 1 if true, 0 if false (default=0)
         V_SUBCATEGORIES (required)
             desc - 
             value - 
             T_TITLE (required)
                 desc - 
                 value - 
             V_NAME (required)
                 desc - 
                 value - 
             V_ALLOWED (optional)
                 desc - 
                 value -
    """ 
    filename = "%s/category.pltmpl" %(WIDGETDIR)

    def __init__(self,title,name,subcategories,hidden=False):
        self.setValue('T_TITLE',title)
        self.setValue('V_NAME', name)
        self.setValue('V_VALUE', subcategories)
        self.setValue('V_HIDDEN',self.isTrue(hidden))

###############################
# MENU TEMPLATES ##############
###############################

class SubsectionWidget(BaseWidget):
    filename = "%s/subsection.pltmpl" %(WIDGETDIR)

    def __init__(self,id,submenues):
        self.setValue('V_ID', id)
        self.setValue('V_SUBMENUS', submenues)

###############################
# GUI ELEMENTS TEMPLATES ######
###############################

class FormWidget(BaseWidget):
    '''
     params (hashref):
         V_FIELDS (required)
             desc - value of the field
             value - array
             V_HIDDEN (optional)
                 desc - defines if this field is visible (only needed if a field needs to be toggled by 2 diffrent toggle_ids)
                 value - 1 if true, 0 if false (default=0)
             V_TOGGLE_ID (optional)
                 desc - id of field which toggles this field (only needed if a field needs to be toggled by 2 diffrent toggle_ids)
                 value - string (default=undefined)
             H_FIELD (required)
                 desc - html code of the field
                 value - valid html
     returns:
         rendered html code
    '''
    filename = "%s/form.pltmpl" %(WIDGETDIR)
    
    def __init__(self,fields):
        self.setValue('V_FIELDS', fields)

class SwitchWidget(BaseWidget):
    """
     example param hash (all keys are needed!!!!):
     
     my %params = (
         P_SCRIPT_NAME => $ENV{'SCRIPT_NAME'}, # empty string is $ENV{'SCRIPT_NAME}
         
         V_SERVICE_VALIDATION => "", # needs to be the name of the validation js function (empty string => null)
         
         V_SERVICE_NOTIFICATION_NAME => "smtp", # empty string deactivates the ajax notification (can also be a list of names: snort, snort-rules)
         
         V_SERVICE_ON => 1, # required # 1 or 0 (empty == 0)
         V_SERVICE_AJAXIAN_SAVE => 0, # 1 or 0 (empty == 0)
         V_SERVICE_PARTIAL_RELOAD => 0, # 1 or 0 (empty == 0)
         
         H_OPTIONS_CONTAINER => $template,
         
         T_SERVICE_TITLE => _('Enable SMTP Proxy'),
         T_SERVICE_STARTING => _("The SMTP Proxy is being enabled. Please hold..."),
         T_SERVICE_SHUTDOWN => _("The SMTP Proxy is being disabled. Please hold..."),
         T_SERVICE_RESTARTING => _("Settings are saved and the SMTP Proxy is being restarted. Please hold..."),
         T_SERVICE_DESCRIPTION => _("Use the switch above to set the status of the SMTP Proxy. Click on the save button below to make the changes active."),
         T_SERVICE_SAVE => _("Save and restart") # empty string is _("Save")
     );
    """
    filename = "%s/switch.pltmpl" %(WIDGETDIR)
    
    def __init__(self, script_name, service_validation, service_notification_name, service_on,
                 service_ajaxian_save, service_partial_reload, options_container,
                 service_title, service_starting, service_shutdown, service_restarting,
                 service_description, service_save):
        self.setValue('P_SCRIPT_NAME', script_name)
        self.setValue('V_SERVICE_VALIDATION', service_validation)
        self.setValue('V_SERVICE_NOTIFICATION_NAME', service_notification_name)
        self.setValue('V_SERVICE_ON', service_on)
        self.setValue('V_SERVICE_AJAXIAN_SAVE', service_ajaxian_save)
        self.setValue('V_SERVICE_PARTIAL_RELOAD', service_partial_reload)
        self.setValue('H_OPTIONS_CONTAINER', options_container)
        self.setValue('T_SERVICE_TITLE', service_title)
        self.setValue('T_SERVICE_STARTING', service_starting)
        self.setValue('T_SERVICE_SHUTDOWN', service_shutdown)
        self.setValue('T_SERVICE_RESTARTING', service_restarting)
        self.setValue('T_SERVICE_DESCRIPTION', service_description)
        self.setValue('T_SERVICE_SAVE', service_save)

class AccordionWidget(BaseWidget):
    """
     params (hashref):
         V_ACCORDION (required)
             desc - 
             value - 
             T_TITLE (required)
                 desc - 
                 value - 
             T_DESCRIPTION (required)
                 desc - 
                 value -
             T_SAVE_BUTTON (optional)
                 desc - 
                 value -
             H_CONTAINER (required)
                 desc - 
                 value - 
             V_HIDDEN (optional)
                 desc - 
                 value - 
             T_STARTONLY (optional)
                 desc - for backwards compatability to use instead of openbox
                 value - 
             T_ENDONLY (optional)
                 desc - for backwards compatability to use instead of openbox
                 value - 
    """
    filename = "%s/accordion.pltmpl" %(WIDGETDIR)
    
    def __init__(self, accordion):
        self.setValue('V_ACCORDION', accordion)


class ListTableWidget(BaseWidget):
    filename = "%s/listtable.pltmpl" %(WIDGETDIR)

    def __init__(self, headings, rows, actions=0,id=None):
        self.values['V_HEADINGS'] = headings
        self.values['V_ACTIONS'] = actions
        if id:
            self.values['V_ID'] = id
        self.values['V_ROWS'] = rows
    
    def enableAction(self, type):
        self.values['%s_ACTION' %type] = 1

    def disableAction(self, type):
        if self.values.has_key('%s_ACTION' %type):
            del self.values['%s_ACTION' %type]
            
    def getString(self, ex):
        i = 0
        for row in self.values['V_ROWS']:
            i += 1
            if i % 2 == 0:
                row['STYLE'] = 'even'
            else:
                row['STYLE'] = 'odd'
        return BaseWidget.getString(self, ex)


class BubbleWidget(BaseWidget):
    """
     params (hashref):
         V_COLOR (required)
             desc - the color of the bubble (red or yellow)
             value - red/yellow
         T_MESSAGE (required)
             desc - the text that should be displayed in the bubble
         V_STYLE (optional)
             desc - optional styles for the bubble
    """
    filename = "%s/bubble.pltmpl" %(WIDGETDIR)
    
    def __init__(self,color,message,style=None):
        self.values['T_MESSAGE'] = message
        self.values['V_STYLE'] = style
        self.values['T_APPLY'] = None
        if color in ['error','red']:
            self.values['V_COLOR'] = 'red'
            self.values['V_BUBBLE_TYPE'] = 'error'
        else:
            self.values['V_COLOR'] = 'yellow'
            self.values['V_BUBBLE_TYPE'] = 'notification'


class ApplyBubbleWidget(BaseWidget):
    """
     params (hashref):
         T_MESSAGE (required)
             desc - the text that should be displayed in the bubble
         V_APPLY_ACTION (required)
             desc - the action for the form that is triggered when the apply button is clicked
         T_APPLY (required)
             desc - the value of the 'Apply' button
    """
    filename = "%s/bubble_apply.pltmpl" %(WIDGETDIR)
    
    def __init__(self,message,applyaction,applytext):
        self.values['T_MESSAGE'] = message
        self.values['V_APPLY_ACTION'] = applyaction
        self.values['T_APPLY'] = applytext
        

###############################
# CUSTOM     TEMPLATES ########
###############################

class ZoneStatusWidget(BaseWidget):
    filename = "%s/zonestatus.pltmpl" %(WIDGETDIR)
    
    def __init__(self):
        try:
            t = gettext.translation("efw",'/usr/share/locale')
            _ = t.gettext
        except Exception, e:
            _ = lambda x: x
        self.values = {'V_ZONES':
                       [{"NAME" : "LAN",
                         "TEXT" : _("LAN"),
                         "COLOR" : "green",
                         "OPTIONS" : [
                                      {"NAME" : "enabled", "TEXT" : _("active"), "SELECTED" : "selected=\"selected\""},
                                      {"NAME" : "transparent", "TEXT" : _("transparent mode"), "SELECTED" : ""},
                                      {"NAME" : "disabled", "TEXT" : _("inactive"), "SELECTED" : ""},
                                      ],
                        },
                        {"NAME" : "LAN2",
                         "TEXT" : _("LAN2"),
                         "COLOR" : "blue",
                         "OPTIONS" : [
                                      {"NAME" : "enabled", "TEXT" : _("active"), "SELECTED" : ""},
                                      {"NAME" : "transparent", "TEXT" : _("transparent mode"), "SELECTED" : ""},
                                      {"NAME" : "disabled", "TEXT" : _("inactive"), "SELECTED" : "selected=\"selected\""},
                                      ],
                        },
                        {"NAME" : "DMZ",
                         "TEXT" : _("DMZ"),
                         "COLOR" : "orange",
                         "OPTIONS" : [
                                      {"NAME" : "enabled", "TEXT" : _("active"), "SELECTED" : ""},
                                      {"NAME" : "transparent", "TEXT" : _("transparent mode"), "SELECTED" : ""},
                                      {"NAME" : "disabled", "TEXT" : _("inactive"), "SELECTED" : "selected=\"selected\""},
                                      ],
                        },
                        {"NAME" : "VPN",
                         "TEXT" : _("VPN"),
                         "COLOR" : "purple",
                         "OPTIONS" : [
                                      {"NAME" : "enabled", "TEXT" : _("active"), "SELECTED" : ""},
                                      {"NAME" : "transparent", "TEXT" : _("transparent mode"), "SELECTED" : "selected=\"selected\""},
                                      {"NAME" : "disabled", "TEXT" : _("inactive"), "SELECTED" : ""},
                                      ],
                                      },
                        {"NAME" : "WAN",
                         "TEXT" : _("WAN"),
                         "COLOR" : "red",
                         "OPTIONS" : [
                                      {"NAME" : "enabled", "TEXT" : _("active"), "SELECTED" : ""},
                                      {"NAME" : "disabled", "TEXT" : _("inactive"), "SELECTED" : "selected=\"selected\""},
                                      ],
                        },],
                        "T_ZONE_NOT_AVAILABLE" : _("remote configuration")}
        
class MainPageWidget(BaseWidget):
    def __init__(self, title, filename):
        self.title = title
        self.cgifile = filename
        self.values['V_CSS_INCLUDE'] = []
        self.values['V_JS_INCLUDE'] = []
        self.cheetah = True

    def setContent(self, content):
        self.values['BODY'] = content
    
    def addJSInclude(self, url):
        self.values['V_JS_INCLUDE'].append({'URL':url})

    def addCSSInclude(self,url):
        self.values['V_CSS_INCLUDE'].append({'URL':url})

    def getString(self, exception = False):
        conn = httplib.HTTPSConnection('localhost',10443)
        if self.title:
            conn.request('GET', '/cgi-bin/template.cgi?SCRIPT_NAME=%s&CONTENT_TITLE=%s' %(urllib.quote(self.cgifile),
                                                                                          urllib.quote(self.title)))
        else:
            conn.request('GET', '/cgi-bin/template.cgi?SCRIPT_NAME='+urllib.quote(self.cgifile))
        response = conn.getresponse()
        baseTemplate = response.read()
        conn.close()
        self.values['HEADER'] = ""
        for css in self.values['V_CSS_INCLUDE']:
            self.values['HEADER'] += "<style type=\"text/css\">@import url(%s);</style>\n" %css.get('URL')
        for js in self.values['V_JS_INCLUDE']:
            self.values['HEADER'] += "<script type=\"text/javascript\" src=\"%s\"></script>" %js.get('URL')
        null = RecursiveNull.RecursiveNull()
        tproc = Template(baseTemplate, searchList=[{'_':_}, self.values, null])
        return str(tproc)
