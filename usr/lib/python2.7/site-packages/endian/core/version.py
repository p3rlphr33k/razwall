#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2011-03-29"

import time
import glob
import threading
import platform
from endian.core.settingsfile import SettingsFile
from endian.data.ds import DataSource
from endian.core.i18n import get_language

__all__ = [
    'get_major_version',
    'get_minor_version',
    'get_version',
    'get_release',
    'get_product',
    'get_model',
    'is_community',
    'get_brand_settings',
    'get_brand',
    'get_company',
    'get_help_url',
    'get_network_brand',
    'get_network_name',
    'get_kernel_version',
    'get_architecture',
    'get_cpu_count',
    'is_installed',
]

BRAND_SETTINGS = "/etc/custom.conf"
VERSION_INFO = "/etc/versioninfo"

def memoize(hours=0, minutes=0, seconds=0):
    """
       Memoize decorator - cache the result of a function
    """
    def wrap(function):
        class Memoize(object):
            def __init__(self, func):
                self.data = None
                self.func = func
                self.timeout = hours * 3600 + minutes * 60 + seconds
                self.expiry = 0
                self.lock = threading.Lock()

            def __call__(self):
                try:
                    self.lock.acquire()
                    if (self.data == None) or (time.time() > self.expiry):
                        self.data = self.func()
                        self.expiry = time.time() + self.timeout
                finally:
                    self.lock.release()
                return self.data
        return Memoize(function)
    return wrap

@memoize(minutes=1)
def get_major_version():
    """
       Returns the major version of the system.

       :return: the system major version as a string
       :rtype: str
    """
    try:
        return DataSource("version").settings.get("MAJOR_VERSION", "")
    except:
        return ""

@memoize(minutes=1)
def get_minor_version():
    """
       Returns the minor version of the system.

       :return: the system minor version as a string
       :rtype: str
    """
    try:
        return DataSource("version").settings.get("MINOR_VERSION", "")
    except:
        return ""

@memoize(minutes=1)
def get_version():
    """
       Returns the version of the system.

       :return: the system version as a string
       :rtype: str
    """
    major = get_major_version()
    minor = get_minor_version()
    if major and minor:
        return "%s.%s" % (major, minor)
    elif major:
        return major
    elif minor:
        return minor
    return ""

@memoize(minutes=1)
def get_release():
    """
       Returns the release of the system.

       :return: the system relase as a string
       :rtype: str
    """
    try:
        release = glob.glob('/etc/release*.custom')
        if not release:
            release = glob.glob('/etc/release*.vendor')
        if not release:
            release = ['/etc/release']
        release = release[0]
        f = open(release, 'r')
        try:
            return f.read().strip()
        finally:
            f.close()
    except:
        return ""

@memoize(minutes=10)
def get_product():
    """
       Returns the product name.

       :return: the product as a string
       :rtype: str
    """
    try:
        return DataSource('product').settings.get("PRODUCT_NAME", "")
    except:
        return ""

@memoize(minutes=10)
def get_documentation_type():
    """
       Returns the documentation type.

       :return: the documentation type as a string
       :rtype: str
    """
    try:
        return DataSource('product').get('settings', {}).get("DOCUMENTATION_TYPE", "")
    except:
        return ""

@memoize(minutes=10)
def get_model():
    """
       Returns the model name.

       :return: the model as a string
       :rtype: str
    """
    try:
        return DataSource('product').settings.get("PRODUCT_ID", "")
    except:
        return ""

@memoize(minutes=10)
def is_community():
    """
       Returns True, if the firewall is a community version

       :return: False for Enterpise version, True otherwise
       :rtype: boolean
    """
    try:
        if get_brand() != "Endian":
            return False
        else:
            return DataSource('product').settings.ENTERPRISE != 'yes'
    except:
        return True

@memoize(minutes=10)
def get_brand_settings():
    """
       Returns the brand settings.

       :return: the brand SettingsFile or None
       :rtype: SettingsFile
    """
    try:
        return SettingsFile(BRAND_SETTINGS)
    except:
        return None

@memoize(minutes=10)
def get_brand():
    """
       Returns the brand name.

       :return: the brand name
       :rtype: str
    """
    try:
        return get_brand_settings().BRAND
    except:
        return "Endian"

@memoize(minutes=10)
def get_company():
    """
       Returns the company name.

       :return: the company name
       :rtype: str
    """
    try:
        return get_brand_settings().COMPANY
    except:
        return "Endian"

@memoize(hours=24)
def get_network_brand():
    """
       Returns the network brand.

       :return: the network brand
       :rtype: str
    """
    try:
        return get_brand_settings().EN_BRAND
    except:
        return "Network"

@memoize(hours=24)
def get_network_name():
    """
       Returns the network full brand name.

       :return: the network full brand name
       :rtype: str
    """
    return "%s %s" % (get_brand(), get_network_brand())

@memoize(hours=24*10)
def get_kernel_version():
    """
       Returns the kernel version.

       :return: the kernel version
       :rtype: str
    """
    try:
        f = open('/proc/version','r')
        try:
            return f.read().strip().split(" ")[2]
        finally:
            f.close()
    except:
        return ""

@memoize(minutes=10)
def get_help_url():
    """
       Returns the help url.

       :return: the help url as a string
       :rtype: str
    """
    info = {
        "VERSION" : get_version(),
        "MAJOR_VERSION" : get_major_version(),
        "DOCUMENTATION_TYPE": get_documentation_type(),
        "LANGUAGE" : get_language()
    }
    docs_url = DataSource('product').get('settings', {}).get("DOCUMENTATION_URL", "")
    if not docs_url:
        try:
            docs_url = get_brand_settings().DOCS_URL.strip("'")
        except:
            docs_url = ""
    if not docs_url:
        docs_url = "http://docs.endian.com/%(MAJOR_VERSION)s/%(LANGUAGE)s/"
    return docs_url % info

def get_architecture():
    """
       Returns the machine type.

       :return: machine type, e.g. 'i686', 'armv5tel'
       :rtype: str
    """
    return platform.machine()

@memoize(hours=24*10)
def get_cpu_count():
    """
       Returns the count of cpus (reading /proc/cpuinfo).

       :return: The cpu count.
       :rtype: int
    """
    try:
        ret = 0
        try:
            f = open('/proc/cpuinfo')
            for line in f:
                if line.lower().startswith('processor'): # "processor" on x86, "Processor" on arm :-)
                    ret += 1
        finally:
            f.close()
        return ret
    except:
        return 0

def is_installed(module):
    """
       Check if a module is installed

       :param module: module name, e.g. 'access'
       :type module: str
       :return: True if the module is installed
       :rtype: bool
    """
    try:
        __import__('endian.%s' % module)
        return True
    except ImportError:
        return False

if __name__ == '__main__':
    print "Version:", get_version()
    print "Release:", get_release()
    print "Product:", get_product()
    print "Model:", get_model()
    print "Community:", is_community()
    print "Brand:", get_brand()
    print "Company:", get_company()
    print "Network Brand:", get_network_name()
    print "Help URL:", get_help_url()
    print "Kernel version:", get_kernel_version()
    print "Architecture:", get_architecture()
    print "CPUs #:", get_cpu_count()
