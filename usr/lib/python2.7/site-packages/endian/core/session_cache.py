#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import time
import threading
import cherrypy

_application_cache = dict()

class SessionCachedObject(object):
    """
    Object stored in the cache
    """

    default_timeout = 60

    def __init__(self, key, func, *args, **kwargs):
        """
            Return the class properties

            :param key: session object key
            :type key: string
            :param func: function
            :type func: function
            :param args: args
            :type args: args
            :param kwargs: kwargs
            :type kwargs: kwargs
            :param timeout: function's timeout in seconds
            :type timeout: int
        """
        if 'timeout' in kwargs:
            self.timeout = kwargs['timeout']
            del kwargs['timeout']
        else:
            self.timeout = self.default_timeout
        self.expiry = 0
        self.key = key
        self.func = func
        self.args = args
        self.kwargs = kwargs
        self.data = None
        self.lock = threading.Lock()

    def __call__(self):
        try:
            self.lock.acquire()
            if (self.data == None) or (time.time() > self.expiry):
                #if self.expiry != 0:
                #    print "-+-+-+- SessionCachedObject " + self.key + " expired -+-+-+- " + " " +  str(time.time()) + ">" + str(self.expiry)
                #else:
                #    print "-+-+-+- SessionCachedObject " + self.key + " first call -+-+-+-"
                self.data = self.func(*self.args, **self.kwargs)
                self.expiry = time.time() + self.timeout
        finally:
            self.lock.release()
        return self.data

    @staticmethod
    def _new_instance(key, func, *args, **kwargs):
        return SessionCachedObject(key, func, *args, **kwargs)

    @staticmethod
    def get_instance(key, func, application=False, *args, **kwargs):
        """
            Return a SessionCachedObject instance from the session.
            If the instance is not present, the method creates a new instance

            :param key: object key
            :type key: string
            :param func: function
            :type func: function
            :param application: if true use application-level cache, else session-level cache
            :type application: boolean
            :param args: function args
            :type args: args
            :param kwargs: function kwargs
            :type kwargs: kwargs
            :param timeout: function's timeout in seconds
            :type timeout: int
        """
        #print "-+-+-+- SessionCachedObject.get_instance " + key + " application=" + str(application)
        if application: # application-level
            result = _application_cache.get(key)
            if result == None:
                result = SessionCachedObject._new_instance(key, func, *args, **kwargs)
                _application_cache[key] = result
            return result
        else: # session-level cache
            try:
                #cherrypy.session.acquire_lock()
                result = cherrypy.session.get(key, None)
                if result == None:
                    result = SessionCachedObject._new_instance(key, func, *args, **kwargs)
                cherrypy.session[key] = result
            except AttributeError:
                result = SessionCachedObject._new_instance(key, func, *args, **kwargs)
            return result

def session_cached_function(key, func, application=False, *args, **kwargs):
    return lambda : SessionCachedObject.get_instance(key, func, application, *args, **kwargs).__call__()

def session_cached_property(key, func, application=False, *args, **kwargs):
    return property(lambda caller: SessionCachedObject.get_instance(key, func, application, caller).__call__())

def session_cache_delete():
    """
    Remove all the elements stored in the current user's cache
    """
    for key in list(cherrypy.session.keys()):
        try:
            value = cherrypy.session[key]
            if isinstance(value, SessionCachedObject):
                value.expiry = 0
                value.data = None
                cherrypy.session[key] = None
        except:
            pass

__all__ = ['session_cached_function', 'session_cached_property', 'session_cache_delete']
