#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Raphael Vallazza <raphael@endian.com>"
__date__ = "2009-04-21"

"""
Module that implements a powerful "system" and "popen" compatible execution function
"""

from endian.core.logger import debug, error
from subprocess import Popen, PIPE, STDOUT
import shlex
import os

CMDLOG=None

class Process(object):
    """
    XXX: doc
    This is a telnetlib compatible subprocess module
    """
    def __init__(self, args, bufsize=4096, shell=True,
                 cwd=None, env=None, cmdlog=None):
        self.args = args
        self.bufsize = bufsize
        self.shell = shell
        self.cwd = cwd
        self.env = env
        self.cmdlog = cmdlog
        self.process = None
        self.pid = None
        self.returncode = None
        self.stdin = None
        self.stdout = None
        self.active = False

        self.open()

    def open(self):
        if self.active:
            return
        self.msg("Call %s" % self.args)
        self.process = Popen(self.args, shell=self.shell, bufsize=self.bufsize,
                             stderr=STDOUT, stdout=PIPE, stdin=PIPE,
                             close_fds=True, cwd=self.cwd, env=self.env)
        self.pid = self.process.pid
        self.active = True

    def msg(self, msg):
        if self.cmdlog:
            self.cmdlog.write(msg)
            self.cmdlog.write("\n")
            self.cmdlog.flush()
        debug(msg)

    def write(self, buffer):
        self.msg(">>> %s"%buffer)
        self.process.stdin.write(buffer)

    def close(self, force=False, kill=False):
        if not self.active:
            return
        self.msg("Close %s" % self.args)
        if not self.process:
            return None
        self.process.stdin.close()
        self.process.stdout.close()
        if force:
            if kill:
                self.process.kill()
            else:
                self.process.terminate()

        # XXX: do the wait with this:
        # http://stackoverflow.com/questions/282176/waitpid-equivalent-with-timeout
        self.returncode = self.process.wait()
        self.active = False
        return self.returncode

    def readline(self, timeout=None):
#        if timeout is not None:
#            time_start = time()
#        while 1:
#            if timeout is not None:
#                elapsed = time() - time_start
#                if elapsed >= timeout:
#                    break
#                r,w,x = select.select([self.process.stdout.fileno(),
#                                       self.process.stderr.fileno()],
#                                      [], [], timeout-elapsed)
#                if not r:
#                    break
#

        line = self.process.stdout.readline()
        if line != '':
            self.msg("<<< %s"%line[:-1])
        return line

    def expect(self, list, timeout=None):
        re = None
        list = list[:]
        indices = range(len(list))
        for i in indices:
            if not hasattr(list[i], "search"):
                if not re: import re
                list[i] = re.compile(list[i])
        buffer = []
        while True:
            line = self.readline(timeout)
            if line == '':
                break
            buffer.append(line)
            for i in indices:
                m = list[i].search(line)
                if m:
                    m.end()
                    return (i, m, buffer)
        return (-1, None, buffer)

    def __del__(self):
        if self.process:
            self.close(force=True, kill=True)

import telnetlib

class LoggingTelnet(telnetlib.Telnet):
    def __init__(self, host=None, port=0, cmdlog=None):
        self.cmdlog = cmdlog
        telnetlib.Telnet.__init__(self, host, port)

    def msg(self, msg, *args):
        data = msg
        if args:
            data = msg % args
        txt = "%s:%d: %s" % (self.host, self.port, data)
        if self.cmdlog:
            self.cmdlog.write(data)
            self.cmdlog.write("\n")
            self.cmdlog.flush()
        debug(txt)

    def expect(self, list, timeout=None):
        (i, m, t) = telnetlib.Telnet.expect(self, list, timeout)
        t = map(lambda x: "%s\n"%x, t.split("\n"))
        t[-1] = t[-1][:-1]
        return (i, m, t)

def Expect(to, cmdlog=None):
    tok = to.split(':')
    if tok[0].find(' ') == -1 and len(tok) > 1:
        host = tok[0]
        port = int(tok[1])
        debug("Connect to host %s port %s" % (host, port))
        return LoggingTelnet(host, port, cmdlog)
    return Process(to, cmdlog=cmdlog)

class Runner(object):

    def __init__(self):
        self.stdout = ""
        self.stderr = ""
        self.returncode = -1
        self.pid = -1
        self.cmd = None

    def run(self, cmd, failOk=False, shell=True, suppress_output=False):
        print cmd
        self.cmd = cmd
        self.pid = -1
        self.returncode = -1
        self.stderr = ""
        self.stdout = ""
        try:
            if not shell:
                popen_args = shlex.split(cmd)
            else:
                popen_args = cmd

            if suppress_output:
                null_dev = open(os.devnull, 'w')
                p = Popen(popen_args, shell=shell,
                          stdout=null_dev, stderr=null_dev, close_fds=True)
            else:
                p = Popen(popen_args, shell=shell, bufsize=4096,
                          stderr=PIPE, stdout=PIPE, close_fds=True)

            p.wait()
            if p.stdout:
                self.stdout = p.stdout.read()
                p.stdout.close()
            if p.stderr:
                self.stderr = p.stderr.read()
                p.stderr.close()
            self.returncode = p.returncode
            self.pid = p.pid
        except Exception, e:
            error("Could not run %s: %s" % (self.cmd, e))

        debug("RUNNING [%s]" % cmd)
        if self.stdout:
            debug("STDOUT [%s]\n%s" % (cmd, self.stdout.strip()))
        if self.stderr:
            debug("STDERR [%s]\n%s" % (cmd, self.stderr.strip()))
        if self.returncode != 0 and failOk == False:
            error("RETURNCODE [%s] %s" % (cmd, self.returncode))

        if CMDLOG:
            CMDLOG.write("%s\n" % cmd)
            CMDLOG.flush()
        return self.returncode


    def __call__(self, cmd, failOk=False, shell=True, suppress_output=False):
        """
        Act as a function
        """
        self.run(cmd, failOk=failOk, shell=shell, suppress_output=suppress_output)
        return self

    def __cmp__(self, a):
        """
        On comparison return the exit code, example:
        Runner("mycommand") == 0
        """
        return cmp(a, self.returncode)

    def __repr__(self):
        return "<Runner: %s [%s]\n%s\n>" % (self.cmd, self.returncode, self.stdout.strip())

    def __str__(self):
        return self.stdout.strip()

    def getOutput(self):
        return self.stdout + self.stderr

    def read(self):
        """
        For popen compatibility
        """
        return self.stdout

    def readlines(self):
        """
        For popen compatibility
        """
        return map(lambda l: l+"\n", self.stdout.strip().split("\n"))

    xreadlines = readlines

    def close(self):
        """
        For popen compatibility
        """
        return self.returncode

run = Runner()
system = run
popen = system

