#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Raphael Vallazza <raphael@endian.com>"
__date__ = "2009-05-25"

"""
Module that implements a genric event handling system
"""

from endian.core.logger import debug, info, error
from threading import Thread, Lock

class EventRunner(Thread):

    def __init__(self):
        super(EventRunner, self).__init__()
        self.lock = Lock()
        self.event = None
        self.args = None

    def start(self, args):
        self.lock.acquire()
        self.args = args
        self.lock.release()
        super(EventRunner, self).start()

    def run(self):
        self.lock.acquire()
        functions = self.functions

        functions = sorted(functions, lambda x, y: x[0]-y[0])

        for function in map(lambda x: x[1], functions):
            debug("Triggering function '%s' of Event: %s" % (function.__name__, self.event))
            try:
                if self.args:
                    function(self.args)
                else:
                    function()
            except Exception:
                error("Error executing function '%s' of event '%s'" % (function.__name__, self.event))
        self.lock.release()

class EventRegistry(object):

    def __init__(self):
        self.registry = dict()

    def register(self, event, description):
        """
        Register a new event type that can be used for subscribing functions
        to trigger
        """
        if not self.registry.has_key(event):
            runner = EventRunner()
            runner.event = event
            runner.functions = []
            event_class = dict(description=description, functions=runner.functions, runner=runner)
            self.registry[event] = event_class
            return True
        return False

    def subscribe(self, event, function, priority=0):
        """
        Subscribe a function that will be called on event trigger.

        The priority can be used to influence the order in which the functions
        of an event are called. The default priority "0" means that a
        function will be called as the first, the functions will be ordered
        by the priority and name before they're called.
        """
        if not self.registry.has_key(event):
            raise Exception("Could not subscribe to Unknown event: %s" % event)
        self.registry[event]["functions"].append((priority, function))
        return True

    def trigger(self, event, args=None, detach=False):
        """
        The trigger method is used to fire a specific event by calling all
        the relate functions.

        If detach is set to True the functions will be triggered in backgrund
        using an own thread.
        """
        if not self.registry.has_key(event):
            raise Exception("Could not trigger to Unknown event: %s" % event)

        info("Triggering Event: %s" % self.registry[event].get("description", event))
        debug("Trigger Args: %s" % args)
        runner = self.registry[event]["runner"]

        runner.start(args)
        if not detach:
            runner.join()
        return True


    def getRegistry(self):
        return self.registry

# define global functions
REGISTRY = EventRegistry()
registerEvent = REGISTRY.register
subscribeEvent = REGISTRY.subscribe
triggerEvent = REGISTRY.trigger

# register system events
registerEvent("system.startup", "System Startup")
registerEvent("system.shutdown", "System Shutdown")

