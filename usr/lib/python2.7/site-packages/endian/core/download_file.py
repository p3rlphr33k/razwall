#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import urllib2
import base64
from sys import version
from endian.core.version import get_release

__all__ = [
    'get_http_file',
    'download_file',
    'download_file_to'
]


def get_http_file(url, webuser=None, webpass=None, proxy_settings=None, get_method=None, useragent=False):
    """
    Retrieve a http file.

    The function will take care of eventual passed
    authentication parameters(webuser, webpass) or
    a passed upstream proxy setting.

    :param url: The requested url.
    :type url: String
    :param webuser: The username of a
     http authentication.
    :type webuser: String or None
    :param webpass: The password of a
     http authentication.
    :type webpass: String or None
    :param proxy_settings: A dict with upstream
     proxy settings. Must contain: enabled, server and port.
     May contains: user and password.
    :type proxy_settings: dict
    :return: A file like object, see urllib2.
    :rtype: file like object
    """
    request = urllib2.Request(url)
    if get_method:
        request.get_method = lambda: get_method

    if useragent:
        endian_release = "%s - http://www.endian.com" % get_release()
        __version__ = version[:3]
        client_version = "Python-urllib/%s (%s)" % (__version__, endian_release)
        request.add_header('User-agent', client_version)

    if webuser:
        base64string = base64.encodestring('%s:%s' % (webuser, webpass))[:-1]
        request.add_header("Authorization", "Basic %s" % base64string)

    if proxy_settings is None or not proxy_settings.get("enabled") or proxy_settings["enabled"] == "off":
        html_file = urllib2.urlopen(request)
    else:
        proxy_handler = urllib2.ProxyHandler(
            {'http': 'http://%s:%s' % (proxy_settings["server"], proxy_settings["port"])})

        if "user" not in proxy_settings or proxy_settings["user"] == "":
            opener = urllib2.build_opener(proxy_handler)
        else:
            password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
            password_manager.add_password(
                None,
                # passing protocol causes error in
                # urlparse lib, strange thing...
                # error in urlparse of python 2.4
                '%s:%s' % (proxy_settings["server"], proxy_settings["port"]),
                proxy_settings["user"],
                proxy_settings["password"]
            )
            proxy_auth_handler = urllib2.ProxyBasicAuthHandler(password_manager)

            opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)

        html_file = opener.open(request)
    return html_file


def download_file(url, webuser=None, webpass=None, proxy_settings=None, useragent=False):
    """
    Generator to download a file from the internet.

    The yielded function will return each time a line.

    The generator will take care of eventual passed
    authentication parameters(webuser, webpass) or
    a passed upstream proxy setting.

    :param url: The requested url.
    :type url: String
    :param webuser: The username of a
     http authentication.
    :type webuser: String or None
    :param webpass: The password of a
     http authentication.
    :type webpass: String or None
    :param proxy_settings: A dict with upstream
     proxy settings. Must contain: enabled, server and port.
     May contains: user and password.
    :type proxy_settings: dict
    :return: The lines of the requested file.
    :rtype: String
    """
    html_file = get_http_file(url, webuser, webpass, proxy_settings, useragent)
    for line in html_file:
        yield(line)
    html_file.close()
    pass


def download_file_to(url, target, webuser=None, webpass=None, proxy_settings=None, useragent=False):
    """
    Download a url to a local file.

    The generator will take care of eventual passed
    authentication parameters(webuser, webpass) or
    a passed upstream proxy setting.

    :param url: The requested url.
    :type url: String
    :param target: The location on the fs
     to store the file.
    :type target: String
    :param webuser: The username of a
     http authentication.
    :type webuser: String or None
    :param webpass: The password of a
     http authentication.
    :type webpass: String or None
    :param proxy_settings: A dict with upstream
     proxy settings. Must contain: enabled, server and port.
     May contains: user and password.
    :type proxy_settings: dict
    :return: The lines of the requested file.
    :rtype: String
    """
    f = open(target, "w")
    try:
        for line in download_file(url, webuser, webpass, proxy_settings, useragent):
            f.write(line)
    finally:
        f.close()
    pass
