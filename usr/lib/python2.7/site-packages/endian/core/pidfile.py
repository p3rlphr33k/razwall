#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

"""
--- pidfile class ---
@author Peter Warasin <peter@endian.it>
@copyright (c) Endian 2007

handles pidfiles

"""

import os

class InvalidPid(Exception):
    '''Happens if pid could not read'''
class PidFileExists(Exception):
    '''Happens if pid file already exists'''
class AlreadyRunning(Exception):
    '''Another process is already running'''

class Pidfile:
    def __init__(self, pidfile):
        """
        Initializes a Pidfile instance with the supplied pidfile name 'pidfile'.
        """
        self.pidfile = pidfile
        self.mypid = os.getpid()
        self._pid = 0
    def getPid(self):
        """
        reads out the PID from the pidfile and returns it.

        Throws InvalidPid if the PID is no valid PID number.
        """
        if self._pid != 0:
            return self._pid
        pid = ""
        try:
            f = open(self.pidfile, "r")
            pid = f.readline()
            pid = pid.strip()
            f.close()
        except:
            raise InvalidPid("Could not read pidfile '%s'." %self.pidfile)
        if pid == "":
            raise InvalidPid("Pidfile '%s' has no acceptable pid." %self.pidfile)
        self._pid = int(pid)
        return self._pid
    pid = property(getPid)

    def isRunning(self):
        """
        Checks if the Process which created this PID file is running.
        """
        pid = 0
        try:
            pid = self.getPid()
        except InvalidPid:
            return False
        if os.path.exists("/proc/%s/"%pid):
            return True
        return False
    running = property(isRunning)

    def create(self, removestale=True):
        """
        Creates the pidfile and stores the actual PID.
        If the pidfile already exists PidFileExists will be raised
        if 'removestale' is False.
        If 'removestale' is True and there is a process with the PID of the
        pidfile, the exception AlreadyRunning will be raised.
        Otherwise the stale Pidfile will be overwritten with the actual PID.
        (If removestale is 'True', which is the default)

        """
        pid = 0
        try:
            pid = self.getPid()
        except InvalidPid:
            pass

        if pid != 0:
            if not removestale:
                raise PidFileExists("Pidfile '%s' does already exist" % self.pidfile)
            if self.running:
                raise AlreadyRunning("Process of pidfile '%s' does run with pid '%s'" % (self.pidfile, pid))

        f = open(self.pidfile, "w+")
        f.write(str(self.mypid))
        f.close()
        self._pid = 0

    def remove(self):
        """
        Removes the pidfile
        """
        if os.path.exists(self.pidfile):
            os.unlink(self.pidfile)

if __name__ == '__main__':
    Pidfile()

