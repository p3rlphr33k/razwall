#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import os

LED_STORAGE = "/sys/class/leds/led:orange:storage"
LED_STATUS = "/sys/class/leds/led:orange:power"
LED_POWER = "/sys/class/leds/led:green:power"

def write_led(led, content):
    if os.path.exists(led):
        try:
            f = open(led, 'w')
            try:
                f.write(content)
            finally:
                f.close()
        except Exception:
            pass

def led_power_on():
    write_led("%s/trigger" % LED_POWER, "default-on")

def led_storage_nand():
    write_led("%s/trigger" % LED_STORAGE, "nand-disk")

def led_storage_sd():
    write_led("%s/trigger" % LED_STORAGE, "mmc0")

def led_error():
    write_led("%s/trigger" % LED_STORAGE, "timer")
    write_led("%s/delay_off" % LED_STORAGE, "20")
    write_led("%s/delay_on" % LED_STORAGE, "20")
    write_led("%s/trigger" % LED_STATUS, "timer")
    write_led("%s/delay_off" % LED_STATUS, "20")
    write_led("%s/delay_on" % LED_STATUS, "20")

def led_blink(interval=200):
    write_led("%s/trigger" % LED_STATUS, "timer")
    write_led("%s/delay_off" % LED_STATUS, str(interval))
    write_led("%s/delay_on" % LED_STATUS, str(interval))

def led_boot():
    led_power_on()
    led_blink(200)
    led_storage_nand()

def led_ok():
    led_blink(1000)
    led_storage_sd()

def led_online():
    write_led("%s/trigger" % LED_STATUS, "default-on")


__all__ = [
    'LED_STORAGE',
    'LED_STATUS',
    'LED_POWER',
    'write_led',
    'led_storage_nand',
    'led_storage_sd',
    'led_error',
    'led_power_on',
    'led_blink',
    'led_boot',
    'led_ok',
    'led_online',
    ]
