#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Peter Warasin <peter@endian.com>"
__date__ = "2008-01-25"
"""
Collection of file operation helpers
"""

import fcntl
import os
import types
import glob

def openLocking(filename, mode="r", bufsize=0):
    lock = fcntl.LOCK_SH
    if mode != 'r':
        lock = fcntl.LOCK_EX
    f = open(filename, mode, bufsize)
    fcntl.flock(f, lock)
    return f


FILESEARCH=[
    '%(filename)s',
    '.%(shortname)src',
    os.path.join('%(shortname)s', '%(filename)s'),
    os.path.join('%(shortname)s', '.%(shortname)src'),
    ]

def walkSearchPath(filename, 
                   searchpath=['.', '~', '/etc'],
                   appendSearchPath=None,
                   altname=None,
                   firstFiles=[]):

    for fn in firstFiles:
        yield(fn)

    if appendSearchPath:
        if isinstance(appendSearchPath, types.ListType):
            searchpath.expand(appendSearchPath)
        else:
            searchpath.append(appendSearchPath)

    sp = []
    for i in searchpath:
        i = os.path.expanduser(i)
        i = os.path.expandvars(i)
        sp.extend(i.split(':'))

    filenames = [filename]
    if altname != None:
        if isinstance(altname, types.ListType):
            filenames.extend(altname)
        else:
            filenames.append(altname)

    for fname in filenames:
        fdict = {
            'filename': fname,
            'shortname': os.path.splitext(fname)[0]
            }

        for path in sp:
            for file in FILESEARCH:
                fp = os.path.join(path, file % fdict)
                yield(fp)



class NotFoundException(Exception):
    pass

def searchPath(filename, 
               searchpath=['.', '~', '/etc'],
               appendSearchPath=None,
               altname=None,
               firstFiles=[],
               method=os.path.exists):
    for i in walkSearchPath(filename,
                            searchpath,
                            appendSearchPath,
                            altname,
                            firstFiles):
        if method(i):
            return i
    raise NotFoundException("File %s not found in searchpath"%filename)


def filterGlob(pattern, filtersuffix, sort=False, reverse=False):
    """
    ... autofunction::: filterGlob
    glob.glob() generator with possibility to filter away files
    by file suffices

    :param pattern glob() pattern
    :type pattern string
    :param filtersuffix filter away files with these suffices
    :type filtersuffix list
    :param sort make the generator sorted
    :type sort bool
    :param reverse reverse sort if generator is sorted
    :type sort bool
    """
    globsort = glob.glob(pattern)
    if sort:
        globsort.sort(reverse=reverse)
    for item in globsort:
        ignore = False
        for suffix in filtersuffix:
            if item.endswith(suffix):
                ignore = True
                break
        if not ignore:
            yield(item)

if __name__ == '__main__':
    for i in walkSearchPath("test.conf", 
                            appendSearchPath="$PATH",
                            altname="blah.conf",
                            firstFiles=["/etc/passwd"]
                            ):
        print i

    print "____"

    print searchPath("test.conf", 
                     appendSearchPath="$PATH",
                     altname="blah.conf",
                     firstFiles=["/etc/passwd"]
                     )

