#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi import entities
from endian.validators import get_validator

__all__ = [
    "Settings",
    "UpdateScheduleOptions"
]


class Settings(entities.Entity):

    entities.using_options(namespace="dnsmasq.settings", type="settings", register_datasource=True)

    #Fields that appear in the Settings GUI

    DNSMASQ_TRANSPARENT_GREEN = entities.Field(
        entities.Boolean,
        default=False,
        label_text=_('Transparent on <span style="color: rgb(51, 153, 51);">GREEN</span>'),
    )

    DNSMASQ_TRANSPARENT_BLUE = entities.Field(
        entities.Boolean,
        default=False,
        label_text=_('Transparent on <span style="color: rgb(51, 51, 153);">BLUE</span>'),
    )

    DNSMASQ_TRANSPARENT_ORANGE = entities.Field(
        entities.Boolean,
        default=False,
        label_text=_('Transparent on <span style="color: rgb(255, 153, 51);">ORANGE</span>'),
    )

    DNSMASQ_TRANSPARENT_SOURCE_BYPASS= entities.Field(
        entities.UnicodeText,
        default="",
        label_text=_("Bypass from (subnet / IP address / MAC address)"),
        help_text=_("One subnet, IP address or MAC address per line is allowed."),
        validator=get_validator("Multiline")(
            get_validator("Any")(
                get_validator("IPAddress"),
                get_validator("MACAddress"),
                get_validator("NetworkAddress")
            )
        )
    )

    DNSMASQ_TRANSPARENT_DESTINATION_BYPASS = entities.Field(
        entities.UnicodeText,
        default="",
        label_text=_("Bypass to (subnet / IP address)"),
        help_text=_("One subnet or IP address per line is allowed."),
        validator=get_validator("Multiline")(
            get_validator("Any")(
                get_validator("IPAddress"),
                get_validator("NetworkAddress")
            )
        )
    )


    #Fields that appear in the Anti-spyware GUI


    DNSMASQ_ANTISPYWARE = entities.Field(
        entities.Boolean,
        default=False,
        label_text=_("Enabled"),
        expands=True
    )


    DNSMASQ_WHITELIST_DOMAINS = entities.Field(
        entities.UnicodeText,
        default="",
        label_text=("Whitelist domains"),
        help_text=_("One domain name per line is allowed."),
        validator=get_validator("Multiline")(
            get_validator("DomainNameRegex")
        )
    )

    DNSMASQ_BLACKLIST_DOMAINS = entities.Field(
        entities.UnicodeText,
        default="",
        label_text=("Blacklist domains"),
        help_text=_("One domain name per line is allowed."),
        validator=get_validator("Multiline")(
            get_validator("DomainNameRegex")
        )
    )

    DNSMASQ_UPDATE_SCHEDULE = entities.ManyToOne(
        target="dnsmasq:UpdateScheduleOptions",
        label_text=_("Spyware domain list update schedule")
    )



    #Fields that don't appear in either GUI

    DNSMASQ_BLACKHOLE_REDIRECT = entities.Field(
        entities.Unicode,
        hidden=True
    )

    DNSMASQ_BLACKHOLE_URL = entities.Field(
        entities.Unicode,
        hidden=True
    )

    DNSMASQ_BLACKHOLE_KEY = entities.Field(
        entities.Unicode,
        default="",
        hidden=True
    )


    CREDENTIALS = entities.Field(
        entities.Boolean,
        default=False,
        hidden=True
    )


class UpdateScheduleOptions(entities.Entity):

    entities.using_options(type="const")

    id = entities.Field(
        entities.Unicode,
        primary_key=True,
        nullable=False,
    )

    name = entities.Field(
        entities.Unicode,
        nullable=False
    )

    values = [
        {'id' : 'daily', 'name' : 'Daily'},
        {'id' : 'weekly', 'name' : 'Weekly'},
        {'id' : 'monthly', 'name' : 'Monthly'}
    ]
