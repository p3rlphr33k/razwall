#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.data import DataSource
from endian.emi import widgets, fieldset
from endian.emi.entities.fieldset import range_options

__all__ = [
    "get_new_cert_fields",
    "get_upload_cert_fields",
    "get_upload_cert_req_fields"
]

def get_new_cert_fields(toggle_name=None, label={}, fields=[], not_fields=[], required=[], expands=[], cert_types=[]):
    """
    use this function to get the fields needed to create a new certificate

    it is possible to overwrite the labels and also filter the filter the fields.
    the filter is nice if you will use other fields e.g. for the certificate name.

    if you want to toggle the container you need to pass the select box name as toggle_name and have a option with value="new_cert".

    :param toggle_name: name of select box field which will show this container if "new_cert" is selected
    :type toggle_name: string
    :param label: customize the field labels by adding <field_name>: <label string> into the dict
    :type label: dict
    :param fields: filter the field list by field name
    :type fields: list of strings
    :param not_fields: filter the field list by field name
    :type not_fields: list of strings
    :param required: set required value of the field list by field name
    :type required: list of strings
    :param expands: fields of the list will be expanded
    :type expands: list of strings
    :param cert_types: show this options in the select field
    :type cert_types: list of strings
    """
    items = []
    if (not fields or "new_cert_name" in fields) and (not not_fields or "new_cert_name" not in not_fields):
        items.append(widgets.TextField("new_cert_name",
            label_text=label.get("new_cert_name", _("Common name")),
            size=20,
            expands="new_cert_name" in expands and True or False,
            not_empty="new_cert_name" in required and True or True))
    if (not fields or "new_cert_email" in fields) and (not not_fields or "new_cert_email" not in not_fields):
        items.append(widgets.TextField("new_cert_email",
            label_text=label.get("new_cert_email", _("Email address")),
            size=20,
            expands="new_cert_email" in expands and True or False,
            not_empty="new_cert_email" in required and True or False))
    if (not fields or "new_cert_ou" in fields) and (not not_fields or "new_cert_ou" not in not_fields):
        items.append(widgets.TextField("new_cert_ou",
            label_text=label.get("new_cert_ou", _("Organizational unit name")),
            size=20,
            expands="new_cert_ou" in expands and True or False,
            not_empty="new_cert_ou" in required and True or False))
    if (not fields or "new_cert_organization" in fields) and (not not_fields or "new_cert_organization" not in not_fields):
        items.append(widgets.TextField("new_cert_organization",
            label_text=label.get("new_cert_organization", _("Organization name")),
            size=20,
            expands="new_cert_organization" in expands and True or False,
            not_empty="new_cert_organization" in required and True or False))
    if (not fields or "new_cert_city" in fields) and (not not_fields or "new_cert_city" not in not_fields):
        items.append(widgets.TextField("new_cert_city",
            label_text=label.get("new_cert_city", _("City")),
            size=20,
            expands="new_cert_city" in expands and True or False,
            not_empty="new_cert_city" in required and True or False))
    if (not fields or "new_cert_state" in fields) and (not not_fields or "new_cert_state" not in not_fields):
        items.append(widgets.TextField("new_cert_state",
            label_text=label.get("new_cert_state", _("State or province")),
            size=20,
            expands="new_cert_state" in expands and True or False,
            not_empty="new_cert_state" in required and True or False))
    if (not fields or "new_cert_country" in fields) and (not not_fields or "new_cert_country" not in not_fields):
        items.append(widgets.ChosenSingleSelectField("new_cert_country",
            label_text=label.get("new_cert_country", _("Country")),
            options=range_options(info=dict(
                target="core:Country"
            )),
            hover_help=False,
            expands="new_cert_country" in expands and True or False,
            not_empty="new_cert_country" in required and True or True))
    if (not fields or "new_cert_subjectaltname" in fields) and (not not_fields or "new_cert_subjectaltname" not in not_fields):
        items.append(widgets.TextField("new_cert_subjectaltname",
            label_text=_("Subject alt name (subjectAltName=email:*,URI:*,DNS:*,RID:*)"),
            size=20,
            expands="new_cert_subjectaltname" in expands and True or False))
    if (not fields or "new_cert_type" in fields) and (not not_fields or "new_cert_type" not in not_fields):
        items.append(widgets.SingleSelectField("new_cert_type",
            label_text=label.get("new_cert_type", _("Certificate type")),
            options=range_options(info=dict(
                add_empty_option=True,
                empty_option_label=_("Not specified"),
                target="ca:CertificateType",
                target_filter_key = "ID",
                target_filter_value = cert_types and "|".join(cert_types) or "client|server"
            )),
            hover_help=False,
            expands="new_cert_type" in expands and True or False,
            not_empty="new_cert_type" in required and True or False))
    if (not fields or "new_cert_digest" in fields) and (not not_fields or "new_cert_digest" not in not_fields):
        items.append(widgets.SingleSelectField("new_cert_digest",
            label_text=label.get("new_cert_digest", _("Certificate digest algorithm")),
            options=range_options(info=dict(
                target="ca:CertificateDigest",
            )),
            hover_help=False,
            expands="new_cert_digest" in expands and True or False,
            not_empty="new_cert_digest" in required and True or False))
    if (not fields or "new_cert_password" in fields) and (not not_fields or "new_cert_password" not in not_fields):
        items.append(widgets.PasswordField("new_cert_password",
            label_text=_("PKCS12 file password"),
            size=20,
            not_empty=True))
    if (not fields or "new_cert_password_confirm" in fields) and (not not_fields or "new_cert_password_confirm" not in not_fields):
        items.append(widgets.PasswordField("new_cert_password_confirm",
            label_text=_("PKCS12 file password Confirmation"),
            size=20,
            not_empty=True))
    if (not fields or "new_cert_days" in fields) and (not not_fields or "new_cert_days" not in not_fields):
        items.append(widgets.TextField("new_cert_days",
            label_text=_("Validity (days)"),
            size=10,
            expands="new_cert_days" in expands and True or False,
            not_empty="new_cert_days" in required and True or False))
    # Generate a new certificate
    return fieldset.FieldsGroup(
        id="cert_options",
        info_text=_("Generate a new certificate"),
        toggle_name=toggle_name,
        toggle_option="new_cert",
        fields=items
    )

def get_upload_cert_fields(toggle_name=None, pkcs12_only=False):
    """
    use this function to get the fields needed to upload a certificate

    if you want to toggle the container you need to pass the select box name as toggle_name and have a option with value="upload_cert".

    :param toggle_name: name of select box field which will show this container if "upload_cert" is selected
    :type toggle_name: string
    :param pkcs12_only: if true, allow only the upload of PKCS12 (warning: only the label is changed)
    :type pkcs12_only: boolean
    """
    # Disable all the upload fields if demo mode is enabled
    try:
        ds = DataSource()
        disabled = ds.demo.settings.demo_enabled == 'on'
    except:
        disabled = False
    # Upload a certificate
    return fieldset.FieldsGroup(
        id="upload_cert_options",
        info_text=_("Upload a certificate"),
        toggle_name=toggle_name,
        toggle_option="upload_cert",
        fields=[
            widgets.FileField("upload_cert",
                label_text=pkcs12_only and _("Certificate (PKCS12)") or _("Certificate (PKCS12/PEM)"),
                disabled=disabled,
                not_empty=True),
            widgets.PasswordField("upload_cert_password",
                label_text=_("PKCS12 file password"),
                size=20)
        ]
    )

def get_upload_cert_req_fields(toggle_name=None):
    """
    use this function to get the fields needed to upload a certificate request

    if you want to toggle the container you need to pass the select box name as toggle_name and have a option with value="upload_cert_req".

    :param toggle_name: name of select box field which will show this container if "upload_cert_req" is selected
    :type toggle_name: string
    """
    # Disable all the upload fields if demo mode is enabled
    try:
        ds = DataSource()
        disabled = ds.demo.settings.demo_enabled == 'on'
    except:
        disabled = False
    # Upload a certificate request
    return fieldset.FieldsGroup(
        id="upload_cert_req_options",
        info_text=_("Upload a certifcate request"),
        toggle_name=toggle_name,
        toggle_option="upload_cert_req",
        fields=[
            widgets.FileField("upload_cert_req",
                label_text=_("Certificate Signing Request (CSR)"),
                disabled=disabled,
                not_empty=True),
            widgets.TextField("upload_cert_req_days",
                label_text=_("Validity (days)"),
                size=10)
        ]
    )
