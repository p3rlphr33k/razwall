#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi import widgets, fieldset
from endian.emi.entities.fieldset import range_options
from endian.validators.core import FieldsMatch

from endian.authentication.handlers.ca import CERT_STATUS_VALID
from endian.ca.schema import Certificate, CertificateAuthority, RevokedCertificate, CRL
from endian.ca.web.widgets.common import get_new_cert_fields, get_upload_cert_fields, get_upload_cert_req_fields
from endian.ca.web.widgets.validators import CertificateValidator

__all__ = [
    "CertificateGrid",
    "CertificateAuthorityGrid",
    "CreateCertificateSettings",
    "CreateCertificateAuthoritySettings",
    "RevokedCertificateGrid",
    "CertificateInfoWidget",
    "CertificateDownloadField",
    "CertificateAuthorityDownloadField",
    "CRLGrid",
]

class InfoAction(widgets.Action):
    name = "info"
    image = "/images/info.png"
    title = _("View details")
    link = "info?ID=%(ID)s"

class DownloadPem(widgets.Action):
    name = "pem"
    image = "/images/download.png"
    title = _("Download certificate")
    link = "pem?ID=%(ID)s"

class DownloadP12(widgets.Action):
    name = "p12"
    image = "/images/download_encrypted.png"
    title = _("Download PKCS12 file")
    link = "p12?ID=%(ID)s"

    def condition(self, args):
        return args.has_p12

class DownloadCertificateRevokationList(widgets.Action):
    name = "crl"
    image = "/images/download.png"
    title = _("Download CRL file")
    link = "crl?ID=%(ID)s"

    def condition(self, args):
        return args.has_crl

class DownloadCrl(widgets.Action):
    name = "crl"
    image = "/images/download.png"
    title = _("Download CRL file")
    link = "crl?ID=%(ID)s"

class DeleteCertificateAuthority(widgets.Action):
    name = "delete"
    image = "/images/delete.png"
    title = _("Remove CA certificate")
    onClick = "if (! confirm('%s')) {return false};" % _("ATTENTION: By deleting CA certificate associated certificates are deleted as well!")

class DeleteCertificate(widgets.Action):
    name = "delete"
    image = "/images/delete.png"
    title = _("Delete certificate")
    onClick = "if (! confirm('%s')) {return false};" % _("Are you sure to delete the certificate?")

    def condition(self, args):
        return not args.issued_by_local_ca

class RevokeCertificate(widgets.Action):
    name = "delete"
    image = "/images/linknotok.png"
    title = _("Revoke the certificate")
    onClick = "if (! confirm('%s')) {return false};" % _("Are you sure to revoke the certificate?")

    def condition(self, args):
        return args.issued_by_local_ca and args.status == CERT_STATUS_VALID

class DeletePrivateKey(widgets.Action):
    name = "delete_private_key"
    image = "/images/delete_encrypted.png"
    title = _("Delete the private key")
    onClick = "if (! confirm('%s')) {return false};" % _("Are you sure to delete the private key?")

    def condition(self, args):
        return args.has_p12 or args.has_key

class CertificateGrid(widgets.KendoGrid):
    new_label = _("Add new certificate")
    sortable = True
    selectable = False

    columns = [
        widgets.Column(name="description", title=_("Name"), empty_value="", format_function=lambda x: (x and x.startswith('_.')) and '*.%s' % x[2:] or x),
        widgets.Column(name="subject", title=_("Subject"), empty_value=""),
        widgets.Column(name="ca_name", title=_("CA"), empty_value=""),
        widgets.Column(name="not_after", title=_("Expiration Date"), empty_value="",
            format_function=lambda v: v and v.strftime("%Y-%m-%d") or ''),
        widgets.ActionsColumn([InfoAction, DownloadPem, DownloadP12, DeletePrivateKey, DeleteCertificate, RevokeCertificate])
    ]

class CertificateAuthorityGrid(widgets.KendoGrid):
    new_label = _("Add new CA certificate")
    sortable = True
    selectable = False

    entity = CertificateAuthority

    columns = [
        widgets.Column(name="description", title=_("Name"), empty_value=""),
        widgets.Column(name="subject", title=_("Subject"), empty_value=""),
        widgets.Column(name="not_after", title=_("Expiration Date"), empty_value="",
            format_function=lambda v: v and v.strftime("%Y-%m-%d") or ''),
        widgets.ActionsColumn([InfoAction, DownloadPem, DeleteCertificateAuthority])
    ]

class RevokedCertificateGrid(widgets.KendoGrid):
    sortable = True
    selectable = False

    entity = RevokedCertificate

    columns = [
        widgets.Column(name="ID", title=_("Serial"), empty_value=""),
        widgets.Column(name="name", title=_("Subject"), empty_value=""),
        widgets.ActionsColumn([])
    ]

class CreateCertificateSettings(widgets.GridEditor):
    title = _("Add new certificate")
    save_text = _('Add')

    entity = Certificate

    children = fieldset.FieldsGroup(
        fields=[
            widgets.SingleSelectField("cert_option",
                label_text=_("Action"),
                options=range_options(info=dict(
                    target="ca:CertificateOption"
                )),
                hover_help=False),
            get_new_cert_fields(toggle_name="cert_option"),
            get_upload_cert_fields(toggle_name="cert_option"),
            get_upload_cert_req_fields(toggle_name="cert_option")
        ]
    )

    chained_validators = [
        CertificateValidator("cert_option"),
        FieldsMatch('new_cert_password', 'new_cert_password_confirm', # check if password and confirm password match
                    messages={'invalidNoMatch': _("Passwords do not match")})
    ]

class CreateCertificateAuthoritySettings(widgets.SettingsEditor):
    save_text = _('Create')
    children = get_new_cert_fields(
        toggle_name=None,
        label={"new_cert_name" : _("System fully qualified domain name or IP address")},
        fields=[
            "new_cert_name",
            "new_cert_email",
            "new_cert_ou",
            "new_cert_organization",
            "new_cert_city",
            "new_cert_state",
            "new_cert_country",
            "new_cert_subjectaltname",
            "new_cert_days",
            "new_cert_digest"
        ],
        required=[
            "new_cert_name",
            "new_cert_organization",
            "new_cert_country"
        ]
    )

class CertificateInfoWidget(widgets.Container):
    template = "endian.ca.web.templates.certificate_info"

class CertificateDownloadField(widgets.ReadonlyField):
    container_template = """<div style="margin-bottom: 10px; float: left;">%s</div>"""
    name_template = """<span style="font-weight: bold; margin-bottom: 4px; float: left;">%s</span>"""
    not_available_template = """<span style="float: left;">%s</span>"""
    link_template = """<div style="float: left;"><img src="%(image)s" height="14" width="14" />&nbsp;<a href="%(link)s?ID=%(value)s" target="_blank">%(text)s</a></div>"""
    join_template = """<div class="cb"></div>"""

    entity = Certificate

    check_validity = None

    show_name = None
    show_details = None
    show_pem = None
    show_pkcs12 = None

    not_available_title = None
    not_available_text = None
    not_valid_text = None
    details_text = None
    pem_text = None
    pkcs12_text = None

    details_link = None
    pem_link = None
    pkcs12_link = None

    details_image = None
    pem_image = None
    pkcs12_image = None

    def __init__(self,
            id,
            check_validity=True,
            show_name=True,
            show_details=True,
            show_pem=True,
            show_pkcs12=True,
            not_available_title="",
            not_available_text="",
            not_valid_text=_("Certificate is not valid"),
            details_text=_("View details"),
            pem_text=_("Download certificate"),
            pkcs12_text=_("Download PKCS12 file"),
            details_link="/manage/ca/certificate/info",
            pem_link="/manage/ca/certificate/pem",
            pkcs12_link="/manage/ca/certificate/p12",
            details_image="/images/info.png",
            pem_image="/images/download.png",
            pkcs12_image="/images/download_encrypted.png",
            *args, **vargs):
        if self.check_validity is None:
            self.check_validity = check_validity
        if self.show_name is None:
            self.show_name = show_name
        if self.show_details is None:
            self.show_details = show_details
        if self.show_pem is None:
            self.show_pem = show_pem
        if self.show_pkcs12 is None:
            self.show_pkcs12 = show_pkcs12
        if self.not_available_title is None:
            self.not_available_title = not_available_title
        if self.not_available_text is None:
            self.not_available_text = not_available_text
        if self.not_valid_text is None:
            self.not_valid_text = not_valid_text
        if self.details_text is None:
            self.details_text = details_text
        if self.pem_text is None:
            self.pem_text = pem_text
        if self.pkcs12_text is None:
            self.pkcs12_text = pkcs12_text
        if self.details_link is None:
            self.details_link = details_link
        if self.pem_link is None:
            self.pem_link = pem_link
        if self.pkcs12_link is None:
            self.pkcs12_link = pkcs12_link
        if self.details_image is None:
            self.details_image = details_image
        if self.pem_image is None:
            self.pem_image = pem_image
        if self.pkcs12_image is None:
            self.pkcs12_image = pkcs12_image
        return super(CertificateDownloadField, self).__init__(id, *args, **vargs)

    def format_function(self, value):
        values = []
        if value:
            cert = self.entity.get_by_id(value)
            if not cert:
                if self.show_name:
                    values.append(self.name_template % self.not_available_title)
                values.append(self.not_available_template % self.not_available_text)
                return self.container_template % self.join_template.join(values)
            if self.show_name:
                # format _.example.com as *.example.com
                t = cert.name or ''
                if t.startswith('_.'):
                    t = '*.' + t[2:]
                values.append(self.name_template % t)
            if self.check_validity and not cert.ca_id:
                values.append(self.not_available_template % self.not_valid_text)
                return self.container_template % self.join_template.join(values)
            if self.show_details:
                values.append(self.link_template % {
                    "text" : self.details_text,
                    "image" : self.details_image,
                    "link" : self.details_link,
                    "value": value
                })
            if self.show_pem and cert.has_pem:
                values.append(self.link_template % {
                    "text" : self.pem_text,
                    "image" : self.pem_image,
                    "link" : self.pem_link,
                    "value": value
                })
            if self.show_pkcs12 and cert.has_p12:
                values.append(self.link_template % {
                    "text" : self.pkcs12_text,
                    "image" : self.pkcs12_image,
                    "link" : self.pkcs12_link,
                    "value": value
                })
        else:
            if self.show_name:
                values.append(self.name_template % self.not_available_title)
            values.append(self.not_available_template % self.not_available_text)
        return self.container_template % self.join_template.join(values)

class CertificateAuthorityDownloadField(CertificateDownloadField):
    entity = CertificateAuthority

    def __init__(self,
            id,
            show_name=True,
            show_details=True,
            show_pem=True,
            not_available_title=_("CA certificate not available"),
            not_available_text="",
            not_valid_text=_("CA certificate is not valid"),
            details_text=_("View details"),
            pem_text=_("Download certificate"),
            pkcs12_text=_("Download PKCS12 file"),
            details_link="/manage/ca/certificate_authority/info",
            pem_link="/manage/ca/certificate_authority/pem",
            pkcs12_link="/manage/ca/certificate_authority/p12",
            details_image="/images/info.png",
            pem_image="/images/download.png",
            pkcs12_image="/images/download_encrypted.png",
            *args, **vargs):
        vargs['check_validity'] = False # how should we check it from the ROOT CA or external CA?
        vargs['pkcs_12'] = False # do not show pkcs12 for CA
        return super(CertificateAuthorityDownloadField, self).__init__(
            id,
            show_name=show_name,
            show_details=show_details,
            show_pem=show_pem,
            not_available_title=not_available_title,
            not_available_text=not_available_text,
            not_valid_text=not_valid_text,
            details_text=details_text,
            pem_text=pem_text,
            pkcs12_text=pkcs12_text,
            details_link=details_link,
            pem_link=pem_link,
            pkcs12_link=pkcs12_link,
            details_image=details_image,
            pem_image=pem_image,
            pkcs12_image=pkcs12_image,
            *args, **vargs)

class CRLGrid(widgets.KendoGrid):
    sortable = True
    selectable = False

    entity = CRL

    columns = [
        widgets.Column(name="name", title=_("Name"), empty_value=""),
        widgets.Column(name="issuer", title=_("Issuer"), empty_value=""),
        widgets.Column(name="last_update", title=_("Issue date"), empty_value="",
            format_function=lambda v: v and v.strftime("%Y-%m-%d") or ''),
        widgets.ActionsColumn([InfoAction, DownloadCrl])
    ]

