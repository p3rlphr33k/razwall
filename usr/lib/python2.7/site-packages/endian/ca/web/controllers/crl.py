#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.core import logger
from endian.emi import controllers
from endian.emi.framework import response

from endian.ca import commands
from endian.ca.common import is_demo, DEMO_TEXT
from endian.ca.schema import CRL
from endian.ca.web.widgets.ca import CRLGrid, CertificateInfoWidget

__all__ = [
    "CRLController",
]

class CRLController(controllers.GridController):
    entity = CRL

    gridWidget = CRLGrid

    do_store = False # we have a readonly storage
    do_delete = False # we have a readonly storage

    certificate_info_widget = CertificateInfoWidget()

    @controllers.expose(template="endian.ca.web.templates.crl")
    def index(self, **args):
        result = self.index_internal(**args)
        return result

    @controllers.expose(content_type="application/x-download")
    def crl(self, **args):
        """ Return the certificate revokation list file """
        try:
            response.headers["Content-Disposition"] = 'attachment; filename="%s"' % args['ID']
            return CRL.get_by_id(args['ID']).crl
        except:
            return ""

    @controllers.expose(template="endian.emi.templates.basecontroller")
    def info(self, **args):
        """ Return the CRL detailed info """
        result = { 'args': { 'data': '' },
                   'container': self.certificate_info_widget,
                   'controllername': 'grid'}
        try:
            crl = CRL.get_by_id(args['ID'])
            data = {
                'text': crl and crl.text or _('Could not read CRL'),
                'valid': None,
                'valid_output': "",
            }
            result['args']['data'] = data
        except Exception, ex:
            logger.error(str(ex), exc_info=True)
            result['error'] = _("Not found")
        return result

    def _upload_crl(self, **args):
        """ Upload CRL"""
        if is_demo():
            return { "error": DEMO_TEXT }

        try:
            upload_file = args.get('ca_file', None)
            data = upload_file is not None and upload_file.file.read() or None
            if not data:
                raise Exception(_("CRL is required"))
            result = commands.upload_crl(crl_data=data)
            if 'error' in result:
                raise Exception(result['error'])
        except Exception, ex:
            vargs = args.copy()
            vargs['error'] = hasattr(ex, 'message') and ex.message or str(ex)
            return vargs

        return { "info": _("Certificate revocation list uploaded") }

