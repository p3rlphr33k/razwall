#!/usr/bin/python
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2016 S.p.A. <info@endian.com>                              |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import re
import time
from endian.emi import entities
from endian.core.lazylist import LazyList

__all__ = [
    "Lease"
]

DHCP_LEASES = "/var/lib/dhcp/dhcpd.leases"

lease_re = re.compile(r"lease\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+")
state_re = re.compile(r"\s*binding state\s+(.*);")
mac_re = re.compile(r"\s*hardware ethernet\s+(.*);")
hostname_re = re.compile(r"\s*client-hostname\s+\"(.*)\";")
expire_re = re.compile(r"\s*ends\s+[0-9]\s+(.*);")


def get_leases():
    # Load the dynamic leases
    leases = {}
    last = None
    f = None
    try:
        f = open(DHCP_LEASES)
        for line in f.readlines():
            match = lease_re.match(line)
            if match:
                last = {}
                ip = match.group(1)
                last['address'] = ip
                leases[ip] = last
                continue
            if not last:
                continue
            match = state_re.match(line)
            if match:
                last['state'] = match.group(1)
                continue
            match = mac_re.match(line)
            if match:
                last['mac_address'] = match.group(1)
                continue
            match = hostname_re.match(line)
            if match:
                last['hostname'] = match.group(1)
                continue
            match = expire_re.match(line)
            if match:
                try:
                    t = time.strptime(match.group(1), "%Y/%m/%d %H:%M:%S")
                    elapsed = time.mktime(t)
                    if time.daylight:
                        utc = elapsed - time.altzone
                    else:
                        utc = elapsed - time.timezone
                    last['expire'] = time.localtime(utc)[0:6]
                    last['expire_human'] = "%04d-%02d-%02d %02d:%02d:%02d" % last['expire']
                except:
                    pass
                continue
    finally:
        if f is not None:
            f.close()
    return leases.values()
    # return sorted(sessions, cmp=lambda x,y: cmp(x['name'], y['name']))


class Lease(entities.Entity):
    entities.using_options(type='dynamic')

    ID = entities.Field(entities.Unicode, primary_key=True, hidden=True, autoincrement=True)
    state = entities.Field(entities.Unicode)  # free/active
    address = entities.Field(entities.Unicode)
    mac_address = entities.Field(entities.Unicode)
    hostname = entities.Field(entities.Unicode)
    expire = entities.Field(entities.Integer)
    expire_human = entities.Field(entities.Unicode)

    values = LazyList(get_leases)

    @classmethod
    def all(cls):
        return list(cls.storage().load())
