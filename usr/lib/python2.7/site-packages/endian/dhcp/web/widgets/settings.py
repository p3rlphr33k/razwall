#!/usr/bin/python
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2016 S.p.A. <info@endian.com>                              |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import iplib
from endian.core.i18n import _
from endian.data import DataSource
from endian.emi import widgets, fieldset
from endian.dhcp.schema.settings import DHCPServerSettings
from endian.validators.form import FormValidator
from endian.validators.core import Invalid

__all__ = [
    "DHCPServerSettingsEditor",
]


class SettingsFormValidator(FormValidator):
    """
    Validator for names - check the name and organization
    """

    def _(s): return s
    messages = {
        'both':           _("Fill both start and end addresses"),
        'smaller_end':    _("End address must be greater than start address"),
        'invalid_start':  _("Invalid start address (not in zone)"),
        'invalid_end':    _("Invalid end address (not in zone)"),
    }

    def _to_python(self, value_dict, state):
        es = DataSource().ethernet.settings
        for zone in ['GREEN', 'BLUE', 'ORANGE']:
            if not value_dict['ENABLE_%s' % zone]:
                continue
            start_addr = value_dict.get('START_ADDR_%s' % zone)
            end_addr = value_dict.get('END_ADDR_%s' % zone)
            if start_addr and not end_addr:
                error_dict = {
                    'END_ADDR_%s' % zone: self.message('both', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
            if end_addr and not start_addr:
                error_dict = {
                    'START_ADDR_%s' % zone: self.message('both', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)

            if start_addr and end_addr:
                # Check if the end address is greater than start address
                start_addr = iplib.IPv4Address(start_addr)
                end_addr = iplib.IPv4Address(end_addr)
                if end_addr <= start_addr:
                    error_dict = {
                        'END_ADDR_%s' % zone: self.message('smaller_end', state)
                    }
                    raise Invalid("", value_dict, state, error_dict=error_dict)
                if es.get('%s_IPS' % zone):
                    # Check if the start/end address are in the zone
                    if not [True for x in (es['%s_IPS' % zone] or '').split(',') if x and start_addr in iplib.CIDR(x)]:
                        error_dict = {
                            'START_ADDR_%s' % zone: self.message('invalid_start', state)
                        }
                        raise Invalid("", value_dict, state, error_dict=error_dict)
                    if not [True for x in (es['%s_IPS' % zone] or '').split(',') if x and end_addr in iplib.CIDR(x)]:
                        error_dict = {
                            'END_ADDR_%s' % zone: self.message('invalid_end', state)
                        }
                        raise Invalid("", value_dict, state, error_dict=error_dict)
        return value_dict


class DHCPServerSettingsEditor(widgets.SettingsEditor):
    columns = 1
    title = ""
    entity = DHCPServerSettings
    template = "endian.dhcp.web.templates.settings"

    css = widgets.SettingsEditor.css + [
        widgets.CSSLink(link="/toscawidgets/resources/endian.dhcp.web/static/css/settings.css")
    ]

    javascript = widgets.SettingsEditor.javascript + [
        widgets.JSLink(link="/toscawidgets/resources/endian.dhcp.web/static/js/settings.js")
    ]

    children = fieldset.FieldsGroup(
        fields=DHCPServerSettings.fields(fields=[
            "ENABLE_GREEN",
            fieldset.FieldsGroup(
                id="green_accordion",
                accordion=True,
                accordion_collapses=True,
                columns=1,
                toggle_name="ENABLE_GREEN",
                toggle_option="on",
                fields=[
                    fieldset.FieldsGroup(
                        id="green_settings_options",
                        title=_("Settings"),
                        columns=2,
                        fields=DHCPServerSettings.fields(fields=[
                            "START_ADDR_GREEN",
                            "END_ADDR_GREEN",
                            "ONLY_FIXEDLEASE_GREEN",
                            "DEFAULT_LEASE_TIME_GREEN",
                            "MAX_LEASE_TIME_GREEN",
                            "DOMAIN_NAME_GREEN",
                            "GATEWAY_GREEN",
                            "DNS1_GREEN",
                            "DNS2_GREEN",
                            "NTP1_GREEN",
                            "NTP2_GREEN",
                            "WIN1_GREEN",
                            "WIN2_GREEN",
                        ])
                    )
                ]),
            "ENABLE_ORANGE",
            fieldset.FieldsGroup(
                id="orange_accordion",
                accordion=True,
                accordion_collapses=True,
                columns=1,
                toggle_name="ENABLE_ORANGE",
                toggle_option="on",
                fields=[
                    fieldset.FieldsGroup(
                        id="orange_settings_options",
                        title=_("Settings"),
                        columns=2,
                        fields=DHCPServerSettings.fields(fields=[
                            "START_ADDR_ORANGE",
                            "END_ADDR_ORANGE",
                            "ONLY_FIXEDLEASE_ORANGE",
                            "DEFAULT_LEASE_TIME_ORANGE",
                            "MAX_LEASE_TIME_ORANGE",
                            "DOMAIN_NAME_ORANGE",
                            "GATEWAY_ORANGE",
                            "DNS1_ORANGE",
                            "DNS2_ORANGE",
                            "NTP1_ORANGE",
                            "NTP2_ORANGE",
                            "WIN1_ORANGE",
                            "WIN2_ORANGE",
                        ])
                    )
                ]),
            "ENABLE_BLUE",
            fieldset.FieldsGroup(
                id="blue_accordion",
                accordion=True,
                accordion_collapses=True,
                columns=1,
                toggle_name="ENABLE_BLUE",
                toggle_option="on",
                fields=[
                    fieldset.FieldsGroup(
                        id="blue_settings_options",
                        title=_("Settings"),
                        columns=2,
                        fields=DHCPServerSettings.fields(fields=[
                            "START_ADDR_BLUE",
                            "END_ADDR_BLUE",
                            "ONLY_FIXEDLEASE_BLUE",
                            "DEFAULT_LEASE_TIME_BLUE",
                            "MAX_LEASE_TIME_BLUE",
                            "DOMAIN_NAME_BLUE",
                            "GATEWAY_BLUE",
                            "DNS1_BLUE",
                            "DNS2_BLUE",
                            "NTP1_BLUE",
                            "NTP2_BLUE",
                            "WIN1_BLUE",
                            "WIN2_BLUE",
                        ])
                    )
                ]),
            "CUSTOM_GLOBAL",
            "FIX_ENABLED"

        ])
    )

    chained_validators = [
        SettingsFormValidator()
    ]

