#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.webshell.commons import required_rights

@required_rights("manage")
def show_authscopes(cmd, *args, **argv):
    """
    ... autofunction::: show_authscopes
    Display the authentication scopes\n
    The show authscopes command displays information about the authentication scopes.

    Format:

    show authscopes

    """
    from endian.authentication.auth_client import get_scopes
    scopes = get_scopes()
    context = argv['context']
    context.write("${ANSI_GREEN}Authentication Scopes of ${HOSTNAME} at ${TIME} on ${DATE} ${ANSI_RESET}")
    context.write("${ANSI_GREEN}Name         Providers${ANSI_RESET}")
    for scope in scopes:
        context.write("%-12s %s" % (scope.get('name',''),
                                    ",".join(scope.get('providers',[]))))

@required_rights("manage")
def show_authproviders(cmd, *args, **argv):
    """
    ... autofunction::: show_authproviders
    Display the authentication providers\n
    The show authproviders command displays information about the authentication providers.

    Format:

    show authproviders

    """
    from endian.authentication.auth_client import get_providers
    providers = get_providers()
    context = argv['context']
    context.write("${ANSI_GREEN}Authentication Providers of ${HOSTNAME} at ${TIME} on ${DATE} ${ANSI_RESET}")
    context.write("${ANSI_GREEN}Name         Enabled    Can Auth   Can Get    Can List   Type${ANSI_RESET}")
    for provider in providers:
        context.write("%-12s %-10s %-10s %-10s %-10s %s" % (provider.get('name',''),
                             provider.get('enabled', False) and 'Y' or 'N',
                             provider.get('can_authenticate', False) and 'Y' or 'N',
                             provider.get('can_get_user', False) and 'Y' or 'N',
                             provider.get('can_list_users', False) and 'Y' or 'N',
                             provider.get('provider_type', '')))

@required_rights("manage")
def show_accounts(cmd, scope=None, username=None, *args, **argv):
    """
    ... autofunction::: show_accounts
    Display the accounts of a scope\n
    The show accounts command displays information about the accounts for a given scope.

    Format:

    auth accounts SCOPE [USERNAME]

    Options:

    SCOPE       A scope name or a string starting with the prefix 'provider:'
                followed by the name of a provider
    USERNAME    Specifies the user about whom you want information.

    """
    from endian.authentication.auth_client import list_users, get_user
    context = argv['context']
    # Ask for scope
    if not scope:
        scope = context.prompt_and_read("Scope: ")
        if not scope:
            return
    if not username:
        users = list_users(scope, retrieve_attributes=['name','enabled','remark'])
        context.write("${ANSI_GREEN}Account for %s of ${HOSTNAME} at ${TIME} on ${DATE} ${ANSI_RESET}" % scope)
        context.write("${ANSI_GREEN}Username     Enabled  Remark${ANSI_RESET}")
        for user in users:
            context.write("%-12s %-8s %s" % (user.get('name',''),
                                 user.get('enabled', False) and 'Y' or 'N',
                                 user.get('remark', '') or ''))
        context.write("${ANSI_GREEN}%d accounts matching scope %s${ANSI_RESET}" % (len(users), scope))
    else:
        user = get_user(username, scope)
        for k,v in sorted(user.iteritems()):
            if not args or [True for arg in args if k.startswith(arg)]:
                if v is None:
                    v = ""
                elif isinstance(v, list):
                    v = ", ".join([str(x) for x in v])
                context.write("${ANSI_GREEN}%s${ANSI_RESET} = %s", k, v)


