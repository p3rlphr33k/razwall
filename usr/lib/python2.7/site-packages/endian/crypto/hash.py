#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2016-06-16"

import hashlib
import base64

__all__ = [
    'FORMAT_RAW',
    'FORMAT_HEX',
    'FORMAT_BASE64',
    'format_digest',
    'md5',
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512'
]

FORMAT_HEX = 'hex'
FORMAT_BASE64 = 'base64'
FORMAT_RAW = 'raw'
ALGORITHMS = ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512']

def format_digest(digest, fmt=FORMAT_HEX):
    """
    Format a digest

    :param digest: digest (raw)
    :type digest: str
    :param fmt: result format - hex (default), base64, raw
    :type fmt: str
    :return: the calculated hash
    :rtype: str
    """
    if fmt == FORMAT_RAW:
        return digest
    elif fmt == FORMAT_BASE64:
        return base64.urlsafe_b64encode(digest).rstrip('=')
    else:
        return digest.encode('hex')

def make_hash_funcion(algorithm):
    clazz = getattr(hashlib, algorithm)
    def function(data, fmt=FORMAT_HEX):
        """
        Calculate the hash of a string

        :param data: data
        :type data: str
        :param fmt: result format - hex (default), base64, raw
        :type fmt: str
        :return: the calculated hash
        :rtype: str
        """
        m = clazz()
        m.update(data)
        digest = m.digest()
        return format_digest(digest, fmt)
    return function

md5 = make_hash_funcion('md5')
sha1 = make_hash_funcion('sha1')
sha224 = make_hash_funcion('sha224')
sha256 = make_hash_funcion('sha256')
sha384 = make_hash_funcion('sha384')
sha512 = make_hash_funcion('sha512')

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 3:
        print 'usage: %s <ALGORITHM> <DATA> [FORMAT]' % sys.argv[0]
    else:
        algorithm = sys.argv[1]
        if algorithm not in ALGORITHMS:
            print 'invalid hash algorithm (valid algorithms are: %s)' % ','.join(ALGORITHMS)
            sys.exit(1)
        print make_hash_funcion(algorithm)(sys.argv[2], fmt=len(sys.argv) > 3 and sys.argv[3] or FORMAT_HEX)

