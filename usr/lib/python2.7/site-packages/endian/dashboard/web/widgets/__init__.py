#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi.widgets import PluginSort, DataGrid, Column, CheckBoxColumn, ActionsColumn, HiddenColumn
from tw.api import CSSLink
from endian.core import logger
from endian.dashboard.schema import DashBoardConfig, DEFAULT_CONFIGURATION
from hardwareinformationplugin import HardwareInformationPlugin
from networkinformationplugin import NetworkInformationPlugin
from serviceinformationplugin import ServiceInformationPlugin
from systeminformationplugin import SystemInformationPlugin
from uplinkinformationplugin import UpLinkInformationPlugin
from jobsinformationplugin import JobsInformationPlugin
from signaturesinformationplugin import SignaturesInformationPlugin

fieldsdict = DashBoardConfig.fieldsDict()

PLUGINS = {
    HardwareInformationPlugin.__name__: HardwareInformationPlugin,
    NetworkInformationPlugin.__name__: NetworkInformationPlugin,
    ServiceInformationPlugin.__name__: ServiceInformationPlugin,
    SystemInformationPlugin.__name__: SystemInformationPlugin,
    UpLinkInformationPlugin.__name__: UpLinkInformationPlugin,
    JobsInformationPlugin.__name__: JobsInformationPlugin,
    SignaturesInformationPlugin.__name__: SignaturesInformationPlugin
}

class DashBoardPlugins(PluginSort):
    commandName = "dashboard"

    css = PluginSort.css + [
        CSSLink(link='/toscawidgets/resources/endian.dashboard.web/static/css/dashboardcontainer.css')
    ]

    plugins = PLUGINS

    entity = DashBoardConfig

    def getPlugins(self):
        data = {}
        storage = self.entity.storage()
        if storage:
            data = storage.load() or []
        current_plugins = [x.get('name') for x in data]
        max_row_on_col0 = -1
        max_row_on_col1 = -1
        try:
            max_row_on_col0 = max([int(x.get('row') or -1)
                                for x in data
                                if x.get('column') == '0'] or [-1])
            max_row_on_col1 = max([int(x.get('row') or -1)
                                for x in data
                                if x.get('column') == '1'] or [-1])
        except Exception, e:
            logger.warn('problem identifying the nr of rows: %s', e)
        modified = False
        for plugin in DEFAULT_CONFIGURATION:
            if plugin['name'] in current_plugins:
                continue
            row = 0
            if plugin.get('column') == 0:
                max_row_on_col0 += 1
                row = max_row_on_col0
            elif plugin.get('column') == 1:
                max_row_on_col1 += 1
                row = max_row_on_col1
            plugin['row'] = row
            modified = True
            storage.store(plugin.copy())
        if modified:
            # Sort the config file by column,row, otherwise
            # the editor will have problem enabling/disabling items.
            cols = {}
            for pl in storage.load():
                new_pl = pl.copy()
                if new_pl.get('enabled') in (None, 'off', False):
                    new_pl['enabled'] = False
                else:
                    new_pl['enabled'] = True
                if new_pl.get('closed') in ('on', True):
                    new_pl['closed'] = True
                else:
                    new_pl['closed'] = False
                cols.setdefault(pl.get('column'), []).append(new_pl)
            sorted_data = []
            for col_key in cols:
                row = []
                dsu = [(p.get('row'), p) for p in cols[col_key]]
                dsu.sort()
                cols[col_key] = [p[1] for p in dsu]
            for col_key in sorted(cols):
                sorted_data += cols[col_key]
            storage.store(sorted_data)
        return PluginSort.getPlugins(self)

def pluginName(value):
    plugin = PLUGINS.get(value)
    if not plugin:
        return value
    return plugin.pluginName

def pluginDescription(value):
    plugin = PLUGINS.get(value)
    if not plugin:
        return value
    return plugin.pluginDescription

class DashBoardSettings(DataGrid):
    title = _("Dashboard Settings")
    paginate = False
    search = False
    client_side_search = False
    sortable = True
    unsortable_cols = [2, 3, 4]
    sort_by_cols = [[0, "desc"]]

    entity = DashBoardConfig

    name = Column("name", format_function=pluginName)
    description = Column("description", title=_("Description"), coalesce=["name"], format_function=pluginDescription)
    interval = Column("interval", getter=fieldsdict['interval'])
    enabled = CheckBoxColumn(name="enabled", title=_("Enabled"), bool_values=True)
    actions = ActionsColumn(['save'])
    ID = HiddenColumn()

    def update_params(self, d):
        # Hide the JobsInformationPlugin
        DataGrid.update_params(self, d)
        values = d.get('value') or []
        values = [value for value in values if value.get('name') != 'JobsInformationPlugin']
        d['value'] = values

__all__ = [
    'DashBoardPlugins',
    'DashBoardSettings'
]
