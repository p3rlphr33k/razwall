#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.emi import controllers

__all__ = [
    "ScopeAndProviderController",
]

class ScopeAndProviderController(controllers.GridController):
    """
        Custom controller for Scope and Provider
        This controller has an "apply" button for reloading the scopes and providers
    """

    editorWidget = None # overwrite me
    gridWidget = None # overwrite me

    controllers = [] # overwrite me -> should contain the scope and provider controller object

    only_provider_type = None # overwrite me
    only_scope = None # overwrite me

    def onStore(self, id, data):
        if data and data.get('provider_type') == 'ldap':
            url = data.get('ldap_uri')
            if url and not (url.startswith('ldap://') or url.startswith('ldaps://')):
                data['ldap_uri'] = 'ldap://%s' % data['ldap_uri']
        return data

    def onStoreSuccess(self, id, data):
        self.storage.changed = True
        return data

    def onEnableSuccess(self, data):
        self.storage.changed = True
        return data

    def getData(self, args, data_options={}):
        from endian.authentication_frontend.schema import Provider
        data = super(ScopeAndProviderController,
                self).getData(args, data_options)
        if not self.only_provider_type and not self.only_scope:
            return data
        rdata = []
        for d in data:
            if 'provider_type' in d:
                # Check with provider object.
                if self.only_provider_type:
                    if d.get('provider_type') not in self.only_provider_type:
                        continue
            else:
                # Check with scope object.
                if self.only_scope and d.get('name') not in self.only_scope:
                    continue
                if self.only_provider_type:
                    found = False
                    providers = d.get('providers') or []
                    for p in providers:
                        pobj = Provider.get_by_name(p)
                        if pobj and pobj.provider_type in self.only_provider_type:
                            found = True
                            break
                    if not found and providers:
                        continue
            rdata.append(d)
        return rdata

    def _apply(self, **args):
        from endian.authentication.auth_client import reload_scopes_and_providers
        reload_scopes_and_providers()
        # Reset changed flag for all storages
        for controller in self.controllers:
            controller.storage.changed = False
        self.storage.changed = False
        return args
