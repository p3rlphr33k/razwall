#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.sha512crypt import sha512crypt
from endian.job.engine_control import send_cmd_to_engine

from endian.ca.schema.ca import Certificate
from endian.ca.web.controllers.common import BaseCertificateGridController
from endian.authentication_frontend.web.widgets.user import UserEditor, UserGrid

__all__ = [
    "UserController",
    "AllUserController"
]

DEFAULT_CERT_TYPE = "client"


class UserController(BaseCertificateGridController):
    """
    Custom controller for user.

    This controller encryptes the password with sha512 on store
    """

    editorWidget = None  # overwrite me
    gridWidget = None  # overwrite me

    cert_option_field = "vpncert_option"

    def onDelete(self, id, data):
        self.entity.sync_user(data['name'], _delete=True)
        return super(UserController, self).onDelete(id, data)

    def onLoad(self, id, data):
        """Triggered after loading."""
        # Remove password from the web-form
        data.verify = ""
        data.password = ""
        # try to find a cert with the common name of the user
        cert = Certificate.get_by_common_name(data.name)
        if len(cert) > 0:
            cert = cert[0]
            if DEFAULT_CERT_TYPE in cert.cert_type:  # cert must have the correct type
                data['VPNCERT_FILENAME'] = cert.ID
        if data.get("provider_name"):
            data['READONLY'] = True
        else:
            data['READONLY'] = False
        return data

    def onSubmit(self, id, data):
        # workaraound for problem with empty file input fields
        data['new_cert_name'] = data["name"]
        data['new_cert_email'] = data["user_email"]
        data['new_cert_ou'] = data["user_department"]
        data['new_cert_organization'] = data["user_organization"]
        data['new_cert_city'] = data["user_city"]
        data['new_cert_state'] = data["user_state"]
        data['new_cert_country'] = data["user_country"]
        data['new_cert_type'] = DEFAULT_CERT_TYPE  # use always this type
        if "VPNCERT_FILENAME" in data:
            del data["VPNCERT_FILENAME"]
        if "READONLY" in data:
            del data["READONLY"]
        return data

    def onStore(self, id, data):
        """Triggered before saving."""
        # The verify field is always removed
        if "verify" in data:
            del data["verify"]

        # If password is empty, don't change the password
        if "password" in data and (not data["password"] or not data["password"].strip()):
            del data["password"]
            if "password_type" in data:
                del data["password_type"]
        else:
            # Encode the password
            if isinstance(data["password"], unicode):
                data["password"] = data["password"].encode('utf8')
            data["password"] = sha512crypt(data["password"])
            data["password_type"] = "sha512crypt"

        # If the user is synced from a provider, don't update the groups
        if data.get("provider_name"):
            for key in ["user_memberof"]:
                try:
                    del data[key]
                except:
                    pass

        return super(UserController, self).onStore(id, data)

    def onStoreSuccess(self, id, data):
        self.entity.sync_user(data['name'], _renaming=data.get('_renaming'))
        send_cmd_to_engine('restart setvpnfw')
        return data

    def onDeleteSuccess(self, data):
        send_cmd_to_engine('restart setvpnfw')
        return data


class AllUserController(UserController):
    editorWidget = UserEditor
    gridWidget = UserGrid
