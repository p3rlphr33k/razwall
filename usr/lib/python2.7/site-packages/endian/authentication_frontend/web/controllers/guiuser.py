#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.job.engine_control import send_cmd_to_engine
from endian.emi import controllers
from endian.validators.boolean import to_bool
from endian.authentication_frontend.schema import GuiUser
from endian.authentication_frontend.web.widgets.guiuser import GuiUserEditor, GuiUserGrid, RESERVED_NAMES
from endian.authentication.utils.md5crypt import md5crypt
from endian.authentication import auth_client

__all__ = [
    "GuiUserController",
]


SCOPE='provider:apache'

class GuiUserController(controllers.GridController):

    editorWidget = GuiUserEditor
    gridWidget = GuiUserGrid

    def onDelete(self, id, data):
        """
        Triggered before deleting
        """
        if str(data.get('name')) in RESERVED_NAMES:
            raise Exception(_('Can\'t delete predefined user "%s"' %  data.get('name')))
        return super(GuiUserController, self).onDelete(id, data)

    def onLoad(self, id, data):
        """
        Triggered after loading
        """
        data.verify = ""
        data.password = ""
        return data

    def onStore(self, id, data):
        """
        Triggered before saving
        """

        # The verify field is always removed
        if "verify" in data:
            del data["verify"]

        if "password" in data:
            data["password"] = data["password"].strip()

        # If password is empty, don't change the password
        if not data.get("password", None):
            del data["password"]
        else:
            if not id:
                auth_client.create_user(username=data['name'], password=data['password'], scope=SCOPE)
            else:
                auth_client.update_user_value(username=data['name'], attribute='password', value=data['password'], scope=SCOPE)
            # Encode the password
            data["password"] = md5crypt(data["password"], magic="$apr1$")

        return super(GuiUserController, self).onStore(id, data)

    def onEnable(self, id, data):
        """
        This function is triggered before the 'enable/disable' action is executed on a single item.

        :param id: id of the data element
        :type id: str
        :param data: loaded data element
        :type data: dict

        :return: processed data element
        :rtype: dict
        """
        if str(data.get('name')) == 'admin' :
            raise Exception(_('Admin user cannot be disabled'))
        return data

    def onEnableSuccess(self, data):
        """
        This function is triggered after the 'enable/disable' action was
        finished successfully on a single item.

        :param id: id of the data element
        :type id: str
        :param data: stored data element
        :type data: dict

        :return: processed data element
        :rtype: dict
        """
        user = GuiUser.get_by_id(data.get('ID'))
        if user is not None:
            if to_bool(data['enabled']):
                auth_client.update_user_value(username=user.name, attribute='password', value=user.password, scope=SCOPE)
            else:
                auth_client.update_user_value(username=user.name, attribute='enabled', value=False, scope=SCOPE)
        return data

    def onStoreSuccess(self, id, data):
        """
        Triggered after data has been written to storage
        """
        send_cmd_to_engine('restart httpd --force --updategroups')
        return data

    def onDeleteSuccess(self, data):
        """
        This function is triggered after the 'delete' action was
        finished successfully on a single item.

        :param data: deleted data element
        :type data: dict

        :return: processed data element
        :rtype: dict
        """
        send_cmd_to_engine('restart httpd --force --updategroups')
        auth_client.delete_user(username=data['name'], scope=SCOPE)
        return data

