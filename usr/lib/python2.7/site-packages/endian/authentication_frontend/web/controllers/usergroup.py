#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.emi import controllers

from endian.authentication_frontend.web.widgets.usergroup import UserGroupEditor, UserGroupGrid

__all__ = [
    "UserGroupController",
    "AllUserGroupController"
]

class UserGroupController(controllers.GridController):
    editorWidget = None # overwrite me
    gridWidget = None # overwrite me

    def onLoad(self, id, data):
        """
        Triggered after loading
        """
        if data.get("provider_name"):
            data['READONLY'] = True
        else:
            data['READONLY'] = False
        return data

    def onSubmit(self, id, data):
        if data.has_key("READONLY"):
            del data["READONLY"]
        return data

    def onDelete(self, id, data):
        self.entity.sync_usergroup(data['name'], _delete=True)
        return super(UserGroupController, self).onDelete(id, data)

    def onStoreSuccess(self, id, data):
        self.entity.sync_usergroup(data['name'], _renaming=data.get('_renaming'))
        return super(UserGroupController, self).onStoreSuccess(id, data)

    def onStore(self, id, data):
        """
        Triggered before saving
        """
        # If the group is synced from a provider, don't update the members
        if data.get("provider_name"):
            for key in ["usergroup_member"]:
                try:
                    del data[key]
                except:
                    pass
        return super(UserGroupController, self).onStore(id, data)

class AllUserGroupController(UserGroupController):
    editorWidget=UserGroupEditor
    gridWidget=UserGroupGrid
