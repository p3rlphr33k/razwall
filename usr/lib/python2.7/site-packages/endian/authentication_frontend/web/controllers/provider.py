#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.authentication_frontend.schema.provider import Provider
from endian.authentication_frontend.web.widgets.provider import ProviderEditor, ProviderGrid
from endian.authentication_frontend.web.controllers.scope_provider import ScopeAndProviderController

__all__ = [
    "AllProviderController"
]

class AllProviderController(ScopeAndProviderController):
    title = _("Authentication server")

    editorWidget = ProviderEditor
    gridWidget = ProviderGrid

    only_provider_type = None

    def onDelete(self, id, data):
        self.entity.sync(data['name'], _delete=True)
        return super(AllProviderController, self).onDelete(id, data)

    def onStoreSuccess(self, id, data):
        self.entity.sync(data['name'])
        data = super(AllProviderController, self).onStoreSuccess(id, data)
        return data

    def _apply(self, **args):
        args = super(AllProviderController, self)._apply(**args)
        for provider in Provider.get_by_provider_type("ldap"):
            args = self._sync(providername=provider.name)
        return args

    def _sync(self, providername=None, **args):
        if not providername:
            id_ = args.get("ID")
            provider = self.storage.load(id_)
            providername = provider.get("name")
        from endian.authentication.auth_client import sync_groups, sync_users
        try:
            group_data = sync_groups("provider:%s" % providername)
            group_text = _("Added %s, enabled %s and disabled %s groups.") % (
                len(group_data.get("created", [])),
                len(group_data.get("enabled", [])),
                len(group_data.get("disabled", []))
            )
            user_data = sync_users("provider:%s" % providername)
            user_text = _("Added %s, enabled %s and disabled %s users.") % (
                len(user_data.get("created", [])),
                len(user_data.get("enabled", [])),
                len(user_data.get("disabled", []))
            )
            return {"info" : "%s<br />%s" % (group_text, user_text)}
        except Exception, ex:
            return {"error" : str(ex)}
