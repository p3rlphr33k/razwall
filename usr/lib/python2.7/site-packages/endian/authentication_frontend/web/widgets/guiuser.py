#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import re
from endian.core.i18n import _
from endian.emi import widgets, fieldset
from endian.validators.form import FormValidator
from endian.validators.core import FieldsMatch, Invalid
from endian.authentication_frontend.schema import GuiUser

__all__ = [
    "GuiUserEditor",
    "GuiUserGrid",
    "PasswordValidator",
    "NameFormValidator",
    "UniqueNameValidator",
]

RESERVED_NAMES = set(['admin', 'support', 'hotspot', 'satelliteadmin'])

class PasswordValidator(FormValidator):
    """
    Validator for checking empty/invalid password during user creation
    """

    messages = {
        'required': _("Password is required"),
        'too_short': _("Password must be at least 8 characters long"),
        'no_alphanum': _("Password must contain at least one non-alphanumeric character")
    }

    def _to_python(self, value_dict, state):
        # Use external provider, don't check the password
        use_external_password_provider = value_dict.get('use_external_password_provider', False)
        if use_external_password_provider:
            return value_dict

        try:
            id = int(value_dict["ID"])
        except:
            id = None
        if id == None and not value_dict.get("password", None): # New user without password
            error_dict = {
                'password': Invalid(self.message('required', state),
                                       value_dict,
                                       state)
            }
            raise Invalid(_('You must enter a password'),
                          value_dict, state,
                          error_dict=error_dict)
        return value_dict


class NameFormValidator(FormValidator):
    """
    Check that user names don't contain spaces.
    """
    messages = {
        'no_spaces': _("The name can't contain spaces."),
        'invalid': _("Only letters and numbers are accepted."),
        'reserved': _("This name is reserved."),
    }

    re_space = re.compile(r'\s')
    re_name = re.compile('^[a-zA-Z0-9]+$')

    def _to_python(self, value_dict, state):
        name = value_dict.get('name') or ''
        if not value_dict.get('ID') and name in RESERVED_NAMES:
            error_dict = {
                'name': self.message('reserved', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        if self.re_space.search(name):
            error_dict = {
                'name': self.message('no_spaces', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        if not self.re_name.search(name):
            error_dict = {
                'name': self.message('invalid', state)
            }
            raise Invalid("", value_dict, state, error_dict=error_dict)
        return value_dict


class UniqueNameValidator(NameFormValidator):
    """
    Validator for unique user/gateway/endpoint names
    """

    user_storage = None

    messages = {
        'unique': _("The name must be unique"),
    }

    def _to_python(self, value_dict, state):
        NameFormValidator._to_python(self, value_dict, state)
        if self.user_storage == None:
            self.user_storage = GuiUser.storage()
        try:
            id = value_dict.get("ID")
        except:
            id = None
        value = value_dict.get('name')
        for item in self.user_storage.select(name=value):
            if str(item.get("ID")) != str(id):
                error_dict = {
                    'name': self.message('unique', state)
                }
                raise Invalid("", value_dict, state, error_dict=error_dict)
        return value_dict


class GuiUserEditor(widgets.GridEditor):
    title = _("Add web frontend user")
    edit_title = _("Change web frontend user")
    columns = 2

    entity = GuiUser

    chained_validators = [
        FieldsMatch('password', 'verify', # check if password and confirm password match
            messages={'invalidNoMatch': _("Passwords do not match")}),
        PasswordValidator(),
        UniqueNameValidator()
    ]

    children = fieldset.FieldsGroup(
        fields=GuiUser.fields(fields=[
            "name",
            "remark",
            "password",
            "verify",
            "profile",
            "enabled",
            "ID"
        ])
    )


class GuiUserGrid(widgets.KendoGrid):
    entity = GuiUser

    new_label = _("Add web frontend user")

    sortable = True
    selectable = False

    columns = [
        widgets.Column(name="name", title=_("User name"), empty_value=' '),
        widgets.Column(name="remark", title=_("Remark"), empty_value=' '),
        widgets.ActionsColumn(["enable", "edit", "delete"])
    ]


