#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi import widgets, fieldset
from endian.emi.entities.fieldset import range_options

from endian.authentication_frontend.schema.provider import Provider, provider_type
from endian.authentication_frontend.schema.scope import scope_title
from endian.authentication_frontend.web.widgets.validators import get_provider_validators

__all__ = [
    'get_provider_children',
    'get_provider_validators',
    'ProviderEditor',
    'ProviderGrid'
]

def get_provider_children(target_filter_value="*"):
    if target_filter_value == "*":
        provider_type = "provider_type"
    else:
        provider_type = widgets.SingleSelectField("provider_type",
            label_text=_("Type"),
            options=range_options(info=dict(
                target="authentication_frontend:ProviderType",
                target_key="ID", target_label="name",
                target_filter_key="ID",
                target_filter_value=target_filter_value
            )),
            expands=True)

    return fieldset.FieldsGroup(
        fields=Provider.fields(fields=[
            "name",
            "enabled",
            fieldset.FieldsGroup(
                id="provider_options_container",
                fields=Provider.fields(fields=[
                    provider_type,
                    fieldset.FieldsGroup(
                        id="local_container",
                        info_text=_("Local group settings"),
                        toggle_name="provider_type",
                        toggle_option="local",
                        expands=True,
                        fields=Provider.fields(fields=[
                            "local_select_groups",
                            "local_user_groups"
                        ])
                    ),
                    fieldset.FieldsGroup(
                        id="ldap_container",
                        info_text=_("LDAP settings"),
                        toggle_name="provider_type",
                        toggle_option="ldap",
                        fields=Provider.fields(fields=[
                            "ldap_uri",
                            "ldap_preset",
                            "ldap_bind_dn",
                            "ldap_bind_password",
                            fieldset.FieldsGroup(
                                id="ldap_user_container",
                                info_text=_("LDAP user settings"),
                                fields=Provider.fields(fields=[
                                    "ldap_user_basedn",
                                    "ldap_user_searchfilter",
                                    "ldap_user_uidattribute"
                                ])
                            ),
                            fieldset.FieldsGroup(
                                id="ldap_group_container",
                                info_text=_("LDAP group settings"),
                                expands=True,
                                fields=Provider.fields(fields=[
                                    "ldap_group_basedn",
                                    "ldap_group_searchfilter",
                                    "ldap_group_uidattribute",
                                    "ldap_group_memberattribute",
                                    "ldap_select_groups",
                                    "ldap_user_groups"
                                ])
                            ),
                        ])
                    ),
                    fieldset.FieldsGroup(
                        id="radius_container",
                        info_text=_("RADIUS settings"),
                        toggle_name="provider_type",
                        toggle_option="radius",
                        fields=Provider.fields(fields=[
                            "radius_server",
                            "radius_secret",
                            fieldset.FieldsGroup(
                                id="radius_advanced_container",
                                info_text=_("RADIUS advanced settings"),
                                fields=Provider.fields(fields=[
                                    "radius_authport",
                                    "radius_acctport",
                                    "radius_identifier"
                                ])
                            )
                        ])
                    ),
                    fieldset.FieldsGroup(
                        id="proxy_container",
                        info_text=_("Proxy settings"),
                        toggle_name="provider_type",
                        toggle_option=["proxy", "proxy_otp"],
                        fields=Provider.fields(fields=[
                            "proxy_user_provider",
                            "proxy_password_provider",
                        ])
                    ),
                    # fieldset.FieldsGroup(
                    #     id="otp_container",
                    #     info_text=_("One Time Password settings"),
                    #     toggle_name="provider_type",
                    #     toggle_option="proxy_otp",
                    #     fields=Provider.fields(fields=[
                    #     ])
                    #)
                ])
            ),
            "ID"
        ])
    )

class SyncAction(widgets.Action):
    ajax_support = True

    name = "sync"
    image = "/images/reload.png"
    title = _("Sync user and groups")

    def condition(self, args):
        return args.get('provider_type') in ["ldap"] and True or False

class ProviderEditor(widgets.GridEditor):
    title = _("Add new authentication server")
    edit_title = _("Change authentication server")

    entity = Provider

    children = get_provider_children()

    chained_validators = get_provider_validators()

class ProviderGrid(widgets.KendoGrid):
    entity = Provider

    new_label = _("Add new authentication server")

    sortable = True
    order_by = "name"
    order_sort = "asc"

    selectable = False

    columns = [
        # checkbox = widgets.CheckBoxColumn(name='ID'),
        widgets.Column(name="name", title=_("Name")),
        widgets.Column(name="provider_type", title=_("Type"),
            format_function=lambda value: provider_type(value).get("name")),
        widgets.Column(name="scopes", title=_("Service"),
            format_function=lambda value: value and ", ".join(map(lambda v: scope_title(v.get("name")), value)) or "",
            empty_value="-"),
        widgets.ActionsColumn(["enable", "edit", "deleteConfirm", SyncAction])
    ]
