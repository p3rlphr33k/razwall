#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

import re

from endian.core.i18n import _
from endian.validators.core import FieldsMatch, Invalid
from endian.validators.form import Unique, FormValidator
from endian.ca.web.widgets.validators import CertificateValidator
from endian.authentication_frontend.schema import User, UserGroup, Provider, Scope

__all__ = [
    "NoSpacesInNameValidator",
    "PasswordValidator",
    "get_user_validators",
    "get_usergroup_validators",
    "get_provider_validators",
    "get_scope_validators"
]

RE_NONALPHANUM = re.compile(r'\W')
RE_SPACE = re.compile(r'\s')

class NoSpacesInNameValidator(FormValidator):
    """
    Check that user/device names don't contain spaces.
    """
    messages = {
        'no_spaces': _("The name can't contain spaces."),
    }

    def _to_python(self, value_dict, state):
        name = value_dict.get('name') or ''
        if RE_SPACE.search(name):
            error_dict = {
                'name': Invalid(self.message('no_spaces', state),
                    value_dict, state)
            }
            raise Invalid(_("The name can't contain spaces."),
                                value_dict, state,
                                error_dict=error_dict)
        return value_dict

class PasswordValidator(FormValidator):
    """
    Validator for checking empty/invalid password during user creation
    """

    messages = {
        'required': _("Password is required"),
        'too_short': _("Password must be at least 8 characters long"),
        'no_alphanum': _("Password must contain at least one non-alphanumeric character")
    }

    def _to_python(self, value_dict, state):
        # Use external provider, don't check the password
        use_external_password_provider = value_dict.get('use_external_password_provider', False)
        if use_external_password_provider:
            return value_dict

        try:
            id = int(value_dict["ID"])
        except:
            id = None
        if id == None and not value_dict.get("password", None): # New user without password
            error_dict = {
                'password': Invalid(self.message('required', state),
                                       value_dict,
                                       state)
            }
            raise Invalid(_('You must enter a password'),
                          value_dict, state,
                          error_dict=error_dict)
        return value_dict

def get_user_validators():
    return [
        Unique(unique='name', entity=User),
        NoSpacesInNameValidator(),
        PasswordValidator(),
        FieldsMatch('password', 'verify', # check if password and confirm password match
            messages={'invalidNoMatch': _("Passwords do not match")}),
        FieldsMatch('new_cert_password', 'new_cert_password_confirm', # check if password and confirm password match
            messages={'invalidNoMatch': _("Certificate passwords do not match")}),
        CertificateValidator('vpncert_option')
    ]

def get_usergroup_validators():
    return [
        Unique(unique='name', entity=UserGroup)
    ]

def get_provider_validators():
    return [
        Unique(unique='name', entity=Provider)
    ]

def get_scope_validators():
    return [
        Unique(unique='name', entity=Scope)
    ]
