#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.core.version import is_community
from endian.emi import widgets, fieldset
from endian.emi.entities.fieldset import range_options

from endian.ca.web.widgets.common import get_new_cert_fields, get_upload_cert_fields, get_upload_cert_req_fields
from endian.ca.web.widgets.ca import CertificateDownloadField
from endian.authentication_frontend.schema.user import User
from endian.authentication_frontend.web.widgets.validators import get_user_validators

__all__ = [
    "get_user_children",
    "get_user_validators",
    "UserEditor",
    "UserGrid"
]

def get_user_children(scope_filter_value="*"):
    info_fields = [
        "user_department",
        "user_organization",
        "user_city",
        "user_state",
        "user_country",
        "user_email"
    ]
    if not is_community():
        info_fields.append("user_memberof")
        if scope_filter_value == "*":
            disabled_scopes = "disabled_scopes"
        else:
            disabled_scopes = widgets.MultipleSelectField("disabled_scopes",
                label_text=_("Disabled on"),
                title=_("Disabled for service"),
                sortable=True,
                options=range_options(info=dict(
                    target="authentication_frontend:Scope",
                    target_label="label",
                    target_key="name",
                    target_filter_key="name",
                    target_filter_value=scope_filter_value
                )),
                expands=True)
    else:
        disabled_scopes = ""
    return fieldset.FieldsGroup(
        fields=User.fields(fields=[
            "name",
            "remark",
            fieldset.FieldsGroup(
                id="security_options",
                info_text=_("Authentication options"),
                fields=User.fields(fields=[
                    fieldset.FieldsGroup(
                        id="password_fields",
                        toggle_name="READONLY",
                        toggle_option="off",
                        fields=User.fields(fields=[
                            "use_external_password_provider",
                            "password",
                            "verify",
                        ])
                    ),
                    "otp_secret",
                    fieldset.FieldsGroup(
                        id="certificate_info",
                        info_text=_("User certificate"),
                        fields=[
                            widgets.SingleSelectField("vpncert_option",
                                label_text=_("Certificate configuration"),
                                options=range_options(info=dict(
                                    target="authentication_frontend:UserCertificateOptions"
                                )),
                                hover_help=False,
                                not_empty=False),
                            CertificateDownloadField("VPNCERT_FILENAME",
                                not_available_text=_("Create a certificate via the '%s'.") % _("Certificate configuration"),
                                show_pem=False,
                                toggle_name="vpncert_option",
                                toggle_option="cert",
                                suppress_label=True),
                        ]
                    ),
                    get_new_cert_fields(toggle_name="vpncert_option", fields=[
                        "new_cert_subjectaltname",
                        "new_cert_digest",
                        "new_cert_password",
                        "new_cert_password_confirm",
                        "new_cert_days",
                    ]),
                    get_upload_cert_fields(toggle_name="vpncert_option"),
                    get_upload_cert_req_fields(toggle_name="vpncert_option")
                ])
            ),
            fieldset.FieldsGroup(
                id="user_info",
                info_text=_("Additional user information"),
                toggle_name="READONLY",
                toggle_option="off",
                fields=User.fields(fields=info_fields)
            ),
            fieldset.FieldsGroup(
                id="vpn_options",
                info_text=_("VPN custom options"),
                fields=User.fields(fields=[
                    "vpn_override_options",
                    "l2tp_override_options",
                    fieldset.FieldsGroup(
                        id="openvpn_accordion",
                        accordion=True,
                        accordion_collapses=False,
                        toggle_name="vpn_override_options",
                        toggle_option="on",
                        fields=[
                            fieldset.FieldsGroup(
                                id="openvpn_options",
                                title=_("OpenVPN options"),
                                fields=User.fields(fields=[
                                    "vpn_red",
                                    "vpn_dont_push_routes",
                                    fieldset.FieldsGroup(
                                        id="openvpn_custom_routing",
                                        info_text=_("Custom client routing"),
                                        fields=User.fields(fields=[
                                            "vpn_green",
                                            "vpn_blue",
                                            "vpn_orange",
                                            "vpn_explicit_routes",
                                            "vpn_remote_nets"
                                        ])
                                    ),
                                    fieldset.FieldsGroup(
                                        id="openvpn_custom_push",
                                        info_text=_("Custom push configuration"),
                                        fields=User.fields(fields=[
                                            "vpn_static_ips",
                                            "vpn_push_custom_dns",
                                            "vpn_push_domain",
                                            "vpn_custom_dns",
                                            "vpn_domain"
                                        ])
                                    )
                                ])
                            )
                        ]
                    ),
                    fieldset.FieldsGroup(
                        id="l2tp_accordion",
                        accordion=True,
                        accordion_collapses=False,
                        toggle_name="l2tp_override_options",
                        toggle_option="on",
                        fields=[
                            fieldset.FieldsGroup(
                                id="l2tp_options",
                                title=_("L2TP options"),
                                fields=User.fields(fields=[
                                    "l2tp_ipsec_tunnel"
                                ])
                            )
                        ]
                    ),
                    disabled_scopes
                ])
            ),
            "enabled",
            "provider_name",
            "synced",
            "type",
            "ID",
            widgets.CheckBox("READONLY", hidden=True),
        ])
    )

class UserEditor(widgets.GridEditor):
    title = _("Add new user")
    edit_title = _("Change user")

    entity = User

    children = get_user_children()

    chained_validators = get_user_validators()

class DeleteConfirmAction(widgets.DeleteConfirmAction):
    def condition(self, args):
        if not args.get("provider_name"):
            return True
        if args.get("synced", True):
            return False
        return True

class InvalidAlertAction(widgets.AlertAction):
    title = _("Not on LDAP")

    def condition(self, args):
        if not args.get("provider_name"):
            return False
        if args.get("synced", True):
            return False
        return True

class UserGrid(widgets.KendoGrid):
    entity = User

    new_label = _("Add new user")

    sortable = True
    order_by = "name"
    order_sort = "asc"

    selectable = False

    columns = [
        # widgets.CheckBoxColumn(name='ID'),
        widgets.Column(name="name", title=_("Name")),
        widgets.Column(name="remark", title=_("Remark"), empty_value="-"),
        widgets.ActionsColumn(["enable", "edit", DeleteConfirmAction, InvalidAlertAction])
    ]
