#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi import widgets, fieldset
from endian.authentication_frontend.schema.usergroup import UserGroup
from endian.authentication_frontend.web.widgets.validators import get_usergroup_validators

__all__ = [
    "get_usergroup_children",
    "get_usergroup_validators",
    "UserGroupEditor",
    "UserGroupGrid"
]

def get_usergroup_children():
    return fieldset.FieldsGroup(
        fields=UserGroup.fields(fields=[
            "name",
            "remark",
            "usergroup_member",
            "vpn_override_options",
            "l2tp_override_options",
            fieldset.FieldsGroup(
                id="openvpn_accordion",
                accordion=True,
                accordion_collapses=False,
                toggle_name="vpn_override_options",
                toggle_option="on",
                fields=[
                    fieldset.FieldsGroup(
                        id="openvpn_options",
                        title=_("OpenVPN Options"),
                        fields=UserGroup.fields(fields=[
                            "vpn_red",
                            "vpn_dont_push_routes",
                            fieldset.FieldsGroup(
                                id="openvpn_custom_routing",
                                info_text=_("Custom client routing"),
                                fields=UserGroup.fields(fields=[
                                    "vpn_green",
                                    "vpn_blue",
                                    "vpn_orange",
                                    "vpn_explicit_routes",
                                    "vpn_remote_nets"
                                ])
                            ),
                            fieldset.FieldsGroup(
                                id="openvpn_custom_push",
                                info_text=_("Custom push configuration"),
                                fields=UserGroup.fields(fields=[
                                    "vpn_push_custom_dns",
                                    "vpn_push_domain",
                                    "vpn_custom_dns",
                                    "vpn_domain"
                                ])
                            )
                        ])
                    )
                ]
            ),
            fieldset.FieldsGroup(
                id="l2tp_accordion",
                accordion=True,
                accordion_collapses=False,
                toggle_name="l2tp_override_options",
                toggle_option="on",
                fields=[
                    fieldset.FieldsGroup(
                        id="l2tp_options",
                        title=_("L2TP Options"),
                        fields=UserGroup.fields(fields=[
                            "l2tp_ipsec_tunnel"
                        ])
                    )
                ]
            ),
            fieldset.FieldsGroup(
                id="global_container",
                fields=UserGroup.fields(fields=[
                    "enabled",
                ])
            ),
            "provider_name",
            "synced",
            "ID",
            widgets.CheckBox("READONLY", hidden=True),
        ])
    )

class UserGroupEditor(widgets.GridEditor):
    title = _("Add new local group")
    edit_title = _("Change group")

    entity = UserGroup

    children = get_usergroup_children()

    chained_validators = get_usergroup_validators()

class DeleteConfirmAction(widgets.DeleteConfirmAction):
    def condition(self, args):
        if not args.get("provider_name"):
            return True
        if args.get("synced", True):
            return False
        return True

class InvalidAlertAction(widgets.AlertAction):
    title = _("Not on LDAP")

    def condition(self, args):
        if not args.get("provider_name"):
            return False
        if args.get("synced", True):
            return False
        return True

class UserGroupGrid(widgets.KendoGrid):
    entity = UserGroup

    new_label = _("Add new local group")

    sortable = True
    order_by = "name"
    order_sort = "asc"

    selectable = False

    columns = [
        # widgets.CheckBoxColumn(name='ID'),
        widgets.Column(name="name", title=_("Groupname")),
        widgets.Column(name="remark", title=_("Remark"), empty_value="-"),
        widgets.Column(name="provider",
            title=_("Authentication server"),
            format_function=lambda value: ", ".join(value),
            empty_value="-"),
        widgets.ActionsColumn(["edit", DeleteConfirmAction, InvalidAlertAction])
    ]

