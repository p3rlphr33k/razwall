#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core.i18n import _
from endian.emi import entities
from endian.emi import widgets

__all__ = [
    'GuiUser'
]

class GuiUser(entities.Entity):
    entities.using_options(namespace='auth.guiuser', type='yaml', register_datasource=False, storage_args={'indexes': ['name']})

    ID = entities.Field(entities.Integer,
        primary_key=True,
        autoincrement=True,
        hidden=True,
        expands=True)
    name = entities.Field(entities.Unicode,
        label_text=_("Username"),
        readonly_if_not_empty=True,
        nullable=False,
        help_text=_("Username must be unique"))
    remark = entities.Field(entities.Unicode,
        label_text=_("Remark"))
    profile = entities.ManyToOne(
        target="authentication_frontend:GuiProfile",
        label_text=_("GUI Profile"),
        add_empty_option=True,
        nullable=True,
        required=False)
    enabled = entities.Field(entities.Boolean,
        label_text=_("Enabled"),
        default=True,
        expands=True)
    password = entities.Field(entities.Unicode,
        label_text=_("Password"),
        nullable=True,
        widget=widgets.PasswordField)
    verify = entities.Field(entities.Unicode,
        label_text=_("Confirm Password"),
        nullable=True,
        widget=widgets.PasswordField)

    @classmethod
    def get_by_id(cls, id_):
        try:
            id_ = int(id_)
        except (ValueError, TypeError):
            return None
        return cls.storage().load(id=id_)

    @classmethod
    def get_by_name(cls, name, check_acl=False):
        result = cls.storage().select(name=name, check_acl=check_acl)
        return result and result[0] or None

    @classmethod
    def all(cls):
        return cls.storage().load()

