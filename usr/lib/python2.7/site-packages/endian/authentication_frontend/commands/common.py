#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

from endian.core import commands
from endian.authentication import auth_client

__all__ = [
    "authenticate",
    "get_user",
    "list_users",
    # "get_group",
    "list_groups",
    "get_providers",
    "get_scopes"
]

@commands.force_json_output
def authenticate(username, password, scope):
    """
        Try to Authenticate an user, identified by an username,
        password and (optional) additional arguments on a scope.
        Return a JSON dictionary of user attributes in case of success.
        If the user authentication failed, returns a string with the following format:
        "ERROR: ExceptionClassName: Message",
        Example: "ERROR: UserNotFoundError: User not found"
        :param username: username
        :type username: string
        :param password: password
        :type password: string
        :param scope: a scope name or a string starting with the prefix 'provider:'
                      followed by the name of a provider
        :type scope: string
    """
    return auth_client.authenticate(username=username, password=password, scope=scope)

@commands.force_json_output
def get_user(username, scope, retrieve_attributes="*"):
    """
        Get an user by an username user and a scope.
        Return a JSON dictionary of user attributes in case of success.
        Remove the password attribute from the result
        If the user authentication failed, returns a string with the following format:
        "ERROR: ExceptionClassName: Message",
        Example: "ERROR: UserNotFoundError: User not found"
        :param username: username
        :type username: string
        :param scope: a scope name or a string starting with the prefix 'provider:'
                      followed by the name of a provider
        :type scope: string
        :param retrieve_attributes: coma-separated list of user attributes to be returned
        :type retrieve_attributes: string
        :rtype: list of dict
    """
    if retrieve_attributes and retrieve_attributes != "*":
        retrieve_attributes = retrieve_attributes.split(",")
    else:
        retrieve_attributes = "*"
    result = auth_client.get_user(username=username, scope=scope, retrieve_attributes=retrieve_attributes)
    result = dict(result)
    if 'password' in result:
        del result['password']
    return result

@commands.force_json_output
def list_users(scope, retrieve_attributes="name"):
    """
        Get the list of all the users of a scope.
        For each user a subset of the attributes is extracted,
        specified by the retrieve_attributes parameter
        This method depends on the ability of the providers to
        retrieve the user list
        (not all the kinds of providers are able to do this).
        :param scope: a scope name or a string starting with the prefix 'provider:'
                      followed by the name of a provider
        :type scope: string
        :param retrieve_attributes: coma-separated list of user attributes to be returned
        :type retrieve_attributes: string
        :return: a list of users with the selected attributes
        :rtype: list of dict
    """
    if retrieve_attributes and retrieve_attributes != "*":
        retrieve_attributes = retrieve_attributes.split(",")
    elif not retrieve_attributes:
        retrieve_attributes = ["name"]
    return auth_client.list_users(scope=scope, retrieve_attributes=retrieve_attributes)

# @commands.force_json_output
# def get_group(groupname, scope, retrieve_attributes="*"):
#     """
#         Get an user by an username user and a scope.
#         Return a JSON dictionary of user attributes in case of success.
#         Remove the password attribute from the result
#         If the user authentication failed, returns a string with the following format:
#         "ERROR: ExceptionClassName: Message",
#         Example: "ERROR: UserNotFoundError: User not found"
#         :param username: username
#         :type username: string
#         :param scope: a scope name or a string starting with the prefix 'provider:'
#                       followed by the name of a provider
#         :type scope: string
#         :param retrieve_attributes: coma-separated list of user attributes to be returned
#         :type retrieve_attributes: string
#         :rtype: list of dict
#     """
#     if retrieve_attributes and retrieve_attributes != "*":
#         retrieve_attributes = retrieve_attributes.split(",")
#     else:
#         retrieve_attributes = "*"
#     result = auth_client.get_group(groupname=groupname, scope=scope, retrieve_attributes=retrieve_attributes)
#     result = dict(result)
#     return result

@commands.force_json_output
def list_groups(scope, retrieve_attributes="name"):
    """
        Get the list of all the groups of a scope.
        For each group a subset of the attributes is extracted,
        specified by the retrieve_attributes parameter
        This method depends on the ability of the providers to
        retrieve the user list
        (not all the kinds of providers are able to do this).
        :param scope: a scope name or a string starting with the prefix 'provider:'
                      followed by the name of a provider
        :type scope: string
        :param retrieve_attributes: coma-separated list of user attributes to be returned
        :type retrieve_attributes: string
        :return: a list of users with the selected attributes
        :rtype: list of dict
    """
    if retrieve_attributes and retrieve_attributes != "*":
        retrieve_attributes = retrieve_attributes.split(",")
    elif not retrieve_attributes:
        retrieve_attributes = ["name"]
    return auth_client.list_groups(scope=scope, retrieve_attributes=retrieve_attributes)

@commands.force_json_output
def sync_users(scope):
    return auth_client.sync_users(scope=scope)

@commands.force_json_output
def sync_groups(scope):
    return auth_client.sync_groups(scope=scope)

@commands.force_json_output
def get_scopes():
    """
        Return the authentication scopes list
        :rtype: list of dict
    """
    return [dict(scope) for scope in auth_client.get_scopes()]

@commands.force_json_output
def get_providers():
    """
        Return the authentication providers list
        :rtype: list of dict
    """
    return [dict(provider) for provider in auth_client.get_providers()]

commands.registerCommand('commands.authentication.authenticate', authenticate)
commands.registerCommand('commands.authentication.getUser', get_user)
commands.registerCommand('commands.authentication.listUsers', list_users)
# commands.registerCommand('commands.authentication.getGroup', get_group)
commands.registerCommand('commands.authentication.listGroups', list_groups)
commands.registerCommand('commands.authentication.syncUsers', sync_users)
commands.registerCommand('commands.authentication.syncGroups', sync_groups)
commands.registerCommand('commands.authentication.getScopes', get_scopes)
commands.registerCommand('commands.authentication.getProviders', get_providers)
