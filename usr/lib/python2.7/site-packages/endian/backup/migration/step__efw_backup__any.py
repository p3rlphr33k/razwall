#!/usr/bin/python
#
#        +-----------------------------------------------------------------------------+
#        | Endian Firewall                                                             |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) 2005-2012 Endian                                              |
#        |         Endian GmbH/Srl                                                     |
#        |         Bergweg 41 Via Monte                                                |
#        |         39057 Eppan/Appiano                                                 |
#        |         ITALIEN/ITALIA                                                      |
#        |         info@endian.it                                                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        | http://www.fsf.org/                                                         |
#        +-----------------------------------------------------------------------------+
#

import os
import glob
import shutil
import shlex
import subprocess

from endian.core import logger
from endian.data import DataSource
from endian.data.container.fileconfig import PlainFile
from endian.data.container.settings import SettingsFile
from endian.migration.migration import mainHandler

BUSINFOTAB_FILE = '/etc/businfotab'
ETH_CFG_FILES = '/var/efw/ethernet/'

IFS_TO_MIGRATE = ['eth0', 'eth1', 'eth2', 'eth3', 'eth4']
IFS_TO_MIGRATE_ARM = ['lan1', 'lan2', 'lan3', 'lan4', 'eth1']


def _must_migrate(interface, _fromARM=False):
    """Return True if the interface must be migrated."""
    iterfaces_to_migrate = IFS_TO_MIGRATE
    if _fromARM:
        iterfaces_to_migrate = IFS_TO_MIGRATE_ARM
    for test_if in iterfaces_to_migrate:
        if test_if in interface:
            return True
    return False


def _migrate_interface(interface, _fromARM=False):
    """Convert the name of the interface."""
    eth_from = 'eth'
    lan_to = 'lan'
    eth_up_from = 'eth4'
    eth_up_to = 'eth1'
    if _fromARM:
        eth_from = 'lan'
        lan_to = 'eth'
        eth_up_from = 'eth1'
        eth_up_to = 'eth4'
    try:
        if eth_up_from in interface:
            return interface.replace(eth_up_from, eth_up_to)
        eth_idx = interface.find(eth_from)
        digit = int(interface[eth_idx + len(eth_from)])
        if not _fromARM:
            new_value = digit + 1
        else:
            new_value = digit - 1
        return interface.replace('%s%d' % (eth_from, digit),
                                 '%s%d' % (lan_to, new_value))
    except Exception, e:
        logger.warn('Unable to convert interface named "%s": %s', interface, e)
        return interface


def migrate_interfaces(_fromARM=False):
    """Migrate br*, bond* and vlan_* interfaces."""
    eth_ds = DataSource('ethernet')
    for if_file in glob.glob(os.path.join(ETH_CFG_FILES, 'br*')) + \
            glob.glob(os.path.join(ETH_CFG_FILES, 'bond*')):
        if if_file.endswith('.rpmnew'):
            continue
        pf_name = os.path.basename(if_file)
        plain_file = PlainFile('ethernet/%s' % pf_name)
        for idx, interface in enumerate(plain_file):
            if _must_migrate(interface, _fromARM=_fromARM):
                plain_file[idx] = _migrate_interface(interface, _fromARM=_fromARM)
        plain_file.write()
    for vlan_file in glob.glob(os.path.join(ETH_CFG_FILES, 'vlan_*')):
        if vlan_file.endswith('.rpmnew'):
            continue
        file_name = os.path.basename(vlan_file)
        if _must_migrate(file_name, _fromARM=_fromARM):
            move_to = _migrate_interface(file_name, _fromARM=_fromARM)
            shutil.move(vlan_file, vlan_file.replace(file_name, move_to))


def migrate_uplinks(_fromARM=False):
    """Migrate interfaces for uplinks."""
    uplinks_ds = DataSource('uplinks')
    for uplink in uplinks_ds:
        uplink_settings = SettingsFile('uplinks/%s/settings' % uplink.lower())
        interface = uplink_settings.get('RED_DEV')
        if not interface:
            continue
        if _must_migrate(interface, _fromARM=_fromARM):
            uplink_settings['RED_DEV'] = _migrate_interface(interface, _fromARM=_fromARM)
            uplink_settings.write()


def migrate_hotspot_dev():
    """Migrate the BLUE_DEV from tun* to br2."""
    eth_settings = SettingsFile('ethernet/settings')
    blue_dev = eth_settings.get('BLUE_DEV')
    if blue_dev and blue_dev.startswith('tun'):
        eth_settings['BLUE_DEV'] = 'br2'
    eth_settings.write()


def migrate_businfotab():
    """Remove the /etc/businfotab file."""
    os.remove(BUSINFOTAB_FILE)


def _get_appliance_name(source):
    """Return the name of the appliance, from an iterable source."""
    appl = [x for x in source if x.startswith('endian-appliance-')]
    if appl:
        appl = appl[0]
    else:
        appl = ''
    return appl.split(' ')[0]


def _current_appliance():
    """Return the name of the current appliance."""
    args = shlex.split("rpm -qa  'endian-appliance-*' --queryformat '%{NAME}'")
    p = subprocess.Popen(args, stdout=subprocess.PIPE)
    return p.communicate()[0]


def main():
    backup_ds = DataSource('backup')
    backup_appl_name = _get_appliance_name(backup_ds['rpms'])
    current_appl_name = _current_appliance()
    # The BLUE_DEV interface is migrated in any case.
    try:
        migrate_hotspot_dev()
    except Exception, e:
        logger.error('Error migrating the hotspot interface: %s', e)
    # If the source and target appliances are different,
    # the /etc/businfotab file is removed.
    if backup_appl_name != current_appl_name:
        try:
            migrate_businfotab()
        except Exception, e:
            logger.error('Error migrating /etc/businfotab: %s', e)
        if '-mini-arm' in current_appl_name and '-mini-arm' not in backup_appl_name:
            # If the target system is a new MINI and the source is not,
            # interfaces and uplinks are migrated.
            try:
                migrate_interfaces(_fromARM=False)
            except Exception, e:
                logger.error('Error migrating interfaces: %s', e)
            try:
                migrate_uplinks(_fromARM=False)
            except Exception, e:
                logger.error('Error migrating uplinks: %s', e)
        elif '-mini-arm' in backup_appl_name and '-mini-arm' not in current_appl_name:
            # If the source system is a new MINI and the target is not,
            # interfaces are migrated.
            try:
                migrate_interfaces(_fromARM=True)
            except Exception, e:
                logger.error('Error migrating interfaces from mini ARM: %s', e)
            try:
                migrate_uplinks(_fromARM=True)
            except Exception, e:
                logger.error('Error migrating uplinks from mini ARM: %s', e)


if __name__ == '__main__':
    mainHandler(main)

__all__ = []
