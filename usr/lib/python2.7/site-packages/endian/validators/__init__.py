#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2012 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

#import sys

_MODULE_NAME = "endian.validators"
_ITEMS_MODULES = {
    "ConfirmType":                  "endian.validators.core",
    "Constant":                     "endian.validators.core",
    "DateConverter":                "endian.validators.core",
    "DateValidator":                "endian.validators.core",
    "DictConverter":                "endian.validators.core",
    "Email":                        "endian.validators.core",
    "Empty":                        "endian.validators.core",
    "FancyValidator":               "endian.validators.core",
    "FieldStorageUploadConverter":  "endian.validators.core",
    "FieldsMatch":                  "endian.validators.core",
    "FileUploadKeeper":             "endian.validators.core",
    "ForEach":                      "endian.validators.core",
    "FormValidator":                "endian.validators.core",
    "IndexListConverter":           "endian.validators.core",
    "Int":                          "endian.validators.core",
    "Invalid":                      "endian.validators.core",
    "MaxLength":                    "endian.validators.core",
    "Multiline":                    "endian.validators.core",
    "Multichoice":                  "endian.validators.core",
    "MinLength":                    "endian.validators.core",
    "NoDefault":                    "endian.validators.core",
    "NotEmpty":                     "endian.validators.core",
    "Number":                       "endian.validators.core",
    "OneOf":                        "endian.validators.core",
    "OpenId":                       "endian.validators.core",
    "Percentage":                   "endian.validators.core",
    "PlainText":                    "endian.validators.core",
    "RangeValidator":               "endian.validators.core",
    "Regex":                        "endian.validators.core",
    "Relation":                     "endian.validators.core",
    "RequireIfMissing":             "endian.validators.core",
    "RequireIfPresent":             "endian.validators.core",
    "Schema":                       "endian.validators.core",
    "Set":                          "endian.validators.core",
    "SignedString":                 "endian.validators.core",
    "String":                       "endian.validators.core",
    "StripField":                   "endian.validators.core",
    "TimeConverter":                "endian.validators.core",
    "URL":                          "endian.validators.core",
    "URLDomainOrIP":                "endian.validators.network",
    "URLDomainOrHostnameOrIP":      "endian.validators.network",
    "URLPath":                      "endian.validators.network",
    "URLAbsolutePath":              "endian.validators.network",
    "HostPort":                     "endian.validators.network",
    "UnicodeString":                "endian.validators.core",
    "Validator":                    "endian.validators.core",
    "Wrapper":                      "endian.validators.core",
    "XRI":                          "endian.validators.core",    
    "Any":                          "endian.validators.compound",
    "All":                          "endian.validators.compound",
    "Pipe":                         "endian.validators.compound",
    "MACAddress":                   "endian.validators.network",
    "Port":                         "endian.validators.network",
    "PortRange":                    "endian.validators.network",
    "MultiPortRange":               "endian.validators.network",
    "NetworkAddress":               "endian.validators.network",
    "CIDR":                         "endian.validators.network",
    "IPAddress":                    "endian.validators.network",
    "NetworkIPS":                   "endian.validators.network",
    "NetworkMultiIPS":              "endian.validators.network",
    "HostnameRegex":                "endian.validators.network",
    "DomainNameRegex":              "endian.validators.network",
    "SubdomainNameRegex":           "endian.validators.network",
    "NetworkIntersection":          "endian.validators.form",
    "NetworkSelectorContains":      "endian.validators.form",
    "IpRange":                      "endian.validators.form",
    "FieldValueCount":              "endian.validators.form",
    "Require":                      "endian.validators.form",
    "RequireIfPresentSelected":     "endian.validators.form",
    "Unique":                       "endian.validators.form",
    "ConditionalValidator":         "endian.validators.form",
    "Bool":                         "endian.validators.boolean",
    "to_bool":                      "endian.validators.boolean",
    "Boolean":                      "endian.validators.boolean",
    "OnOff":                        "endian.validators.boolean",
}

_imported = {}

def get_validator(name):
    item_module = _ITEMS_MODULES.get(name, None)
    if item_module:
        module = __import__(item_module, None, None, [name])
        for item in getattr(module, "__all__", None) or [x for x in dir(module) if not x.startswith("_")]:
            if item not in _imported:
                _imported[item] = getattr(module, item)
    return _imported[name]

def get_all_validators():
    for name, item_module in _ITEMS_MODULES.iteritems():
        module = __import__(item_module, None, None, [name])
        for item in getattr(module, "__all__", None) or [x for x in dir(module) if not x.startswith("_")]:
            if item not in _imported:
                _imported[item] = getattr(module, item)
    return _imported

__all__ = ['get_validator', 'get_all_validators']

#
#_ModuleType = type(sys)
#
#class _MagicModule(_ModuleType):
#    
#    def __init__(self, module_name):
#        _ModuleType.__init__(self, module_name)
#        self.__all__ = _ITEMS_MODULES.keys()
#        self.__package__ = module_name
#        self.__file__ = __file__
#        self.__path__ = __path__
#        self._this_module = sys.modules[module_name]
#
#    def __getattr__(self, name):
#        item_module = _ITEMS_MODULES.get(name, None)
#        if item_module:
#            module = __import__(item_module, None, None, [name])
#            for item in getattr(module, "__all__", None) or [x for x in dir(module) if not x.startswith("_")]:
#                if not hasattr(self, item):
#                    setattr(self, item, getattr(module, item))
#        return _ModuleType.__getattribute__(self, name)
#
#sys.modules[_MODULE_NAME] = _MagicModule(_MODULE_NAME)
