#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2012 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from formencode.validators import FancyValidator, Bool

__all__ = [ 'Bool', 'to_bool', 'Boolean', 'OnOff' ]

_BOOL_LOOKUP = {
    'on': True,
    'off': False,
    'yes': True,
    'no': False,
    'true': True,
    'false': False,
    'enabled': True,
    'disabled': False,
    True: True,
    False: False,
    1: True,
    0: False,
    '1': True,
    '0': False,
}


def to_bool(value, default=False):
    """
        transforms '''value''' to a boolean value.

        In order to return True, '''value''' may be one of
        (case insensitive) 'on', 1, '1', True, 'enabled'

        If the value does not correspond to True or False,
        for example '' or None, the value of '''default'''
        will be returned, which is False if not specified.

        :param value:     value to transform to boolean
        :type  value:     any
        :return:          corresponding boolean value of '''value'''
        :rtype:           boolean
    """
    if isinstance(value, basestring):
        value = value.lower()
    try:
        return _BOOL_LOOKUP[value]
    except KeyError:
        return bool(value)

class Boolean(FancyValidator):
    """
    Converts a string to a boolean.
    The default representation for true is "true" and for false is "false"
    """

    def _to_python(self, value, state):
        return to_bool(value)

    def _from_python(self, value, state):
        if value:
            return "true"
        else:
            return "false"

class OnOff(FancyValidator):
    """
    Converts a string to a boolean.
    The default representation for true is "on" and for false is "off"
    """

    def _to_python(self, value, state):
        return to_bool(value)

    def _from_python(self, value, state):
        if value:
            return "on"
        else:
            return "off"
