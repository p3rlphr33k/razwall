#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from endian.core.logger import *
from framework import HTTPError, request
from controllers import Controller, expose
from acl import NotLoggedInError, NotAuthorizedError

class RestController(Controller):
    """
        This controller exposes a storage as REST api
    """
    
    acl = None
    order_by = None
    disable_filter_query = None
    filter_query = None
    storage = None

    def __init__(self, storage=None, entity=None, acl=None):
        if entity:
            self.storage = entity.storage()
        if storage:
            self.storage = storage
        if acl:
            self.acl = acl

    @expose("json")
    def default(self, *args, **argv):        
        if request.method == "GET":
            return self.get(*args, **argv)
        elif request.method == "POST":
            return self.post(*args, **argv)
        elif request.method == "PUT":
            return self.put(*args, **argv)
        elif request.method == "DELETE":
            return self.delete(*args, **argv)
        else:
            raise HTTPError(405) # Method Not Allowed

    def get(self, *args, **argv):
        """
            Invoked by the http GET method
        """ 
        if args:
            return self.get_item(*args, **argv)
        else:
            return self.get_list(*args, **argv)
    
    def get_item(self, *args, **argv):
        """
            Returns a single item by its id
        """ 
        try:
            # First, if the controller has an ACL, check the permissions
            if self.acl:
                self.acl.check_permission('view', hasAccess=True)
                
            # Get elements to display
            item = self.storage and self.storage.load(args[0]) or None
    
            if self.filter_query:
                item = self.filter_query(query=item, args={})

            if not item:
                raise HTTPError(404, u"Not found") # Not found

            # Prepare the output
            return item.__json__()
                        
        except NotLoggedInError:
            raise HTTPError(403) # Forbidden

        except NotAuthorizedError:
            raise HTTPError(403) # Forbidden


    def get_list(self, *args, **argv):
        """
            Returns a list of item from the storage
        """ 
        try:
            # First, if the controller has an ACL, check the permissions
            if self.acl:
                self.acl.check_permission('view', hasAccess=True)
                
            # Get elements to display
            try:
                args = self.storage and self.storage.load(order_by=self.order_by, disable_filter_query=self.disable_storage_filter_query) or []
            except AttributeError:
                args = self.storage and self.storage.load() or []
    
            if self.filter_query:           
                args = self.filter_query(query=args, args={})
                            
        except NotLoggedInError:
            raise HTTPError(403) # Forbidden

        except NotAuthorizedError:
            raise HTTPError(403) # Forbidden

        # Prepare the output
        return { 'items' : map(lambda x: x.__json__(), args) }
        
    def post(self, *args, **argv):
        """
            Invoked by the http POST method
        """ 
        raise HTTPError(405) # Method Not Allowed

    def put(self, *args, **argv):
        """
            Invoked by the http PUT method
        """ 
        raise HTTPError(405) # Method Not Allowed
    
    def delete(self, *args, **argv):
        """
            Invoked by the http DELETE method
        """ 
        raise HTTPError(405) # Method Not Allowed

__all__ = ['RestController']
