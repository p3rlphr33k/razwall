#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import copy
from datetime import datetime, date
from turbogears.database import session

import sqlalchemy
if sqlalchemy.__version__.startswith('0.7'):    
  from sqlalchemy.types import (TypeEngine, TypeDecorator, AbstractType, UserDefinedType,
                             INT, CHAR, VARCHAR, NCHAR, NVARCHAR,TEXT, Text,
                             FLOAT, REAL, NUMERIC, DECIMAL, TIMESTAMP, DATETIME, CLOB,
                             BLOB, BOOLEAN, SMALLINT, INTEGER, DATE, TIME,
                             String, Integer, SmallInteger, BigInteger, Numeric,
                             Float, DateTime as sqlalchemyDateTime, Date as sqlalchemyDate, Time, LargeBinary, Binary,
                             Boolean, Unicode, MutableType, Concatenable,
                             UnicodeText,PickleType, Interval, Enum)
else: # 0.6
  from sqlalchemy.types import (TypeEngine, TypeDecorator, AbstractType, UserDefinedType,
                             INT, CHAR, VARCHAR, NCHAR, NVARCHAR,TEXT, Text,
                             FLOAT, NUMERIC, DECIMAL, TIMESTAMP, DATETIME, CLOB,
                             BLOB, BOOLEAN, SMALLINT, INTEGER, DATE, TIME,
                             String, Integer, SmallInteger, BigInteger, Numeric,
                             Float, DateTime as sqlalchemyDateTime, Date as sqlalchemyDate, Time, LargeBinary, Binary,
                             Boolean, Unicode, MutableType, Concatenable,
                             UnicodeText,PickleType, Interval, type_map, Enum)  

# type to be associated with HugeTextField
class HugeText(Text):
    pass
class UnicodeHugeText(UnicodeText):
    pass

from sqlalchemy import asc, desc, and_, or_, not_
from sqlalchemy.orm import eagerload, eagerload_all, aliased, scoped_session, sessionmaker
from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound

from elixir import (metadata, entities as elixir_entities, setup_entities as elixir_setup_entities, create_all as elixir_create_all, 
                    using_options, using_table_options, using_mapper_options, options_defaults, using_options_defaults,
                    EntityBase, EntityMeta, EntityDescriptor,
                    GenericProperty, ColumnProperty, Synonym, Statement, EntityCollection, GlobalEntityCollection,
                    Field as ElixirField, ManyToOne as ElixirManyToOne, OneToMany as ElixirOneToMany, ManyToMany as ElixirManyToMany, OneToOne, )
from elixir.properties import Property
from elixir.options import valid_options, options_defaults

class DateTime(TypeDecorator):
    impl = sqlalchemyDateTime

    def process_result_value(self, value, dialect):
        try:
            # Convert mx.DateTime.DateTime to datetime.datetime
            return datetime.fromtimestamp(value.ticks())
        except:
            return value

class Date(TypeDecorator):
    impl = sqlalchemyDate

    def process_result_value(self, value, dialect):
        try:
            # Convert mx.DateTime.DateTime to datetime.date
            return date.fromtimestamp(value.ticks())
        except:
            return value

class ObjectId(TypeDecorator):
    impl = Unicode

    def process_bind_param(self, value, dialect):
        from endian.core import logger
        return value

    def process_result_value(self, value, dialect):
        from endian.core import logger
        return value

    def copy(self):
        return ObjectId(self.impl.length)

# Elixir options
options_defaults['label_field'] = None
valid_options.append('label_field')
options_defaults['namespace'] = ''
valid_options.append('namespace')
options_defaults['type'] = None
valid_options.append('type')
options_defaults['cache_type'] = None
valid_options.append('cache_type')
options_defaults['register_datasource'] = True
valid_options.append('register_datasource')
options_defaults['storage_args'] = None
valid_options.append('storage_args')
options_defaults['verbose'] = False
valid_options.append('verbose')

__all__ = [ 'asc', 'desc', 'and_', 'or_', 'not_',
            'eagerload', 'eagerload_all', 'aliased',
            'NoResultFound', 'MultipleResultsFound',
            'metadata', 'session', 'elixir_entities', 'elixir_create_all',
            'using_options', 'using_table_options', 'using_mapper_options', 'options_defaults', 'using_options_defaults',
            'EntityBase', 'EntityMeta', 'EntityDescriptor',
            'GenericProperty', 'ColumnProperty', 'Synonym', 'Statement', 'EntityCollection', 'GlobalEntityCollection',
            'ElixirField', 'ElixirManyToOne', 'ElixirManyToMany', 'ElixirOneToMany', 'OneToOne',
            'Property', 'HugeText', 'UnicodeHugeText', 'ObjectId'] + sqlalchemy.types.__all__
