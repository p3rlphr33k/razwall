#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2015 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import time
from endian.emi.fieldset import FieldsGroup
from endian.emi.entities.entities_register import lookup_entity_register

def remove_id_from_field_name(fieldName):
    """
        If the field name ends with '_id', removes the last 3 chars

        :param fieldName: field name
        :type fieldName: string
        :return: Return fieldName without '_id'
        :rtype: FieldSet string
    """
    if fieldName[-3:] == '_id':
        fieldName = fieldName[:-3]
    return fieldName


def create_schema_field(field_name, field):
    """
        Create a validator (ore more than one) for a field

        :param field_name: the name of the field
        :type field_name: string
        :param field: a field
        :type field: endian.emi.entities.fields.Field, endian.emi.entitiesrelationships.ManyToOne or endian.emi.entitiesrelationships.ManyToMany
        :return: Return a dict of validators
        :rtype: dict of Validator (key=field_name, value=validator)
    """
    from endian.emi.widgets import UnicodeString, Validator
    if field.info.get("private", False): # Private field are not added to the schema
        return {}
    
    # TODO: multivalue, etc...
    target = field.info.get("target", None)
    if target:
        try:
            from validators import ManyToOneValidator
            entity = lookup_entity_register(target)
            if entity._type == 'db':
                nullable = not field.info.get("required", False)
                return { field_name: ManyToOneValidator(entity, nullable=nullable) }
            
        except (KeyError, AttributeError):
            pass

    # Validator can be a class (e.g. Int) or an instance (e.g. Ant(Int, Percentage))
    validator = field.info.get("validator", UnicodeString)

    if isinstance(validator, Validator):
        return { field_name : validator } # validator is an instance

    args = {}
    args['not_empty'] = field.info.get("required", False)
    if 'length' in field.info:
        args['max'] = field.info.get["length"]
    
    return { field_name: validator(**args)}


def create_schema_class(entity, exclude = None, fields = None, allow_extra_fields = None):
    """
        Create a subclass of Schema with the validators for the entity
        The generated fieldset can be customized is several ways:
        1) excluding some fields
        3) generating a schema from a custom list of fields, containing both field ids or Validator instances

        :param entity: the entity
        :type entity: endian.emi.entities.entity.Entity
        :param exclude: list of field name to be excluded
        :type exclude: list of strings
        :param fields: custom list of fields
        :type fields: list of strings and/or "(id, Validator)" tuples
        :param allow_extra_fields: if the parameter is present, it is added to the schema class
        :type allow_extra_fields: boolean
        :return: Return a Schema class for the entity
        :rtype: Schema class
    """
    from endian.emi.widgets import Schema 
    if exclude == None:
        exclude = []
        
    # Class field
    class_dict = dict()
    if allow_extra_fields != None:
        class_dict['allow_extra_fields'] = allow_extra_fields
        
    if fields:
        if not isinstance(fields, FieldsGroup):
            fields = FieldsGroup(fields=fields)
        
        # Fields from the 'fields' parameters
        for element in fields:
            if isinstance(element, tuple) and len(element) == 2 and isinstance(element[0],basestring): # Validator
                field_name = element[0]
                if not field_name in exclude:
                    class_dict[field_name] = element[1]
                    
            elif isinstance(element, basestring): # String
                try:
                    field = entity.get_db_field(element)                    
                    field_name = remove_id_from_field_name(element)    
                    if not field_name in exclude:
                        class_dict.update(create_schema_field(field_name, field))
                except KeyError:
                    # field not found...
                    pass
                
            else:
                raise ValueError("fields elements must be strings or '(id, Validator)' tuples")
                    
    else:
        # Validators from the entity's list of fields
        for field_name, field in entity.get_db_fields_map().iteritems():
#           if not field.info.get('target', None): # Remove '_id' from the relation field names
            field_name = remove_id_from_field_name(field_name)
            if not field_name in exclude:
                class_dict.update(create_schema_field(field_name, field))
         
    # Create the new class
    class_name = str(entity.__name__ + 'Schema')
    if exclude or fields or allow_extra_fields != None:
        class_name += "%d" % int(time.time() * 1000) # ~unique class name
    SchemaClass = type(class_name, (Schema,), class_dict)
    return SchemaClass


__all__= ['create_schema_class']

