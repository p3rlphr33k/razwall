#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2013 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from endian.emi.entities.types import ElixirManyToOne, ElixirManyToMany, ElixirOneToMany
from endian.emi.entities.fields import parse_field_options
from endian.validators.core import Multichoice

__all__ = [
    "ManyToOne",
    "ManyToMany",
    "OneToMany"
]

class ManyToOne(ElixirManyToOne):
    """
        Describes the child's side of a parent-child relationship.
    """
    
    def __init__(self, target, *args, **kwargs):
        """
            look at the parse_field_options documentation for additional params

            :param target: entity string to be used as target
            :type target: string
        """
        kwargs, info = parse_field_options(target=target, **kwargs)
        self._validator = None
        
        info['multi_value'] = False # show single select fields
        
        # XXX: add an default validator
        # if not info.get('validator', None):
        #     info['validator'] = None
        
        self.info = info
        
        ElixirManyToOne.__init__(self, target, *args, **kwargs)

class ManyToMany(ElixirManyToMany):
    """
        Represents the definition of a 'field' on an entity.
        This class represents a column on the table where the entity is stored.
    """
    
    def __init__(self, target, *args, **kwargs):
        """
            look at the parse_field_options documentation for additional params

            :param target: entity string to be used as target
            :type target: string
        """
        kwargs, info = parse_field_options(target=target, **kwargs)
        self._validator = None
        
        info['multi_value'] = True # show multi select fields
        
        # XXX: add an default validator
        # if not info.get('validator', None):
        #     info['validator'] = None
        
        self.info = info
        
        ElixirManyToMany.__init__(self, target, *args, **kwargs)

class OneToMany(ElixirOneToMany):
    """
        Represents the definition of a 'field' on an entity.
        This class represents a column on the table where the entity is stored.
    """
    
    def __init__(self, target, *args, **kwargs):
        """
            look at the parse_field_options documentation for additional params

            :param target: entity string to be used as target
            :type target: string
        """
        kwargs, info = parse_field_options(target=target, **kwargs)
        self._validator = None
        
        info['multi_value'] = True # show multi select fields
        
        if not info.get('validator', None):
            info['validator'] = Multichoice
        
        self.info = info
        
        ElixirOneToMany.__init__(self, target, *args, **kwargs)
