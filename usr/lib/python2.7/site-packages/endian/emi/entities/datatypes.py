#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from endian.emi.widgets import TextField, MultilineTextField, HugeTextField, CheckBox
from endian.emi.entities import types

from endian.validators.boolean import Bool
from endian.validators.core import UnicodeString, Number, Int, Multiline, ObjectId

__python_type_to_datatype = {}
__validator_to_datatype = {}
__db_column_to_datatype = {}


class Datatype(object):
    """
        Class that represents a Datatype
    """
    python_type = None
    validator = None
    widget = None
    db_column = None

    def __init__(self, python_type, validator, widget, db_column):
        self.python_type = python_type
        self.validator = validator
        self.widget = widget
        self.db_column = db_column

    def __str__(self):
        return "%s %s %s %s" % (self.python_type, self.validator, self.widget, self.db_column)


def register_datatype(python_type, validator, widget, db_column):
    """
        Register a new datatype
        
        :param python_type: python type (e.g. int, bool, str)
        :type python_type: python type
        :param validator: validator to be used for this type
        :type validator: validator
        :param widget: widget to be used for render this type
        :type widget: widget
        :param db_column: corresponding db column type
        :type db_column: sqlalchemy type
    """
    global __python_type_to_datatype, __validator_to_datatype, __db_column_to_datatype
    datatype = Datatype(python_type, validator, widget, db_column)
    __python_type_to_datatype[python_type] = datatype
    __validator_to_datatype[validator] = datatype
    if db_column:
        __db_column_to_datatype[db_column] = datatype


def lookup_datatype_by_python_type(python_type):
    global __python_type_to_datatype
    return __python_type_to_datatype[python_type]


def lookup_datatype_by_validator(validator):
    global __validator_to_datatype
    return __validator_to_datatype[validator]


def lookup_datatype_by_db_column(db_column):
    global __db_column_to_datatype
    try:
        return __db_column_to_datatype[db_column]
    except KeyError:
        return Datatype(str, UnicodeString, TextField, db_column)

#             python type  validator                  widget              db column type
# -----------------------  ------------------------   ------------------  ------------------
register_datatype(unicode, Multiline(UnicodeString),  MultilineTextField, types.Text)
register_datatype(unicode, Multiline(UnicodeString),  MultilineTextField, types.UnicodeText)
register_datatype(unicode, UnicodeString,             HugeTextField,      types.HugeText)
register_datatype(unicode, UnicodeString,             HugeTextField,      types.UnicodeHugeText)
register_datatype(str,     UnicodeString,             TextField,          types.String)
register_datatype(unicode, UnicodeString,             TextField,          types.Unicode)
register_datatype(bool,    Bool,                      CheckBox,           types.Boolean)
register_datatype(float,   Number,                    TextField,          types.Integer)
register_datatype(long,    Int,                       TextField,          types.Integer)
register_datatype(int,     Int,                       TextField,          types.Integer)

try:
    import bson.objectid
    register_datatype(bson.objectid.ObjectId, ObjectId,   TextField,          types.ObjectId)
except:
    pass

# Keep the order of the register_datatype commands !

__all__ = ['lookup_datatype_by_python_type']


if __name__ == "__main__":
    print lookup_datatype_by_validator(UnicodeString)
    print lookup_datatype_by_python_type(int)
    print lookup_datatype_by_python_type(str)
    print lookup_datatype_by_python_type(bool)
