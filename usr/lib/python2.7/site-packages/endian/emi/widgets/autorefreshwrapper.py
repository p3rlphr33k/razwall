#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#
"""
.. mod:: autorefreshwrapper - Contains the web-widget AutoRefreshWrapper.

.. synopsis:: Contains the web-widget AutoRefreshWrapper. 

.. automodule:: AutoRefreshWrapper
Contains the web-widget AutoRefreshWrapper.

.. moduleauthor:: Alber Maximilian
"""
__all__ = [
    'AutoRefreshWrapper'
]

from tw.forms import FormField
from tw.api import JSLink, CSSLink

from endian.emi.widgets.static import jquery_js

import simplejson

class AutoRefreshWrapper(FormField):
    """
    Wrappes widget and provides functionality to update the 
    content of it.

    The wrapper gets different parameters, and with
    those it updates the plugin content. You don't
    need to write own functions to make the time 
    managment, only the function which modifies the
    html.

    The init and update js functions, will be called in this
    order:
    
    * init, if a init function is defined. After pageload.
    * update, if load on page load is True. After pageload and
      after init.
    * update, if a update function is definde. Evry interval
      milliseconds.
    """

    template = "endian.emi.templates.autorefreshwrapper"
    engine_name = "mako"
    
    css = [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/autorefreshwrapper.css')
    ]
    
    javascript = [
        #has to be de first!
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/consolelogger.js'),
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/autorefreshwrapper.js', javascript=[jquery_js])
    ]
    
    jsInitFunction = ""
    """
    The js function, which should be called after retrieving
    init data from the fw.

    Example:

    <script>
    function init(json){
      // do some stuff
    }
    </script>
    In this case you have to set jsInitFunction equal to:
    "init".
    
    Be aware that with to simple names, they could appear in other
    scripts.
    """

    initURL = ""
    """
    The url, from which the plugin should retrieve the data
    for the init function. will default to updateURL if not set.

    Example:

    "/manage/status/mymodule/"
    """
    
    initParams = {}
    """
    The Params which needs to be send to the initURL via POST request.
    Will default to updateParams if not set and initURL was defaulted to updateURL.
    """
    
    jsUpdateFunction = ""
    """
    The js function, which should be called after retrieving
    update data from the fw.

    Example:

    <script>
    function update(json){
      // do some stuff
    }
    </script>
    In this case you have to set jsUpdateFunction equal to:
    "update".
    
    Be aware that with to simple names, they could appear in other
    scripts.
    """

    updateURL = ""
    """
    The url, from which the plugin should retrieve the data
    for the js update function.

    Example:

    "/manage/status/mymodule/"
    """
    
    updateParams = {}
    """
    The Params which needs to be send to the updateURL via POST request
    """
    
    loadOnPageLoad = False
    """
    Load the first json after page 
    """
    
    interval = 5000
    
    showLoadIndicator = True
    
    content = ""
    
    params = ["jsInitFunction",
              "initURL",
              "initParams",
              "jsUpdateFunction",
              "updateURL",
              "updateParams",
              "loadOnPageLoad",
              "interval",
              "showLoadIndicator",
              "content"]

    def __init__(self,
                 jsInitFunction=None,
                 initURL=None,
                 initParams=None,
                 jsUpdateFunction=None,
                 updateURL=None,
                 updateParams=None,
                 loadOnPageLoad=None,
                 interval=None,
                 showLoadIndicator=True,
                 content=None,
                 **params):
        """
        Initilaze the object.
        
        :param jsInitFunction:  The js function, which should be
          called after the page to load data from the fw.
          This function will be only called once, and will be
          called before the update functions.

          Example:

          <script>
          function init(json){
          // do some stuff
          }
          </script>
          In this case you have to set jsInitFunction equal to:
          "init".
          
          Be aware that with to simple names, they could appear in other
          scripts.
        :type jsInitFunction: String
        :param initURL: The url, from which the plugin should
          retrieve the data for the init function.

          Example:
          
          "/manage/status/mymodule/"
        :type initURL: String
        :param jsUpdateFunction: The js function, which should be
          called after retrieving update data from the fw.

          Example:

          <script>
          function update(json){
          // do some stuff
          }
          </script>
          In this case you have to set jsUpdateFunction equal to:
          "update".
          
          Be aware that with to simple names, they could appear in other
          scripts.
        :type jsUpdateFunction: String
        :param updateURL: The url, from which the plugin should
          retrieve the data for the update function.

          Example:
          
          "/manage/status/mymodule/"
        :type updateURL: String
        :param loadOnPageLoad: Load the first update json after page load.
        :type loadOnPageLoad: Bool
        :param interval: The update interval in milliseconds.
        :type interval: int
        :param showLoadIndicator: If the load indicator should be display,
          after the pageload until the init and first update function.
        :type showLoadIndicator: Bool
        :param content: The content to wrap.
        :type content: Either string or a displayable widget.
        """

        FormField.__init__(self, **params)
        if jsInitFunction:
            self.jsInitFunction = jsInitFunction
        if initURL:
            self.initURL = initURL
        if initParams:
            self.initParams = initParams
        if jsUpdateFunction:
            self.jsUpdateFunction = jsUpdateFunction
        if updateURL:
            self.updateURL = updateURL
        if updateParams:
            self.updateParams = updateParams
        if not self.initURL and self.updateURL:
            self.initURL = self.updateURL
            if not self.initParams:
                self.initParams = self.updateParams
        self.initParams = simplejson.dumps(self.initParams)
        self.updateParams = simplejson.dumps(self.updateParams)
        if loadOnPageLoad:
            self.loadOnPageLoad = loadOnPageLoad
        if interval:
            self.interval = interval
        if not showLoadIndicator:
            self.showLoadIndicator = showLoadIndicator
        if content:
            self.content = content
