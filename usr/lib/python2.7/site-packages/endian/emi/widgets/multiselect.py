#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import endian.core.i18n

from tw.forms import MultipleSelectField as MultipleSelectFieldBase

from static import *

__all__ = [
    'MultiSelect', #deprecated
    'MultipleSelectField',
    'TraditionalMultipleSelectField',
    'SmallMultipleSelectField',
    'MultipleSelectUplinks',
    'MultipleCheckField',
    'MultipleSelectFieldBase',
    'ChosenMultipleSelectField',
]

class TraditionalMultipleSelectField(MultipleSelectFieldBase):
    engine_name = "mako"
    template = "endian.emi.templates.multiselect_traditional"
    css_class = "multipleselectfield"

    params = [
        "size",
        "condition",
    ]

class SmallMultipleSelectField(MultipleSelectFieldBase):
    engine_name = "mako"
    template = "endian.emi.templates.multiselect_small"
    css = [
        jquery_multiselect_css,
    ]
    javascript = [
        jquery_multiselect,
    ]

    params = [
        "size",
        "condition",
    ]


class MultipleSelectUplinks(SmallMultipleSelectField):
    """Uplinks selector."""
    template = "endian.emi.templates.multiselect_uplinks"


class MultipleCheckField(MultipleSelectFieldBase):
    engine_name = "mako"
    template = "endian.emi.templates.multiselect_multicheck"
    css = [
        jquery_ui_multicheck_endian_css
    ]
    javascript = [
        jquery_ui_multicheck_endian
    ]

    params = [
        "size",
        "condition",
        "hide_label",
        "collapse_class",
        "expand_class",
        "not_selected",
        "selected",
        "partial",
        "groups",
        "text"
    ]

    hide_label = True
    collapse_class = "ui-icon-triangle-1-s"
    expand_class = "ui-icon-triangle-1-e"
    not_selected = "ui-icon-radio-on"
    selected = "ui-icon-bullet"
    partial = "ui-icon-radio-off"
    text = {
        "uncategorized" : _("Uncategorized"),
        "empty" : _('There are no items to select from.')
    }
    
    groups = []
    
    def __init__(self,
            id=None,
            text={},
            **args):
        self.text.update(text)
        super(MultipleCheckField, self).__init__(id=id, **args)

class MultipleSelectField(MultipleSelectFieldBase):
    engine_name = "mako"
    template = "endian.emi.templates.multiselect"
    css = [
        jquery_ui_multiselect_endian_css
    ]
    javascript = [
        jquery_ui_multiselect_endian,
    ]

    params = [
        "size",
        "condition",
        "title",
        "searchable",
        "sortable",
        "draggable",
        "animated",
        "showEffect",
        "hideEffect",
        "url",
        "data",
        "data_fields",
        "connectWith",
        "locale"
    ]
    
    title = None
    
    searchable = None
    sortable = None
    draggable = None
    
    animated = None
    showEffect = None
    hideEffect = None
    
    url = None
    data = None
    data_fields = None
    connectWith = []
    
    locale = {
        "searchHelp": _("Filter list of available items."),
        "addTo": _("Add as"),
        "addToHelp": _("Items will be added using this."),
        "selectedInHelp": "",
        "addHelp": "",
        "removeHelp": "",
        "addAll": _("Add all"),
        "addAllHelp": _("Only filtered items will be added (if filter is applied)."),
        "removeAll": _("Remove all"),
        "removeAllHelp": _("All items will be removed.")
    }
    
    def __init__(self,
            id=None,
            title="",
            searchable=True,
            sortable=False,
            draggable=True,
            animated="",
            showEffect="show",
            hideEffect="hide",
            url="",
            data="",
            data_fields=[],
            connectWith=[],
            **args):
        if self.title is None:
            self.title = title
        if self.searchable is None:
            self.searchable = searchable
        if self.sortable is None:
            self.sortable = sortable
        if self.draggable is None:
            self.draggable = draggable
        if self.animated is None:
            self.animated = animated
        if self.showEffect is None:
            self.showEffect = showEffect
        if self.hideEffect is None:
            self.hideEffect = hideEffect
        if self.url is None:
            self.url = url
        if self.data is None:
            self.data = data
        if self.data_fields is None:
            self.data_fields = data_fields
        if self.connectWith is None:
            self.connectWith = connectWith
        super(MultipleSelectField, self).__init__(id=id, **args)
    
    def update_params(self, d):
        super(MultipleSelectField, self).update_params(d)
        
        if (not self.sortable or self.connectWith):
            return
        
        # sort the selected values
        values = self.safe_validate(d['value'])
        options = d["options"]
        
        selected = []
        notselected = []
        first = True
        for v in values:
            for value, desc, attrs in options:
                if v == value:
                    selected.append((value, desc, attrs))
                    if not first:
                        break
                if value not in values:
                    notselected.append((value, desc, attrs))
            first = False
        options = selected
        options.extend(notselected)
        
        d["options"] = options

class ChosenMultipleSelectField(MultipleSelectFieldBase):
    """
    User-friendly multiple select field usign the "Chosen" JavaScript plugin
    """
    engine_name = "mako"
    template = "endian.emi.templates.multiselect_chosen"
    css = [
        jquery_chosen_css,
    ]
    javascript = [
        jquery_chosen,
    ]
    params = [
        "size",
        "condition",
    ]

MultiSelect = MultipleSelectField
