#!/usr/bin/env python
# encoding: utf-8
#
# +---------------------------------------------------------------------------+
# | EMI enterprise                                                            |
# +---------------------------------------------------------------------------+
# | Copyright (c) 2005-2006 Endian GmbH/Srl                                   |
# |      Endian GmbH/Srl                                                      |
# |      Bergweg 41 Via Monte                                                 |
# |      39057 Eppan/Appiano                                                  |
# |      ITALIEN/ITALIA                                                       |
# |      info@endian.it                                                       |
# +---------------------------------------------------------------------------+
# | This program is proprietary software; you are not allowed to redistribute |
# | and/or modify it.                                                         |
# | This program is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of            |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                      |
# +---------------------------------------------------------------------------+

import inspect
from endian.core.logger import *
import endian.core.i18n

try:
    from endian.emi.widgets import static_enterprise as static
except:
    info("emi enterprise static not available")
    from endian.emi.widgets import static

from endian.emi.widgets.gridcolumn import Column, ActionsColumn, CheckBoxColumn
from endian.emi.widgets.gridaction import *
from endian.emi.widgets.kendodata import KendoData

__all__ = [
    'KendoGrid'
]


class KendoGrid(KendoData):
    template = "endian.emi.templates.kendogrid"

    css = [
        static.kendo_custom_css
    ]
    javascript = [
        static.jquery_cookie,
        static.kendo_grid
    ]

    parameter_map = ""

    autobind = None

    ajax = None
    order_by = ""
    order_sort = ""
    disable_storage_filter_query = None

    page_size = None
    selectable = None  # row | multiple row | cell | multiple cell
    sortable = None
    search_keys = None
    exclude_from_search = None

    hide_header = None
    detail_template = None
    
    #: Single-row actions list, only filled if ActionsColum.dropdown == True
    single_items_actions = []
    #: Multi-row actions list
    multi_items_actions = []
    #: actions list for all rows (filtered)
    all_items_actions = []

    columns = None

    legend_enabled = True
    legend_fields = []

    on_grid_change = None
    on_data_bound = None
    on_detail_init = None
    on_detail_collapse = None
    on_detail_expand = None

    autorefresh_interval = None

    nestedgrid = None
    nestedgrid_filter_field = None
    nestedgrid_filter_value = None
    nestedgrid_server_filtering = False

    multicolumn_searchbar = None
    
    excel_export = False # this only works with emi-enterprise >= 3.1.2
    pdf_export = False # this only works with emi-enterprise >= 3.1.2
    
    # do not overwrite, will be set by the init function
    fields = []

    params = [
        # start KendoBase
        "entity",
        "controllername",
        "datasource",
        "cache",
        "url",
        "url_path",
        "data",
        "group",
        "server_aggregates",
        "server_filtering",
        "server_grouping",
        "server_paging",
        "server_sorting",
        "page_size",
        "order_by",
        "order_sort",
        "parameter_map",
        "on_change",
        # end KendoBase
        "autobind",
        "ajax",
        "disable_storage_filter_query",
        "selectable",
        "sortable",
        "search_keys",
        "exclude_from_search",
        "hide_header",
        "detail_template",
        "single_items_actions",
        "multi_items_actions",
        "all_items_actions",
        # events
        "on_grid_change",
        "on_data_bound",
        "on_detail_init",
        "on_detail_collapse",
        "on_detail_expand",
        # private
        "fields",
        "legend_enabled",
        "legend_fields",
        "autorefresh_interval",
        "nestedgrid",
        "nestedgrid_filter_field",
        "nestedgrid_filter_value",
        "nestedgrid_server_filtering",
        "multicolumn_searchbar",
        "excel_export",
        "pdf_export"
    ]

    def __init__(
            self,
            url_path="json_grid",  # overwrite default value
            page_size=20,
            autobind=True,
            ajax=True,
            disable_storage_filter_query=False,
            selectable=False,
            sortable=False,
            search_keys=[],
            exclude_from_search=[],
            hide_header=False,
            detail_template="",
            columns=[],
            on_grid_change="",
            on_data_bound="",
            on_detail_init="",
            on_detail_collapse="",
            on_detail_expand="",
            **params):
        super(KendoGrid, self).__init__(url_path=url_path, page_size=page_size, **params)
        if self.autobind is None:
            self.autobind = autobind
        if self.ajax is None:
            self.ajax = ajax
        if self.ajax:
            if self.server_aggregates is None:
                self.server_aggregates = True
            if self.server_filtering is None:
                self.server_filtering = True
            if self.server_grouping is None:
                self.server_grouping = True
            if self.server_paging is None:
                self.server_paging = True
            if self.server_sorting is None:
                self.server_sorting = True
        if self.disable_storage_filter_query is None:
            self.disable_storage_filter_query = disable_storage_filter_query
        if self.selectable is None:
            self.selectable = selectable
        if self.sortable is None:
            self.sortable = sortable
        if self.search_keys is None:
            self.search_keys = search_keys
        if self.entity:
            if not self.search_keys:
                self.search_keys = self.entity.search_keys
            if not self.search_keys:
                schema = self.entity.schemaClass()
                self.search_keys = schema.fields.keys()
        if self.exclude_from_search is None:
            self.exclude_from_search = exclude_from_search
        if self.entity and not self.exclude_from_search:
            self.exclude_from_search = self.entity.exclude_from_search
        if self.hide_header is None:
            self.hide_header = hide_header
        if self.detail_template is None:
            self.detail_template = detail_template
        if self.columns is None:
            self.columns = columns
        if self.on_grid_change is None:
            self.on_grid_change = on_grid_change
        if self.on_data_bound is None:
            self.on_data_bound = on_data_bound
        if self.on_detail_init is None:
            self.on_detail_init = on_detail_init
        if self.on_detail_collapse is None:
            self.on_detail_collapse = on_detail_collapse
        if self.on_detail_expand is None:
            self.on_detail_expand = on_detail_expand

        if self.nestedgrid is not None:
            self.nestedgrid = self.nestedgrid.__dict__

        # Adds the fields
        add_multi_checkbox = True
        fields = []
        for field in self.columns:
            if inspect.isclass(field) and issubclass(field, Column):
                field = field()
            # Adds the the grid all the multi-row actions
            if isinstance(field, ActionsColumn):
                self.multi_items_actions.extend(field.multi_items_actions)
                self.all_items_actions.extend(field.all_items_actions)

                if not field.actions:
                    continue
                
                if field.dropdown:
                    # we need the actions to define the onChange js trigger
                    self.single_items_actions.extend(field.actions)
                
                for action in field.actions:
                    self.legend_fields.extend(action._get_legend(single_action=True))
            if isinstance(field, CheckBoxColumn):
                if field.name == "ID":
                    add_multi_checkbox = False
                field.title = ""
                field.width = "30px"
                self.exclude_from_search.append(field.name)
            if isinstance(field, Column):
                # Set the field entity
                field.entity = self.entity
                # Set the field label if it is not set
                if not field.title:
                    try:
                        field.title = self.entity.get_db_field(fieldName).info.get('label', None) or field.name
                    except:
                        field.title = field.name
                fields.append(field)

        # Sort the fields
        if fields:
            fields.sort(lambda x, y: x.columnCount - y.columnCount)
            self.fields = fields

        # make sure we have a checkboxcolum if multi item actions are available
        if self.multi_items_actions and add_multi_checkbox:
            field = CheckBoxColumn(name='ID')
            field.title = ""
            field.width = "30px"
            self.exclude_from_search.append(field.name)
            fields.insert(0, field)

        if self.autorefresh_interval:
            if self.autorefresh_interval < 500:
                self.autorefresh_interval = 500
