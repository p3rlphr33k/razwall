#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from tw.forms import FieldSet, TableForm
from tw.api import Widget, js_function, js_callback

from endian.emi.widgets.static import *
from endian.emi.fieldset import FieldsGroup

__all__ = [
    'Container',
    'ChildContainer'
]

class Container(FieldSet):
    css_classes=["container"]
    css = [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/container.css', css=[style_css])
    ]
    template = "endian.emi.templates.container"
    engine_name = "mako"
    
    columns = 2
    expands = True
    strip_name = True
    show_labels = True
    show_error = True # do not show error for container widget, when child has error
    info_text = None
    separator = False
    
    toggle_name = None
    toggle_option = "on"
    toggle_function = None
    
    enctype = "application/x-www-form-urlencoded"
    
    params = [
        "expands",
        "show_labels",
        "columns",
        "info_text",
        "separator",
        "enctype"]

    def __init__(self, id=None, parent=None,
            info_text=None, separator=None,
            toggle_name=None, toggle_option="on", toggle_function=None,
            children=[], **kw):
        super(Container, self).__init__(id, parent, children, **kw)
        
        if info_text is not None:
            self.info_text = info_text
        if separator is not None:
            self.separator = separator
        if toggle_name is not None:
            self.toggle_name = toggle_name
        if toggle_option is not None:
            self.toggle_option = toggle_option
        if toggle_function is not None:
            self.toggle_function = toggle_function
        
        def getToggleCallbacks(name, options, function, callbacks=[], present=[]):
            if not name or not options:
                return callbacks, present
            if type(options) != list:
                options = [options]
            for option in options:
                if not option:
                    continue
                already_present = False
                for n, o in present:
                    if n == name and o == option:
                        already_present = True
                        break
                if already_present:
                    continue
                present.append((name, option))
                if ':' in name:
                    name, value = name.split(':', 2)
                    input_ = '$(\'input[name=%s][value=%s]\')' % (name, value)
                    
                    onchange = js_callback("function() { %s($(this).attr('name'), $(this).attr('value')); }" % (function and function or 'fieldTogglerClick'))
                    inputInit = js_callback("function() { %s($(this).attr('name'), $(this).attr('value')); }" % (function and function or 'fieldTogglerClick'))
                    
                    callback = "%s.live('change', %s); %s.livequery(%s);\n" % (input_,
                                                                               onchange,
                                                                               input_,
                                                                               inputInit)
                else:
                    select = '$(\'select[name=%s]\')' % name
                    input_ = '$(\'input[name=%s]\')' % name
                    
                    onchange = onkeyup = js_callback("function() { %s($(this).attr('name')); }" % (function and function or 'fieldTogglerChange'))
                    onclick = js_callback("function() { %s($(this).attr('name')); }" % (function and function or 'fieldTogglerClick'))
                    
                    selectInit = js_callback("function() { %s($(this).attr('name')); }" % (function and function or 'fieldTogglerChange'))
                    inputInit = js_callback("function() { %s($(this).attr('name')); }" % (function and function or 'fieldTogglerClick'))
                    
                    callback = "%s.change(%s).keyup(%s).each(%s); %s.click(%s).each(%s);\n" % (select,
                                                                                               onchange,
                                                                                               onkeyup,
                                                                                               selectInit,
                                                                                               input_,
                                                                                               onclick,
                                                                                               inputInit)
                callbacks.append(callback)
            return callbacks, present
        
        callbacks = []
        present = [] # already created
        callbacks, present = getToggleCallbacks(self.toggle_name, self.toggle_option, self.toggle_function, callbacks, present)
        for child in self.children:
            toggle_name = getattr(child, "toggle_name", None)
            toggle_option = getattr(child, "toggle_option", "on")
            toggle_function = getattr(child, "toggle_function", None)
            callbacks, present = getToggleCallbacks(toggle_name, toggle_option, toggle_function, callbacks, present)
        
        if getattr(self, "fields_group", None):
            for toggle_name, toggle_option, toggle_function in self.fields_group.getToggleList(): # recursive search with fields groups for toggle options
                callbacks, present = getToggleCallbacks(toggle_name, toggle_option, toggle_function, callbacks, present)
        
        if callbacks:
            self.javascript.append(JSLink(link='/toscawidgets/resources/endian.emi/static/js/container.js', javascript=[jquery_js, jquery_livequery]))
            self.add_call("$(document).ready(function() { %s });" % " ".join(callbacks))
    
    def update_params(self, d):
        d.error = None # do not show error for container widget, when child has error

        super(Container, self).update_params(d)
        # set linebreaks
        linebreak = []
        fieldcount = 0
        fieldnum = 0
        columns = d["columns"]
        fields_len = len(d["fields"])
        for field in d["children"]:
            fieldnum += 1
            fieldcount += 1
            if getattr(field, "expands", False):
                linebreak.append(True)
                fieldnum = 0
            elif fieldnum >= columns:
                linebreak.append(True)
                fieldnum = 0
            elif fieldcount >= fields_len:
                linebreak.append(True)
            else:
                linebreak.append(False)
        d["linebreak"] = linebreak
    
    def _get_child_value_getter(self, value):
        """
        Custom getter that returns values of contained items (for example fieldselector)
        """
        def value_getter(child_id):
            if value:
                if (hasattr(child_id, 'repetition') and 
                    isinstance(value,list)):
                    child_id = child_id.repetition
                # special threatment for containers, return the whole dict
                elif hasattr(child_id, "container") and child_id.container:
                    return value
                elif isinstance(child_id, Widget) and hasattr(value, 'keys'): # was isinstance(value,dict):
                    child_id = child_id._id
                try:
                    return value[child_id]
                except (IndexError,KeyError,TypeError):
                    None
        return value_getter

from deepforwarding import __DeepForwarding__
class ChildContainer(__DeepForwarding__, Container):
    """
    container which shouldnt be a root widget!!!
    but allows to pass errors and values to more than three levels
    """
    pass



if __name__ == "__main__":
    from tw.forms import TextField
    print Container(children=[TextField("test")])
