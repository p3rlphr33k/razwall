#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from tw.forms import InputField
from tw.api import Link, CSSLink, JSLink

import endian.core.i18n
from endian.core.commands import registerCommand
from endian.emi.status import register as registerStatus
from endian.emi.widgets.static import jquery_emi_switch

from endian.core.logger import logger

class Switch(InputField):
    template = "endian.emi.templates.switch"
    engine_name = "mako"
    
    css = [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/switch.css'),
        Link(link='/toscawidgets/resources/endian.emi/static/images/wait-small.gif'),
        Link(link='/toscawidgets/resources/endian.emi/static/images/switch_on.png'),
        Link(link='/toscawidgets/resources/endian.emi/static/images/switch_off.png')
    ]
    
    javascript = [
        jquery_emi_switch
    ]
    
    title = ""
    service = ""
    expands = False
    show_error = True
    key = ""

    reload_on_enable = "false"
    reload_on_disable = "false"
    
    params = ['title', 'key', 'reload_on_enable', 'reload_on_disable']
    
    def __init__(self, controller=None, entity=None, storage=None, key=None, action=None, check=None, **params):
        """
        ... __init__:::
        
        Initialices Switch Widget
        
        :param storage: Use this to read / write status of the service
        :type pkg: Storage
        :param key: key in the storage
        :type key: string
        :param action: action which will be executed after the status of the
                       service is switched
        :type action: function
        :param check: execute this check before switching the status
                      returns tuple success(bool), error(string)
        :type check: function
        """
        InputField.__init__(self, **params)
        self.title = self.label_text
        self.label_text = None
        
        if not key:
            key = self.name
        self.key = key
        
        if controller:
            self.controller = controller
            self.title = controller.switch_title

            if controller.reload_on_enable:
                self.reload_on_enable = "true"
            else:
                self.reload_on_enable = "false"
            if controller.reload_on_disable:
                self.reload_on_disable = "true"
            else:
                self.reload_on_disable = "false"

        elif (entity or storage) and key:
            from endian.emi.controllers import SwitchController
            self.controller = SwitchController(entity=entity,
                                               storage=storage,
                                               key=key,
                                               action=action,
                                               check=check)
            
        def switch():
            """
            toggle the value of the key form on to off or off to on
            """
            
            return self.controller.switch()
        
        def status():
            """
            return current status
            """
            return self.controller.status()
        
        registerCommand("commands.switch.%s" % key, switch)
        registerStatus("status.switch.%s" % key, status)
    
    def update_params(self, d):
        super(Switch, self).update_params(d)
        d.key = self.key
        enabled = self.controller.status()['status']
        if enabled:
            status = "on"
        else:
            status = ""
        d.enabled = enabled
        d.status = status
        d.reload_on_enable = self.reload_on_enable
        d.reload_on_disable = self.reload_on_disable

__all__ = ["Switch"]