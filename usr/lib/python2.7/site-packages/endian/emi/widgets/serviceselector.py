#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from tw.api import Link, CSSLink, JSLink, js_function, js_callback
from static import jquery_js
import endian.core.i18n

from tw.forms import TextArea
from endian.emi.widgets import Container, SingleSelectField

SERVICES = [
]
PROTOCOLS = [
("", "<ANY>"),
("tcp", "TCP"),
("tcp+udp", "TCP & UDP"),
("udp", "UDP"),
("icmp", "ICMP"),
("esp", "ESP"),
("gre", "GRE")
]

class ServiceSelector(Container):
    css_classes = ["serviceselector"]
    
    css = Container.css + [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/serviceselector.css')
    ]
    javascript = Container.javascript + [
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/serviceselector.js', javascript=[jquery_js])
    ]
    
    strip_name = True
    
    services = SERVICES
    protocols = PROTOCOLS
    
    label_text = _("Service/Port")
    
    columns = 3
    expands = True
    engine_name = "mako"
    
    def __init__(self, id=None, parent=None, children=[], service_key="service", protocol_key="protocol", dport_key="dport", sport_key=None, services=SERVICES, protocols=PROTOCOLS, **kw):
        
        self.service_key = service_key
        self.protocol_key = protocol_key
        self.dport_key = dport_key
        self.sport_key = sport_key
        self.services = services
        self.protocols = protocols
        
        if self.sport_key:
            self.columns = 4
        
        # callbacks for updating service and protocol/port
        updateService = js_callback("function() { updateService('%s', '%s', '%s'); }" % (protocol_key, service_key, dport_key))
        selectService = js_callback("function() { selectService('%s', '%s', '%s'); }" % (protocol_key, service_key, dport_key))
        # set service on load
        self.add_call("$(document).ready(%s);" % updateService)
        
        # set service on change of protocol/port
        callback = js_callback("function() { \
                $('select[name=%s]').change(%s); \
                $('textarea[name=%s]').keyup(%s); \
            }" % (protocol_key, updateService, dport_key, updateService))
        self.add_call("$(document).ready(%s);" % callback)
        
        # set protocol/port on service change
        callback = js_callback("function() { \
                $('select[name=%s]').change(%s); \
            }" % (service_key, selectService))
        self.add_call("$(document).ready(%s);" % callback)
    
    def update_params(self, d):
        super(ServiceSelector, self).update_params(d)
        d["wservice"] = d["children"][0]
        d["wprotocol"] = d["children"][1]
        d["wdport"] = d["children"][2]
        if self.sport_key == 4:
            d["wsport"] = d["children"][3]
        else:
            d["wsport"] = None
        
def getServiceSelector(id=None, service_key="service", protocol_key="protocol", dport_key="dport", sport_key=None, services=SERVICES, protocols=PROTOCOLS):
    children = []
    children.append(SingleSelectField(service_key, label_text=_("Service"), options=services))
    children.append(SingleSelectField(protocol_key, label_text=_("Protocol"), options=protocols))
    children.append(TextArea(dport_key, label_text=_("Destination port (one per line)")))
    if sport_key:
        children.append(TextArea(sport_key))
    
    return ServiceSelector(id=id,
        children=children,
        service_key=service_key,
        protocol_key=protocol_key,
        dport_key=dport_key,
        sport_key=sport_key)

SERVICES_TEXT = """<ANY>,any,any
User defined,,
<ALL>,0:65535,tcp+udp
DNS,53,tcp+udp
Direct X games,47624,tcp
FTP,21,tcp
Finger,79,tcp
Gopher,70,tcp
H323 (NetMeeting),1720,tcp
HTTP,80,tcp
HTTPS,443,tcp
High ports,1024:65535,tcp+udp
ICQ,5190:5194,tcp
IMAP,143,tcp
IMAP over SSL,993,tcp
IRC,6667:7000,tcp
Ident,113,tcp
LDAP,389,tcp
Low ports,1:1023,tcp+udp
MSN Messenger,1863,tcp
NTP,123,tcp+udp
NNTP,119,tcp
OpenVPN,1194,tcp+udp
PC Anywhere,5631,tcp+udp
POP3,110,tcp
POP3 over SSL,995,tcp
Real Audio,7070,tcp
SFTP,115,tcp
SIP,5060,udp
SMB All,137:139,tcp+udp
SMB DGM,138,tcp+udp
SMB NS,137,tcp+udp
SMB SSN,139,tcp+udp
SMTP,25,tcp
SNMP,161:162,tcp+udp
SOCKS,1080,tcp+udp
SSH,22,tcp
Sun RPC,111,tcp+udp
Syslog,514,udp
Telnet,23,tcp
TFTP,69,udp
UDP Traceroute,33434:33600,udp"""

for service in SERVICES_TEXT.split("\n"):
    service = service.split(",")
    SERVICES.append(["%s/%s" % (service[1], service[2]), service[0]])
 
if __name__ == "__main__":
    s = getServiceSelector(service_key="service", dport_key="dport")
    # s = getServiceSelector(protocol="tcp", service="").display()
    print s
    print dir(s)

__all__ = [
    'ServiceSelector',
    'getServiceSelector'
]
