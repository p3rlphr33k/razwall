#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

"""
.. mod:: draganddropsort - Contains the emi-widget DragAndDropSort.

.. synopsis:: Contains the emi-widget DragAndDropSort.

.. automodule:: draganddropsort

Contains the emi-widget DragAndDropSort.

.. moduleauthor:: Alber Maximilian
"""
__all__ = [
    'DragAndDropSort'
]

from tw.forms import FieldSet
from tw.api import CSSLink, JSLink

import endian.core.i18n
from endian.emi.widgets.static import\
    jquery_js,\
    jquery_ui_sortable

class WrongChildrenCountException(Exception):
    """
    If the children count is not equal to
    the sum of the column description.
    """
    pass

class DragAndDropSort(FieldSet):
    """
    Provides a columnbased drag and drop sort of widgets.
    
    With a callback you can trace the modification of the
    sort.
    """
    
    template = "endian.emi.templates.draganddropsort"
    engine_name = "mako"
    
    css = [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/draganddropsort.css'),
    ]
    
    javascript = [
        #has to be de first!
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/consolelogger.js'),
        jquery_ui_sortable,
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/draganddropsort.js')
    ]
    
    columns = []
    """
    Example:
    * child 0 and 2 in the first column, child 1 in the second row
      [[0,2],[1]]
    """
    
    callBackURL = ""
    """
    send request to this url on widget change
    
    * id=id,sort='childId=position,...' , where id is the id of the widget,
      childId is the id of a child, position the new position in the
      childrenlist(beginning by 0).
    
    The widget will send always the position for all children.
    If the callback is "", no request will be done.
    """
    
    params = [
        "columns",
        "callBackURL"
    ]
    
    def __init__(self,
                 columns=[],
                 callBackURL="",
                 **params):
        """
        :param columns: list with columns/rows and the index of the child
        :type columns: dict
        :param callBackURL: send request to this url on widget change
        :type callBackURL: string
        """
        FieldSet.__init__(self, **params)
        
        if not self.columns and columns:
            self.columns = columns
        if not self.columns:
            self.columns = self.sortChildren()
        
        if not self.callBackURL:
            self.callBackURL = callBackURL
    
    def sortChildren(self):
        columns = []
        columns.append([])
        for i in range(len(self.children)):
            columns[0].append(i)
        return columns
