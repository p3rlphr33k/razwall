#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import urllib

from UserDict import DictMixin
from tw.api import Widget

from endian.core import logger
import endian.core.i18n

from endian.emi.cookies import *
from endian.emi.framework import request
from endian.emi.widgets.static import CSSLink, JSLink
from endian.emi.tg import jsonify


class JoinedDict(DictMixin):

    def __init__(self, *dicts):
        self.dicts = dicts

    def __getitem__(self, item):
        for dict_ in self.dicts:
            try:
                return dict_.__getitem__(item)
            except KeyError:
                pass
        raise KeyError(item)

    def __setitem__(self, key, item):
        for dict_ in self.dicts:
            if not isinstance(dict_, dict) or key not in dict_:
                continue
            try:
                dict_.__setitem__(key, item)
                return
            except KeyError:
                pass
        raise KeyError(key)


class Action(object):
    actions = None
    permission = None
    name = None
    dropdown_name = None
    title = None
    multi_title = None
    all_title = None
    fallback_title = None
    onClickAjax = "%(ONCLICK)s jQuery('#action_%(CONTROLLERNAME)s_%(NAME)s_%(idValue)s').emigridaction({ \
request_type: '%(AJAX_REQUEST_TYPE)s', \
gridid: '%(GRIDID)s', \
idfield: '%(idField)s', \
controllername: '%(CONTROLLERNAME)s', \
link: '%(LINK)s', \
errormessage: '%(AJAX_ERRORMESSAGE)s', \
beforeExecute: %(AJAX_BEFORE_EXECUTE)s, \
onExecute: %(AJAX_ON_EXECUTE)s, \
onSuccess: %(AJAX_ON_SUCCESS)s, \
onError: %(AJAX_ON_ERROR)s, \
onComplete: %(AJAX_ON_COMPLETE)s, \
multi: %(MULTI)s, \
all: %(ALL)s}, \
%(AJAX_DATA)s); return false;"
    onClick = ""  # needed to add additional onclick action to a multi_itmes_action
    multiOnClick = ""  # needed to add additional onclick action to a multi_itmes_action. defaults to onClick
    allOnClick = ""  # needed to add additional onclick action to a multi_itmes_action. defaults to onClick
    multiOnClickOverride = ""  # completely override the onClick attribute for multi-col action
    allOnClickOverride = ""  # completely override the onClick attribute for all-col action
    extraOpts = ""
    extraArgs = ""
    extraFields = ""
    skipFirst = False
    skipLast = False
    image = ""
    fallback_image = ""
    link = "%(REQUEST_PATH)s?ACTION=%(NAME)s&CONTROLLERNAME=%(CONTROLLERNAME)s&%(idField)s=%(idValue)s%(EXTRAARGS)s"
    multi_link = "%(REQUEST_PATH)s?ACTION=%(NAME)s&CONTROLLERNAME=%(CONTROLLERNAME)s%(EXTRAARGS)s"
    all_link = "%(REQUEST_PATH)s?ACTION=%(NAME)s&CONTROLLERNAME=%(CONTROLLERNAME)s%(EXTRAARGS)s"
    condition = None
    idField = "ID"
    template = """<a id="action_%(CONTROLLERNAME)s_%(NAME)s_%(idValue)s" class="gridaction" name="action" href="%(LINK)s" title="%(TITLE)s" onclick="%(ONCLICK)s" %(EXTRAOPTS)s>
    <img class="" width="16" height="16" src="%(IMG)s" alt="%(TITLE)s" border="0" />
</a>"""
    dropdown_template = """<option id="action_%(CONTROLLERNAME)s_%(DROPDOWN_NAME)s_single" value="%(idValue)s">%(TITLE)s</option>"""
    multi_template = """<option id="action_%(CONTROLLERNAME)s_%(DROPDOWN_NAME)s_multi">%(TITLE)s</option>"""
    all_template = """<option id="action_%(CONTROLLERNAME)s_%(DROPDOWN_NAME)s_all">%(TITLE)s</option>"""

    columnCount = -1
    single_item_action = True   # If true, the action is displayed in the actions column
    multi_items_action = False  # If true, the action is a multi-items action and is displayed after the items grid, this currently only works with kendo grid
    all_items_action = False  # If true, the action is a all-items action and is displayed after the items grid
    exec_in_overlayer = False
    naked_to_standalone = False  # Force the use of /standalone instead of /naked in form path

    ajax_support = False # action support ajax
    ajax_request_type = "GET"
    ajax_errormessage = _("Action could not be performed.")
    ajax_before_execute = "null"
    ajax_on_execute = "null"
    ajax_on_success = "null"
    ajax_on_error = "null"
    ajax_on_complete = "null"
    ajax_before_multi_execute = "null"
    ajax_on_multi_execute = "null"
    ajax_on_multi_success = "null"
    ajax_on_multi_error = "null"
    ajax_on_multi_complete = "null"
    ajax_before_all_execute = "null"
    ajax_on_all_execute = "null"
    ajax_on_all_success = "null"
    ajax_on_all_error = "null"
    ajax_on_all_complete = "null"

    command = None  # execute this command on click, only supported with ajax
    command_args = {}
    multi_command = None
    multi_command_args = {}
    all_command = None
    all_command_args = {}

    def _createLinkByName(self, name):
        return "/toscawidgets/resources/endian.emi/static/images/action_%s.png" % name

    def _get_legend(self, single_action=False):
        if single_action and not self.single_item_action:
            return []
        imagepath = self.image
        if not imagepath:
            imagepath = self._createLinkByName(self.name)
        return [{'title': self.title, 'pic': imagepath}]

    def _prepare(self, args, gridid="", controllername="", ajax=False, multi=False, all_=False, dropdown=False):
        if not self.image:
            self.image = self._createLinkByName(self.name)
        if not self.image.startswith("/"):
            self.image = self._createLinkByName(self.image)

        strID = args.get(self.idField)
        if all_:
            strID = 'all'
        elif multi:
            strID = 'multi'
        elif strID is None:
            strID = ''
        else:
            strID = str(strID)

        try:
            if all_ and self.all_title:
                title = self.all_title % args
            elif multi and self.multi_title:
                title = self.multi_title % args
            else:
                title = self.title % args
        except:
            title = self.fallback_title % args

        try:
            image = self.image % args
        except:
            image = self.fallback_image % args

        onClickOverride = False
        if all_ and self.allOnClickOverride:
            onClickOverride = True
            onClick = self.allOnClickOverride % args
        elif all_ and self.allOnClick:
            onClick = self.allOnClick % args
        elif multi and self.multiOnClickOverride:
            onClickOverride = True
            onClick = self.multiOnClickOverride % args
        elif multi and self.multiOnClick:
            onClick = self.multiOnClick % args
        else:
            onClick = self.onClick % args

        if all_ and self.all_command:
            command = self.all_command
        elif multi and self.multi_command:
            command = self.multi_command
        else:
            command = self.command

        myargs = { 'NAME': self.name,
                   'DROPDOWN_NAME': self.dropdown_name or self.name,
                   'TITLE': title,
                   'ONCLICK': onClick,
                   'EXTRAARGS': self.extraArgs % args,
                   'EXTRAOPTS': self.extraOpts % args,
                   'EXTRAFIELDS': self.extraFields % args,
                   'IMG': image,
                   'LINK': "",
                   'GRIDID': "%s" % gridid or "",
                   'CONTROLLERNAME': controllername or "",
                   'REQUEST_PATH': "",
                   'AJAX_REQUEST_TYPE': self.ajax_request_type in ["GET", "POST"] and self.ajax_request_type or "GET",
                   'AJAX_DATA': 'null',
                   'AJAX_BEFORE_EXECUTE': 'null',
                   'AJAX_ON_EXECUTE': 'null',
                   'AJAX_ON_SUCCESS': 'null',
                   'AJAX_ON_ERROR': 'null',
                   'AJAX_ON_COMPLETE': 'null',
                   'AJAX_ERRORMESSAGE': '',
                   'COMMAND': command,
                   'MULTI': multi and 'true' or 'false',
                   'ALL': all_ and 'true' or 'false',
                   'idField': self.idField,
                   'idValue': urllib.quote(strID),
                   self.idField: args.get(self.idField) }

        # Use JoinedDict instead of join the two object,
        # because args can be something different from a dict (e.g. an entities)
        # and joining the dict causes the loading of all the relations
        myargs = JoinedDict(args, myargs)

        # link may need values like idField or idValue
        command_args = {}
        if command:
            if all_ and self.all_command_args:
                # map command_args with args
                for key, value in self.all_command_args.iteritems():
                    command_args[key] = myargs[value]
            elif multi and self.multi_command_args:
                # map command_args with args
                for key, value in self.multi_command_args.iteritems():
                    command_args[key] = myargs[value]
            else:
                # map command_args with args
                for key, value in self.command_args.iteritems():
                    command_args[key] = myargs[value]
            link = "/manage/commands/json/%(COMMAND)s"
        elif all_ and self.all_link:
            link = self.all_link
        elif multi and self.multi_link:
            link = self.multi_link
        else:
            link = self.link

        # in order to make a valid ajax request we need the request path in the link
        if ajax and self.ajax_support:
            myargs['REQUEST_PATH'] = "%s/json" % request.path_info

        myargs['LINK'] = link % myargs

        if ajax and self.ajax_support:
            def escape_quote(s):
                return s.replace("'","\\'")
            # get root path
            myargs['AJAX_DATA'] = jsonify.dumps(command_args).replace('"', "'")
            if all_:
                myargs['AJAX_BEFORE_EXECUTE'] = self.ajax_before_all_execute % myargs
                myargs['AJAX_ON_EXECUTE'] = self.ajax_on_all_execute % myargs
                myargs['AJAX_ON_SUCCESS'] = self.ajax_on_all_success % myargs
                myargs['AJAX_ON_ERROR'] = self.ajax_on_all_error % myargs
                myargs['AJAX_ON_COMPLETE'] = self.ajax_on_all_complete % myargs
            elif multi:
                myargs['AJAX_BEFORE_EXECUTE'] = self.ajax_before_multi_execute % myargs
                myargs['AJAX_ON_EXECUTE'] = self.ajax_on_multi_execute % myargs
                myargs['AJAX_ON_SUCCESS'] = self.ajax_on_multi_success % myargs
                myargs['AJAX_ON_ERROR'] = self.ajax_on_multi_error % myargs
                myargs['AJAX_ON_COMPLETE'] = self.ajax_on_multi_complete % myargs
            else:
                myargs['AJAX_BEFORE_EXECUTE'] = self.ajax_before_execute % myargs
                myargs['AJAX_ON_EXECUTE'] = self.ajax_on_execute % myargs
                myargs['AJAX_ON_SUCCESS'] = self.ajax_on_success % myargs
                myargs['AJAX_ON_ERROR'] = self.ajax_on_error % myargs
                myargs['AJAX_ON_COMPLETE'] = self.ajax_on_complete % myargs
            myargs['AJAX_ERRORMESSAGE'] = escape_quote(self.ajax_errormessage)
            myargs['LINK'] = myargs['LINK'].replace('/json_grid', '')
            myargs['LINK'] = myargs['LINK'].replace('/naked_grid', '')
            myargs['LINK'] = myargs['LINK'].replace('/naked', '')
            myargs['LINK'] = myargs['LINK'].replace('/standalone', '')
            if not onClickOverride:
                myargs['ONCLICK'] = self.onClickAjax % myargs
            myargs['LINK'] = "#"
        else:
            myargs['LINK'] = myargs['LINK'].replace('/json_grid', '')

        return myargs

    def render(self, args, gridid="", controllername="", ajax=False, multi=False, all_=False, dropdown=False):
        # check if condition is set an in case if it's met
        if callable(self.condition):
            if not self.condition(args):
                return ""

        # check authorization
        if self.permission and self.actions.entity and self.actions.entity.acl:
            if not self.actions.entity.acl.has_permission(self.permission, hasAccess=True):
                return ""

        myargs = self._prepare(args=args, gridid=gridid, controllername=controllername, ajax=ajax, multi=multi, all_=all_, dropdown=dropdown)

        if all_:
            return self.all_template % myargs
        elif multi:
            return self.multi_template % myargs
        elif dropdown:
            return self.dropdown_template % myargs
        return self.template % myargs

    def get_onchange(self, args, gridid="", controllername="", ajax=False, multi=False, all_=False):
        # check if condition is set an in case if it's met
        if callable(self.condition):
            if not self.condition(args):
                return ""

        # check authorization
        if self.permission and self.actions.entity and self.actions.entity.acl:
            if not self.actions.entity.acl.has_permission(self.permission, hasAccess=True):
                return ""

        if not multi and not all_:
            if self.idField not in args:
                args[self.idField] = "ACTION_ID_VALUE"
        myargs = self._prepare(args=args, gridid=gridid, controllername=controllername, ajax=ajax, multi=multi, all_=all_)
        if not multi and not all_:
            myargs['idValue'] = 'single'
            myargs['LINK'] = myargs['LINK'].replace('ACTION_ID_VALUE', "'+action_id_value+'")
            if self.ajax_support:
                myargs['ONCLICK'] = myargs['ONCLICK'].replace('ACTION_ID_VALUE', "'+action_id_value+'")
            else:
                myargs['ONCLICK'] = "%swindow.location = '%s';" % (myargs['ONCLICK'], myargs['LINK'])

        return """if ($(select).find(':selected')[0].id == 'action_%(CONTROLLERNAME)s_%(DROPDOWN_NAME)s_%(idValue)s') {
            var action_id_value = $(select).val();
            $(select).val(0);
            %(ONCLICK)s
        }
        """ % myargs

    def get_image(self):
        if not self.image:
            self.image = self._createLinkByName(self.name)
        if not self.image.startswith("/"):
            self.image = self._createLinkByName(self.image)
        return self.image


class DeleteAction(Action):
    ajax_support = True

    name = "delete"
    title = _("Delete")
    permission = "delete"


class DeleteConfirmAction(Action):
    multi_items_action = True
    all_items_action = True

    ajax_support = True

    name = "delete"
    title = _("Delete")
    multi_title = _("Delete selected")
    all_title = _("Delete all")

    _confirm = "if (! confirm('%s')) {return false};"
    onClick = _confirm % _("Do you want to delete this record?")
    multiOnClick = _confirm % _("Do you want to delete the selected records?")
    allOnClick = _confirm % _("Do you want to delete all records?")

    permission = "delete"


class EditAction(Action):
    ajax_support = False # XXX: implement ajax support with custom js

    name = "edit"
    title = _("Edit")


class EditInOverlayerAction(Action):
    name = "edit"
    title = _("Edit")
    link = "naked_edit?ACTION=edit&ID=%(id)s"
    extraOpts = "rel='#overlay'"


class EditInOverlayerIFrameAction(Action):
    name = "edit"
    title = _("Edit")
    link = "standalone_edit?ACTION=edit&ID=%(id)s"
    extraOpts = "rel='#overlay_with_frame'"


class MoveUpAction(Action):
    ajax_support = True

    name = "moveUp"
    title = _("Move Up")
    skipFirst = True


class MoveDownAction(Action):
    ajax_support = True

    name = "moveDown"
    title = _("Move Down")
    skipLast = True


class EnableAction(Action):
    multi_items_action = True
    all_items_action = True

    ajax_support = True

    name = "enable"
    title = _("Enable")
    multi_title = _("Enable selected")
    all_title = _("Enable all")
    idKey = "enabled"
    permission = "enable"

    def render(self, args, **kargs):
        enabled = str(args.get(self.idKey)).lower() in ["on", "true", "1"]
        if enabled:
            self.title = _("Disable")
            self.image = self._createLinkByName("enable_on")
            self.extraArgs = "&%s=off" % self.idKey
        else:
            self.title = _("Enable")
            self.image = self._createLinkByName("enable_off")
            self.extraArgs = "&%s=on" % self.idKey
        return Action.render(self, args, **kargs)

    def _get_legend(self, **kargs):
        return [
            {
                'title': _("Enabled (click to disable)"),
                'pic': self._createLinkByName('enable_on')
            },
            {
                'title': _("Disabled (click to enable)"),
                'pic': self._createLinkByName('enable_off')
            }
        ]


class ActiveAction(EnableAction):
    name = "active"
    idKey = "activated"
    permission = "enable"


class DisableAction(Action):
    single_item_action = False
    multi_items_action = True
    all_items_action = True

    ajax_support = True

    name = "disable"
    title = _("Disable")
    multi_title = _("Disable selected")
    all_title = _("Disable all")
    idKey = "enabled"
    permission = "enable"

class SaveAction(Action):
    single_item_action = False
    multi_items_action = True
    all_items_action = True

    ajax_support = True

    name = "multiStore"
    title = _("Save")
    multi_title = _("Save selected")
    all_title = _("Save all")
    permission = "store"

class AlertAction(Action):
    name = "alert"
    link = "#"
    onClick = "return false;"
    title = _("Alert")

    def condition(self, args):
        raise NotImplementedError()

class DownloadAction(Action):
    name = "download"
    title = _("Download")
    link = "download?%(idField)s=%(idValue)s"

__all__ = [
    'Action',
    'DeleteAction',
    'DeleteConfirmAction',
    'EditAction',
    'EditInOverlayerAction',
    'EditInOverlayerIFrameAction',
    'MoveUpAction',
    'MoveDownAction',
    'EnableAction',
    'DisableAction',
    'ActiveAction',
    'SaveAction',
    'AlertAction',
    'DownloadAction'
]


