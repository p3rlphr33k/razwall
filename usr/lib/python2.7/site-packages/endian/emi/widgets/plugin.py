#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from tw.forms import FormField
from tw.api import CSSLink

from endian.emi.widgets.static import jquery_js
from endian.emi.widgets.draganddropsort import DragAndDropSort
from endian.emi.widgets.autorefreshwrapper import AutoRefreshWrapper
from endian.emi.widgets.closeablecontainer import CloseableContainer

from endian.core.commands import registerCommand
from endian.core import logger

class PluginSort(DragAndDropSort):
    """
    A drag and drop sort with the the dashboard plugins.
    """
    
    entity = None
    storage = None
    
    commandName = None
    
    plugins = {}
    
    def __init__(self, entity=None, commandName="pluginsort", **params):
        if not self.commandName:
            self.commandName = commandName
        if entity:
            self.entity = entity
        if self.entity:
            self.storage = self.entity.storage()
        
        closeableCommand = "commands.%s.updateCloseable" % self.commandName
        sortCommand = "commands.%s.updateSort" % self.commandName
        
        def updateCloseable(id="", status="opened"):
            return self.updateCloseable(id=id, status=status)
        
        def updateSort(id="", sort=""):
            return self.updateSort(id=id, sort=sort)
        
        for plugin in self.getPlugins():
            name = plugin.get("name")
            enabled = plugin.get("enabled")
            closed = plugin.get("closed")
            interval = plugin.get("interval")
            Child = self.plugins.get(name)
            if not Child:
                continue
            self.children.append(
                Child(id=name,
                      interval=interval,
                      closed=closed,
                      callBackURL="/manage/commands/%s" % closeableCommand)
            )
        
        DragAndDropSort.__init__(self, **params)
        
        self.callBackURL = "/manage/commands/%s" % sortCommand
        
        registerCommand(closeableCommand, updateCloseable)
        registerCommand(sortCommand, updateSort)
    
    def getPlugins(self):
        if not self.storage:
            raise NotImplementedError()
        return self.storage.load()
    
    def sortChildren(self):
        """
        .. resortPlugins:: sortChildren
        
        Resorts the plugins.
        """
        columns = [[], []]
        plugins = self.getPlugins()
        index = -1
        for child in self.children:
            index += 1
            plugin = None
            for p in plugins:
                if p.get("name") == child.__class__.__name__:
                    plugin = p
                    break
            if not plugin:
                continue
            enabled = plugin.get("enabled")
            if not enabled:
                continue
            name = plugin.get("name")
            try:
                column = int(plugin.get("column"))
                if column < 0:
                    column = 0
            except:
                column = 0
            try:
                row = int(plugin.get("row"))
                if row < 0:
                    row = 0
            except:
                row = 0
            while len(columns) < column+1:
                columns.append([])
            done = False
            while not done:
                while len(columns[column]) < row+1:
                    columns[column].append(None)
                if not columns[column][row] and columns[column][row] != 0:
                    columns[column][row] = index
                    done = True
                else:
                    row += 1
        return columns
    
    def updateCloseable(self, id="", status="opened"):
        """
        Updates the the closed status of a plugin in the 
        datasource and reloads the plugins.
        
        :param id: The id of the plugin.
        :type id: String
        :param status: "opend" if the plugin is open, otherwise "closed".
        :type status: String
        :return: 0 on Success
        :rtype: Int
        """
        if not self.storage:
            raise NotImplementedError()
        for plugin in self.storage.load():
            name = plugin.get("name")
            enabled = plugin.get("enabled")
            if name == id and enabled:
                if status == "opened":
                    plugin["closed"] = False
                else:
                    plugin["closed"] = True
                self.storage.store(plugin, id=plugin.ID)
                return 0
        return 1
    
    def updateSort(self, id="", sort=""):
        """
        Updates the the closed status of a plugin in the 
        datasource and reloads the plugins.
        
        :param id: The id of the plugin.
        :type id: String
        :param sort: String of the form: id=(col,row)[id=(col,row)]
          where id is a plugin id and col and row are the position of it.
        :type sort: String
        :return: 0 on Success
        :rtype: Int
        """
        if not self.storage:
            raise NotImplementedError()
        
        plugins = {}
        try:
            sort = sort[:-1].split("),")
        except:
            sort = []
        for plugin in sort:
            name = plugin.split("=(")[0]
            pos = plugin.split("=(")[1]
            plugins[name] = [int(pos.split(",")[0]), int(pos.split(",")[1])]
        
        for plugin in self.storage.load():
            name = plugin.get("name")
            enabled = plugin.get("enabled")
            if name in plugins and enabled:
                plugin["column"] = str(plugins[name][0])
                plugin["row"] = str(plugins[name][1])
                self.storage.store(plugin, id=plugin.ID)
        
        return 0

class Plugin(AutoRefreshWrapper):
    pluginName = ""
    pluginDescription = ""
    
    def __init__(self,
                 pluginName="",
                 pluginDescription="",
                 **params):
        if pluginName:
            self.pluginName = pluginName
        if pluginDescription:
            self.pluginDescription = pluginDescription
        AutoRefreshWrapper.__init__(self, **params)

class CloseablePlugin(CloseableContainer):
    css = CloseableContainer.css + [
          CSSLink(link='/toscawidgets/resources/endian.emi/static/css/plugin.css')
    ]
    
    pluginName = ""
    pluginDescription = ""
    
    def __init__(self,
                 pluginName="",
                 pluginDescription="",
                 jsInitFunction=None,
                 initURL=None,
                 initParams=None,
                 jsUpdateFunction=None,
                 updateURL=None,
                 updateParams=None,
                 loadOnPageLoad=None,
                 interval=None,
                 showLoadIndicator=True,
                 content=None,
                 **params):
        """
        :param pluginName: The name of the plugin.
        :type pluginName: String
        :param pluginDescription: The description of the plugin.
        :type pluginDescription: String
        :param jsUpdateFunction: The js function, which should be
          called after retrieving data from the fw (see autorefreshwrapper).
        :type updateURL: String
        :param interval: The update interval in milliseconds.
        :type interval: int
        :param header: The "title" of the container.
        :type header: Either string or a displayable widget.
        :param content: The content of the container.
        :type content: Either string or a displayable widget.
        :param closed: container closed on pageload?
        :type closed: Boolean
        """
        
        if pluginName:
            self.pluginName = pluginName
        if pluginDescription:
            self.pluginDescription = pluginDescription
        
        autorefresh = Plugin(
            id=self.__class__.__name__,
            pluginName=self.pluginName,
            pluginDescription=self.pluginDescription,
            jsInitFunction=jsInitFunction,
            initURL=initURL,
            initParams=initParams,
            jsUpdateFunction=jsUpdateFunction,
            updateURL=updateURL,
            updateParams=updateParams,
            loadOnPageLoad=loadOnPageLoad,
            interval=interval,
            showLoadIndicator=showLoadIndicator,
            content=content,
            )
        
        CloseableContainer.__init__(self, content=autorefresh, **params)

__all__ = [
    'PluginSort',
    'CloseablePlugin',
    'Plugin'
]
