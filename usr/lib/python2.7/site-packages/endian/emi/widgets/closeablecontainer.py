#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#
"""
.. mod:: closablecontainer - Contains the emi-widget CloseableContainer.

.. synopsis:: Contains the emi-widget CloseableContainer.

.. automodule:: closeablecontainer

Contains the emi-widget CloseableContainer.

.. moduleauthor:: Alber Maximilian
"""
__all__ = [
    'CloseableContainer'
]

from tw.forms import FormField

from static import *

class CloseableContainer(FormField):
    """
    An emi widget which creats an container div with
    a header and a content. The content part is open-
    and closeable.

    The open and close changes can be observed by a 
    callback request.
    """

    template = "endian.emi.templates.closeablecontainer"
    engine_name = "mako"
    
    css = [
        CSSLink(link='/toscawidgets/resources/endian.emi/static/css/closeablecontainer.css', css=[jquery_ui_css])
    ]

    javascript = [
        #has to be de first!
        JSLink(link='/toscawidgets/resources/endian.emi/static/js/consolelogger.js'),
        jquery_js
    ]
    
    header = ""
    """
    The "title" of the container. Can be either a string or
    a displayable widget.
    """

    content = ""
    """
    The content of the container. Can be either a string or
    a displayable widget.
    """

    closed = False

    callBackURL = ""
    """
    A callback to which the widgets sends, if it was opened
    or closed. It will be a post request with the content:

    * on opening: id=id, status=opened
    * on closeing: id=id, status=closed

    Where id is the id of the widget.

    If the callback is None, no request will be done.
    """

    params = ["header", "content", "closed", "callBackURL"]

    def __init__(self, 
                 header=None,
                 content=None,
                 closed=None,
                 callBackURL=None,
                 **params):
        """
        Initilaze the object.
        
        :param header: The "title" of the container.
        :type header: Either string or a displayable widget.
        :param content: The content of the container.
        :type content: Either string or a displayable widget.
        :param closed: Indicates,
          if hould the container be closed on pageload.
        :type closed: Boolean
        :param callBackURL:     A callback to which the widgets sends, if it was opened
          or closed. It will be a post request with the content:
        
          * on opening: id:opened
          * on closeing: id:closed

          If the callback is None, no request will be done.
        :type callBackURL: None or a String
        """

        FormField.__init__(self, **params)
        if header:
            self.header = header
        if content:
            self.content = content
        if closed:
            self.closed = closed
        if callBackURL:
            self.callBackURL = callBackURL
