#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2015 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import re

from tw.forms import FormField

try:
    from endian.emi.widgets import static_enterprise as static
except:
    from endian.emi.widgets import static

__all__ = [
    'KendoData',
    'get_kendo_data'
]

def split_key(string, brackets_on_first_result = False):
    matches = re.split("[\[\]]+", string)
    matches.remove('')
    return matches

def parse_params(params):
    results = {}
    for key in params:
        value = params[key]
        # fix filter value from post request...
        if isinstance(value, list):
            value = value[0]
        if '[' in key:
            key_list = split_key(key)
            d = results
            for partial_key in key_list[:-1]:
                if partial_key not in d:
                    d[partial_key] = dict()
                d = d[partial_key]
            d[key_list[-1]] = value
        else:
            results[key] = value
    return results

def get_kendo_data(params):
    params = parse_params(params)
    return params.get("sort", {}), params.get("filter", {})

class KendoData(FormField):
    """Provides Kendo Datasource"""
    template = "endian.emi.templates.kendodata"
    
    engine_name = "mako"
    
    entity = None
    
    javascript = [
        static.kendo_data
    ]
    
    # datasource
    controllername = ""
    datasource = ""
    
    cache = None
    
    url = ""
    url_path = ""
    data = {}
    group = ""
    
    server_aggregates = None
    server_filtering = None
    server_grouping = None
    server_paging = None
    server_sorting = None
    
    page_size = None
    
    order_by = None
    order_sort = None
    
    parameter_map = None
    
    on_change = None
    
    params = [
        "entity",
        "controllername",
        "datasource",
        "cache",
        "url",
        "url_path",
        "data",
        "group",
        "server_aggregates",
        "server_filtering",
        "server_grouping",
        "server_paging",
        "server_sorting",
        "page_size",
        "order_by",
        "order_sort",
        "parameter_map",
        "on_change"
    ]
    
    def __init__(self,
            controllername="",
            datasource="",
            cache=False,
            url="",
            url_path="json",
            data={},
            group="",
            page_size=None,
            order_by="",
            order_sort="asc",
            parameter_map="",
            on_change="",
            **params):
        """
        KendoBase widget init method

        :param controllername: name of the controller (provided by the controller)
        :type controllername: string
        :param datasource: name of a custom kendo datasource
        :type datasource: string
        :param cache: enable/disable caching for ajax requests
        :type cache: boolean
        :param url: custom url for kendo datasource
        :type url: string
        :param url_path: url path of the controller used with none custom url (default: json)
        :type url_path: string
        :param data: static params for kendo datasource read requests
        :type data: dict
        :param group: group data by this field
        :type group: string
        :param server_aggregates: do aggregates on the server side
        :type server_aggregates: boolean
        :param server_filtering: do filtering on the server side
        :type server_filtering: boolean
        :param server_grouping: do grouping on the server side
        :type server_grouping: boolean
        :param server_paging: do paging on the server side
        :type server_paging: boolean
        :param server_sorting: do sorting on the server side
        :type server_sorting: boolean
        :param parameter_map: js function which converts the request parameters to a format
                              suitable for the remote service (function name or function code)
        :type parameter_map: string
        :param on_change: Fired when the data source is populated, a data item is inserted,
                          updated or removed, the data items are paged, sorted, filtered or grouped
        :type on_change: string
        :rtype: None
        """
        super(KendoData, self).__init__(**params)
        if not self.controllername:
            self.controllername = controllername
        if not self.datasource:
            self.datasource = datasource
        if self.cache is None:
            self.cache = cache
        if not self.url:
            self.url = url
        if not self.url_path:
            self.url_path = url_path
        if not self.data:
            self.data = data
        if not self.group:
            self.group = group
        if self.page_size is None:
            self.page_size = page_size
        if self.order_by is None:
            self.order_by = order_by
        if self.order_sort not in ["asc", "desc"]:
            self.order_sort = order_sort
        if self.parameter_map is None:
            self.parameter_map = parameter_map
        if self.on_change is None:
            self.on_change = on_change
