#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import copy
from tw.api import CSSLink
from endian.core.classtools import classproperty
from endian.emi.widgets import\
    ChildContainer,\
    HiddenField,\
    SettingsEditor

__all__ = [
    'WizardSettingsEditor'
]


from deepforwarding import __DeepForwarding__
class WizardSettingsEditor(__DeepForwarding__, SettingsEditor):
#intends that schema is called before 
#__init__!!
    columns = 1
    show_labels = False
    show_control = False
    children_control_widget = None
    children_list = None
    children_list_modified = False
    inner_content_container_class = ChildContainer
    inner_content_container_args = {
        "expands":True,
        "columns":1
        }
    description_container_class = ChildContainer
    description_container_args = {
        "expands":True,
        "columns":1
        }
    description = None

    def __init__(self, show_control=None, **kws):
        if show_control:
            self.show_control = show_control
        ret = super(WizardSettingsEditor, self).__init__(**kws)
        if self.children_control_widget:
            self.children = [self.children[1], self.children[0]] + self.children[2:]
        self.css_classes.append("wizard_settingseditor")
        self.css.append(CSSLink(link='/toscawidgets/resources/endian.emi/static/css/wizard_settingseditor.css'))
        return ret

    @classproperty
    def schema(cls):
        if not cls.children_list_modified:
            cls.children_list_modified = True
            if cls.children_list:
                args = copy.copy(cls.inner_content_container_args)
                args.update({"children":cls.children_list})
                cls.children_list = [cls.inner_content_container_class(
                        "inner_content_container",
                        toggle_name= cls.children_control_widget and cls.children_control_widget.id or "",
                        toggle_option="on",
                        **args
                        )]

            if not cls.children_list:
                cls.children_list = []
            args = copy.copy(cls.description_container_args)
            args.update({
                    "info_text":cls.description,
                    "children":cls.children_list
                    })
            if cls.children_control_widget:
                args["children"].insert(0,
                                        ChildContainer(
                        "control_widget",
                        children=[cls.children_control_widget],
                        expands=True,
                        column=1))
            container = cls.description_container_class("outer_description_container",
                                                        **args)
            cls.children_list = [container]
        return super(WizardSettingsEditor, cls).schema()
