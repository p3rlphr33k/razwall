#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import endian.core.i18n
from endian.core import logger

PERMISSION_OWNER = "owner"
PERMISSION_ACCESS = "access"

class AuthException(Exception):
    pass

class UserNotFoundError(AuthException):
    
    def __init__(self, message=_("User not found")):
        AuthException.__init__(self, message)
        
class InvalidPasswordError(AuthException):
    
    def __init__(self, message=_("Invalid password")):
        AuthException.__init__(self, message)

class UserNotEnableddError(AuthException):
    
    def __init__(self, message=_("User not enabled")):
        AuthException.__init__(self, message)

class AuthNotImplemented(AuthException):
    
    def __init__(self, message="Not implemented"):
        AuthException.__init__(self, message)

class NotAuthorizedError(AuthException):
    pass

class NotLoggedInError(NotAuthorizedError):
    pass

class Acl(dict):
    """
        Access control list
        
        Example of acl definition:
        acl = Acl(list=['root','organization_manager','organization_admin'],
              create=['root','organization_manager'],
              view=['root','organization_manager','organization_admin','owner'],
              edit=['root','organization_manager','organization_admin','owner'],
              delete=['root','organization_manager'])
    """
    def __init__(self, **args):
        dict.__init__(self, **args)

    def check_permission(self, permission, current_identity=None, hasAccess=False, isOwner=False):
        """
            Verify if the user has the required permission
            Raise 'NotAuthorizedError' if the user does not have the permission
        """ 
        from endian.emi.framework import identity        
        try:
            if current_identity is None:
                current_identity = identity.current
        except identity.exceptions.RequestRequiredException:
            pass
        except:
            logger.error("Unable to get current identity")
        requiredPermissions = self.get(permission)
        if not requiredPermissions:
            return # OK, no permission required
        if not current_identity or current_identity.anonymous:
            raise NotLoggedInError("no user")
        if not hasAccess and not u'root' in current_identity.permissions and not u'superuser' in current_identity.permissions:
            raise NotAuthorizedError("no access") # The user has not access to the resource
        if 'user' in requiredPermissions:
            return # OK, the user is logged and this is sufficient to grant the permission
        if isOwner and PERMISSION_OWNER in requiredPermissions:
            return # OK, the user is the owner and ownership is sufficient to grant the permission
        if hasAccess and PERMISSION_ACCESS in requiredPermissions:
            return # OK, the user has access and having access is sufficient to grant the permission
        if self.are_disjoint(requiredPermissions, current_identity.permissions):
            raise NotAuthorizedError("no rights") # Groups does not match      
          
    def has_permission(self, permission, current_identity=None, hasAccess=False, isOwner=False):
        """
            Verify if the use has the required permission
            Returns 'True' if the users has the permission
        """ 
        try:
            self.check_permission(permission, current_identity, hasAccess, isOwner)
            return True
        except NotAuthorizedError:
            return False
        except:
            logger.error("Unable to get current identity")
            return False
        
    @staticmethod
    def are_disjoint(c1, c2):
        """
            Returns true if two collections have no elements in common
        """        
        if isinstance(c1, basestring):
            c1 = [c1]
        if isinstance(c2, basestring):
            c2 = [c2]
        for element in c1:
            if element in c2:
                return False
        return True
    
    @staticmethod
    def get_user_from_identity(current_identity=None):
        from endian.emi.framework import identity
        try:
            if current_identity is None:
                current_identity = identity.current
            return current_identity.user
        except identity.exceptions.RequestRequiredException:
            return None
        except:
            logger.error("Unable to get current identity")
            return None
        
    @staticmethod
    def get_groups_from_identity(current_identity=None):
        from endian.emi.framework import identity
        try:
            if current_identity is None:
                current_identity = identity.current
            return current_identity.groups
        except identity.exceptions.RequestRequiredException:
            return []
        except:
            logger.error("Unable to get current identity")
            return []

    @staticmethod
    def get_permissions_from_identity(current_identity=None):
        from endian.emi.framework import identity
        try:
            if current_identity is None:
                current_identity = identity.current
            return current_identity.permissions
        except identity.exceptions.RequestRequiredException:
            return []
        except:
            logger.error("Unable to get current identity")
            return []


def check_acl(acl, permission='view', hasAccess=True):
    """
    Decorator for checking the ACL before executing a function.
    Usage example:
    @check_acl(acl=Acl(view=['root','distributor']))
    def list_activationcodes():
        ...
    """
    def wrap(f):
        def wrapped_f(*args,**kargs):
            acl.check_permission(permission, hasAccess=hasAccess)
            return f(*args,**kargs)
        wrapped_f.__doc__ = f.__doc__
        return wrapped_f
    return wrap
        
__all__ = ['Acl',
           'AuthException',
           'UserNotFoundError',
           'UserNotEnableddError',
           'InvalidPasswordError',
           'AuthNotImplemented',
           'NotAuthorizedError',
           'NotLoggedInError',
           'check_acl',
          ]
