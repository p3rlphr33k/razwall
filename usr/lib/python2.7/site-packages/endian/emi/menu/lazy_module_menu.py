#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import time
import threading

from endian.core.runner import run
from endian.core.logger import *
from endian.core import version
from endian.core.modules import module_registry
from endian.emi.menu.menu import Menu
from endian.emi.menu.menu_level import MenuLevel

__all__ = ['LazyModuleMenu']

class LazyModuleMenu(Menu):
    """
        The menudata is shared between all the instances of this class
    """
    
    # Class attributes (shared between all the instances):
    menudata = None       # menu data
    lock = threading.Lock()

    def __init__(self):
        # Retrieve brand settings
        if not Menu.brand_settings:
            self.loadBrandSettings()
        
        # Load the menu
        if LazyModuleMenu.menudata == None:
            self.load()
        else:
            self.uris_to_items = LazyModuleMenu.uris_to_items 
    
    def getData(self):
        """ Return menu stucture """
        if Menu.is_dirty:
            self.load()
        return self.menudata

    def load(self):
        """ Load menu structure """
        debug("Load menu structure")
        try:
            self.lock.acquire()
            # Retrieve menu
            try:
                main_menu = self._prepare_menu(module_registry.menu.get('main', {}))
                LazyModuleMenu.menudata = MenuLevel(main_menu)
                debug("Menu loaded")
                Menu.is_dirty = False
                
                # Create a map for fast lookup of menu items
                self._pupulate_uris_to_items()
                LazyModuleMenu.uris_to_items = self.uris_to_items
                return True # reloaded
            
            except Exception, e:
                error("Could not load menu: %s" % e, exc_info=True)
                return False # not reloaded
        finally:
            self.lock.release()

    def _prepare_menu(self, raw_menu, menu_key=None):
            menu = {}
            sub_menu = {}
            for k, v in raw_menu.iteritems():
                if not v:
                    warn("Missing value in menu for key: %s" % k)
                elif hasattr(v, 'keys'):
                    sub_menu[k] = self._prepare_menu(v, menu_key=k)
                else:
                    menu[k] = v
            if sub_menu:
                menu['subMenu'] = sub_menu
            if not menu_key: # root menu
                return sub_menu
            else:
                if not 'caption' in menu:
                    menu['caption'] = menu_key
                if not 'title' in menu:
                    menu['title'] = menu_key
                if not 'description' in menu:
                    menu['description'] = ""
                if not 'enabled' in menu:
                    menu['enabled'] = True
                return menu
    
