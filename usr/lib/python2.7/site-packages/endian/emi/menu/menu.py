#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

"""
menu.py

Created by Raphael Vallazza on 2007-02-13.
Copyright (c) 2007 Endian. All rights reserved.
"""

from endian.core import version
from endian.core import treefilter
from endian.emi.menu import profiles

__all__ = ['Menu']

class Menu(object):
    """
        Generic menu structure
    """

    force_menu_type = None # None, 'lazy_module', 'module' or 'cgi' - If it is none, 'lazy_module' or 'module' is used in devmode otherwise 'cgi'
    help_href = 'default' # Help page address
    logout_href = '/cgi-bin/logout.cgi' # Address of the logout page
    login_href = None # Address of the login page
    menu_root = '/' # Root node for modules-loaded menu
    menu_json_href = '/home/httpd/cgi-bin/menu-json.cgi' # Address of the menu cgi
    master_template = 'master.mak' # Master template
    logo = None # logo file name (base directory is '/images/')
    image = None # image file name (base directory is '/images/')
    excluded_methods = ['index', 'static', 'api']
    uris_to_items = None # Map uri to tuples "(menu item, key, parent_item, path)"
    default_uri = '/manage/dashboard/' # default uri
    is_dirty = True # reload menu flag
    brand_settings = None # brand settings - class attribute, shared between all the instances

    def __new__(cls, **args):
        if Menu.force_menu_type == 'lazy_module':
            from lazy_module_menu import LazyModuleMenu
            menu_class = LazyModuleMenu
        elif Menu.force_menu_type == 'module':
            from module_menu import ModuleMenu
            menu_class = ModuleMenu
        elif Menu.force_menu_type == 'cgi':
            from cgi_menu import CGIMenu
            menu_class = CGIMenu
        else:
            from cgi_menu import CGIMenu
            menu_class = CGIMenu
        result = object.__new__(menu_class)
        result.__init__(**args)
        return result

    def _pupulate_uris_to_items(self):
        """ Create a map for fast lookup of menu items (and keys, parent itemts, path) by the uris """

        def get_item_uri(item):
            if item.has_key("uri"):
                return item["uri"]
            elif item.has_key("subMenu"):
                submenus = item["subMenu"]
                keys = filter(lambda x: treefilter.toBool(submenus[x].get('enabled')), submenus)
                if len(keys) <= 0:
                    return ""
                for subKey in keys:
                    ret = get_item_uri(submenus[subKey])
                    if ret != "":
                        return ret
            return ""

        def recursive_populate(items, parent_item=None, path=[]):
            if items:
                for key, item in items.iteritems():
                    uri = item.get("uri")
                    my_path = path + [key]
                    if uri:
                        self.uris_to_items[uri] = (item, key, parent_item, my_path, )
                    sub_menu = item.get("subMenu", None)
                    if sub_menu:
                        recursive_populate(sub_menu, item, my_path)
        self.uris_to_items = {}
        recursive_populate(self.getData())

    def load(self):
        """ Load menu structure """
        raise NotImplementedError()

    def getData(self):
        """ Return menu stucture """
        raise NotImplementedError()

    @classmethod
    def getBrandSettings(cls):
        """ Return brand settings """
        return cls.brand_settings

    @classmethod
    def loadBrandSettings(cls):
        """ Retrieve brand settings """
        cls.brand_settings = version.get_brand_settings()

    def getItemByURI(self, uri):
        """" Returns a menu item by its uri """
        if Menu.is_dirty:
            self.load()
        try:
            return self.uris_to_items[uri][0]
        except:
            return None

    def getPathForURI(self, uri):
        """ Returns the submenu that contains this uri in list format (ordered) """
        if Menu.is_dirty:
            self.load()
        try:
            return self.uris_to_items[uri][3]
        except:
            return []

    def getItemURI(self, item):
        if item.has_key("uri"):
            return item["uri"]
        elif item.has_key("computed_uri"):
            return item["computed_uri"]
        elif item.has_key("subMenu"):
            submenus = item["subMenu"]
            keys = filter(lambda x: treefilter.toBool(submenus[x].get('enabled')), submenus)
            if len(keys) <= 0:
                return ""
            for subKey in keys:
                ret = self.getItemURI(submenus[subKey])
                if ret != "":
                    item["computed_uri"] = ret # Store the value for the next call
                    return ret
        return ""

    def getItemHelpURI(self, item):
        help_url =  version.get_help_url()
        if not item:
            return help_url

        help_path = item.get("helpuri", "efw.index.html")
        help_path = help_path.replace("efw.", "")

        if help_path.startswith("http://"):
            return help_path
        elif help_path.startswith("https://"):
            return help_path
        elif help_path.startswith("/"):
            return help_path
        help_url = "%s/%s" % (help_url.rstrip("/"),
                              help_path.lstrip("/"))
        return help_url

    def getMenuForURI(self, uri, menudata=None, level=0, include_sub_menus=False, default_if_null=True, user=None):
        """
        Return a multi dimensional list of menu items result[0] == 1. level, result[1] == 2. level
        """
        if user is None:
            user = profiles.get_current_user()
        if Menu.is_dirty:
            self.load()
        keypath = self.getPathForURI(uri)
        if not keypath:
            uri = "/".join(uri.split('/')[:-1])
            keypath = self.getPathForURI(uri)
            if not keypath:
                if default_if_null:
                    return self.getMenuForURI(uri=self.default_uri, menudata=menudata, level=level, include_sub_menus=include_sub_menus, default_if_null=False)
                else:
                    return []

        curkey = None
        try:
            curkey = keypath[level]
        except IndexError:
            return []

        if not menudata:
            menudata = self.getData()

        mymenu = []
        mymenus = []

        for key in menudata.keys():
            value = menudata[key]
            item = value.copy()
            item["selected"] = (key == curkey)

            if item.has_key("subMenu"):
                if item["selected"] or include_sub_menus:
                    submenu = self.getMenuForURI(uri, item["subMenu"], level+1)
                    mymenus += submenu
                if not item.has_key("uri"):
                    item["uri"] = self.getItemURI(item)
                del(item["subMenu"])
            if 'uri' not in item:
                item['uri'] = ''
            if not item.get('novars'):
                if item.get('vars'):
                    if '?' in item['uri']:
                        if item['uri'] and item['uri'][-1] != '&':
                            item['uri'] += '&'
                    else:
                        item['uri'] += '?'
                    item['uri'] = item['uri'] + item['vars']
            # check for dupes
            if not filter(lambda x: x["uri"] == item["uri"], mymenu) and profiles.check_user_path_access(user, item["uri"]):
                mymenu.append(item)
        mymenus.insert(0, mymenu)
        return mymenus

__all__ = ['Menu']

