#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import os
import glob
import endian.core.i18n
from endian.emi.framework import request, SessionNotEnabledError
from endian.emi.menu import Menu
from endian.core.session_cache import session_cached_function
from endian.core import version
from endian.data.ds import DataSource

__author__ = "andreax"
__date__ = "2010-04-08"

class MasterConfig(object):
    """
        'master.mak' configuration, shared between all the requests/users.
        This configuration can be cached as application level (i.e. one instance for all users).
    """
    
    title_creator = None
    logo = None
    image = None
    
    def __init__(self): 
        # Prepare the title_creator function
        brand = version.get_brand()
        product = version.get_product()
        mainsettings = DataSource('main').settings
        
        if mainsettings.get('WINDOWWITHHOSTNAME', 'off') != 'on':
            self.title_creator = lambda title: "%s %s - %s" % (brand, product, title)
        else:
            hostsettings = DataSource('host').settings
            hostname = hostsettings.get('HOSTNAME', '')
            domainname = hostsettings.get('DOMAINNAME', '')
            self.title_creator = lambda title: "%s.%s - %s %s - %s" % (hostname, domainname, brand, product, title)
    
        # Image & Logo
        if Menu.image:
            self.image = Menu.image
        else:
            image_custom = MasterConfig._get_picture("/home/httpd/html/images/product_*.custom.png")
            image_vendor = MasterConfig._get_picture("/home/httpd/html/images/product_*.vendor.png")
            image_orig = MasterConfig._get_picture("/home/httpd/html/images/product_*.png")
            
            if image_custom:
                self.image = image_custom
            elif image_vendor:
                self.image = image_vendor
            else:
                self.image = image_orig

        if Menu.logo:
            self.logo = Menu.logo
        else:
            logo_custom = MasterConfig._get_picture("/home/httpd/html/images/logo_*.custom.png")
            logo_vendor = MasterConfig._get_picture("/home/httpd/html/images/logo_*.vendor.png")
            logo_orig = MasterConfig._get_picture("/home/httpd/html/images/logo_*.png")
            
            if logo_custom:
                self.logo = logo_custom
            elif logo_vendor:
                self.logo = logo_vendor
            else:
                self.logo = logo_orig
    

        
    @staticmethod
    def _get_picture(search):
        try:
            return os.path.basename(glob.glob(search)[0])
        except:
            return None

 
def _master_config_init():
    """ Returns a MasterConfig instance """
    return MasterConfig()


class MasterPage(object):
    """
        'master.mak' parameters for a single request
    """
    
    current_uri = None
    _master_config = None
    _menu = None
    _menudata = None
    _current_menu = None

    """
        Create a new MasterPage instance
        
        :param master_config: MasterConfig instance; if it is not present, it is retrieved from the cache or created
        :type master_config: MasterConfig
        :param menu: Menu instance; if it is not present, it is retrieved from the cache or created
        :type menu: Menu
        :param current_uri: current URI; if it is not present, the value of request.path_info is used 
        :type current_uri: string
    """    
    def __init__(self, master_config=None, menu=None, current_uri=None):
        # Master config
        if master_config == None:
            try:
                master_config = session_cached_function('endian.emi.menu.master.master_config', _master_config_init, application=True)()
            except SessionNotEnabledError:
                master_config = _master_config_init()
        self._master_config = master_config

        # Menu
        if menu == None:
            try:
                menu = session_cached_function('endian.emi.menu.master.menu', lambda : Menu(), application=False)()
            except SessionNotEnabledError:
                menu = Menu()
        self._menu = menu
                
        # Current URI
        if current_uri == None:
            current_uri = request.path_info
        if current_uri.endswith("/"):
            current_uri = current_uri[:-1]
        self.current_uri = current_uri

        # Current menu
        self._current_menu = self._menu.getItemByURI(current_uri)
        if self._current_menu == None:
            # If there are no current menu, try to retrieve the parents current menu
            self._current_menu = self._menu.getItemByURI("/".join(current_uri.split('/')[:-1]))
    
    @property
    def window_title(self):
        """
        Return the page title
        """   
        if self._current_menu:
            title = self._current_menu.get('title', "")
        else:
            title = ""
        return self._master_config.title_creator(title)
    
    @property
    def title(self):
        """
        Return the page title
        """   
        if self._current_menu:
            return self._current_menu.get('title', "")
        return ""

    @property
    def caption(self):
        """
        Return the page caption, if any
        """   
        if self._current_menu:
            return self._current_menu.get('caption', "")
        return ""

    @property
    def description(self):
        """
        Return the page description, if any
        """   
        if self._current_menu:
            return self._current_menu.get('description', "")
        return ""
    
    @property
    def logo(self):
        """
        Return the logo
        """   
        return self._master_config.logo
    
    @property
    def image(self):
        """
        Return the image
        """   
        return self._master_config.image

    @property
    def menu_data(self):
        """
        Return the menu
        """   
        return self._menu.getData()

    @property
    def mainmenu(self):
        """
        Return the main menu (level 1)
        """
        if not self._menudata or Menu.is_dirty:
            self._menudata = self._menu.getMenuForURI(self.current_uri)
            
        if len(self._menudata) > 0:
            return self._menudata[0]
        else:
            return []
        
    @property
    def submenu(self):
        """
        Return the sub menu (level 2)
        """
        if not self._menudata or Menu.is_dirty:
            self._menudata = self._menu.getMenuForURI(self.current_uri)
            
        if len(self._menudata) > 1:
            return self._menudata[1]
        else:
            return []
            
    @property
    def contextmenu(self):
        """
        Return the context menu (level 3)
        """
        if not self._menudata or Menu.is_dirty:
            self._menudata = self._menu.getMenuForURI(self.current_uri)
            
        if len(self._menudata) > 2:
            return self._menudata[2]
        else:
            return []
    
    @property
    def help(self):
        """
        Render the help link
        """
        if Menu.help_href == 'default':
            result = """<li id="help-icon" onclick="javascript:window.open(\'%s\',\'_blank\',\'height=700,width=1000,location=no,menubar=no,scrollbars=yes\');">
    <a href="#" onclick="return false;">%s</a>
</li>""" % (self._menu.getItemHelpURI(self._current_menu), _("Help"))
            return result
        elif Menu.help_href:
            result = """<li id="help-icon" onclick="window.location.href='%s';">
    <a href="#" onclick="return false;">%s</a>
</li>""" % (Menu.help_href, _("Help"))
            return result
        else:
            return ""
        
    @property
    def logout(self):
        """
        Render the logout link
        """
        if Menu.logout_href:
            return """<li id="logout-icon" onclick="window.location.href='%s';">
    <a href="%s" onclick="return false;" id="main_header_logout">%s</a>
</li>""" % (Menu.logout_href, Menu.logout_href, _("Logout"))
        else:
            return ""

      
__all_ = ['MasterConfig', 'MasterPage']
