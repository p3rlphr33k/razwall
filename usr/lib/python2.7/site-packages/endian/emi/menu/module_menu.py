#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import types
import itertools
import threading

from endian.core import version
from endian.emi.controllers import Controller
from endian.emi.menu.menu import Menu
from endian.emi.menu.menu_level import MenuLevel

from endian.core.logger import *

__all__ = ['ModuleMenu']

class ModuleMenu(Menu):
    """
        This class generates menu structure by object inspection of the EMI modules.
        Intended for devmode (maybe this could be usedin future for menu creation) and for Endian Network
        The menudata is not shared between all the instances, so different users can have different menu.
    """
    
    menudata = None # menu data - instance attribute
    lock = threading.Lock()
    
    def __init__(self):
        if not Menu.brand_settings:
            self.loadBrandSettings()
        self.load()

    def load(self):
        """ Load menu structure """
        try:
            self.lock.acquire()
            self.menudata = MenuLevel(self.getModulesIndex())
            Menu.is_dirty = False
            
            # Create a map for fast lookup of menu items
            self._pupulate_uris_to_items()
        finally:
            self.lock.release()
    
    def getData(self):
        """ Return menu stucture """
        if Menu.is_dirty:
            self.load()
        return self.menudata

    def getModulesIndex(self, uri=None, root=None):
        """
        Creates menu structure by object inspection of the EMI modules.
        """
        
        if not uri:
            try:
                import cherrypy
                root = cherrypy.tree.mount_points['/']
                
                uri = Menu.menu_root
                if uri != '/':
                    for element in filter(lambda x: x, uri.split('/')):
                        root = getattr(root, element)
                        
            except Exception, e:
                error("Could not load menu root: %s" % e)
                return {}

        ret = {}
        items = {}
        items.update(root.__dict__)
        items.update(root.__class__.__dict__)
        for (k,v) in items.iteritems():

            if k.startswith('_') or k in Menu.excluded_methods:
                continue
            
            thisuri = uri + k
            
            # If the have an hidden Controller (e.g. _user) and a property with the same name 
            # without the leading '_' (e.g. user), we asseume that the property is in some
            # way related to the hidden Controller and so we add it to the menu
            if type(v) == property and '_' + k in items:
                v = items['_' + k]
    
            if type(v) == types.FunctionType:
                ret[k] = {
                    'caption' : k,
                    'title' : k,
                    'description': "",
                    'uri': thisuri,
                    'enabled' : 1
                    }
                
            elif isinstance(v, Controller):
                allow = False
                if not hasattr(v, 'acl') or v.acl == None:
                    allow = True
                else:
                    # If the controller has acl, check the permission
                    try:
                        if v.acl.has_permission('view', hasAccess=True):
                            allow = True
                    except Exception, e:
                        error(e)
                
                if allow:
                    item = dict()
                    
                    # Try 'title' attribute...
                    if hasattr(v, 'title') and v.title:
                        item['title'] = v.title
                    else:
                        item['title'] = k
                        
                    # Try 'menu_title' attribute...
                    if hasattr(v, 'menu_title') and v.menu_title:
                        item['caption'] = v.menu_title
                    else:
                        item['caption'] = item['title']
    
                    # Try 'menu_order' attribute...
                    if hasattr(v, 'menu_order') and v.menu_order:
                        item['menu_order'] = v.menu_order

                    # Try 'caption' attribute...
                    if hasattr(v, 'caption') and v.caption:
                        item['caption'] = v.caption
                    else:
                        item['caption'] = ""
    
                    item['uri'] =  thisuri
                    item['subMenu'] =  self.getModulesIndex(thisuri + '/', getattr(root, k))
                    item['enabled'] = 1
                    
                    ret[k] = item
    
        return ret
