#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from endian.core.i18n import _
from endian.core import logger
from endian.validators.core import Invalid
from endian.emi.framework import request
from endian.emi.controllers.base import BaseController, REQUEST_TYPE, expose
import formencode

__all__ = [
    'SettingsController',
]


class SettingsController(BaseController):
    """
    Generic settings controller
    """

    settingsWidget = None

    do_validate = None  # prevent validation e.g. if only chained validators should be used
    do_store = None  # prevent store with readonly storages

    action = "store"

    actions = [
        "store"
    ]
    permissions = [
        "store"
    ]

    def __init__(self,
                 schema=None,
                 settingsWidget=None,
                 storage=None,
                 do_validate=True,
                 do_store=True,
                 **params):
        BaseController.__init__(self, **params)
        if not settingsWidget and self.settingsWidget:
            settingsWidget = self.settingsWidget
        if settingsWidget:
            self.entity = settingsWidget.entity
            if not schema:
                schema = settingsWidget.schema
        if not schema and self.entity:
            schema = self.entity.schemaClass()
        if not storage and self.entity:
            storage = self.entity.storage()
        if schema:
            self.schema = schema
        self.storage = storage
        if settingsWidget:
            args = {}
            if hasattr(self, "settingsWidget_args"):
                args = self.settingsWidget_args
            self.settingsWidget = settingsWidget(id=self.name and "%s_settingseditor" % self.name or "settingseditor", validator=self.schema, controllername=self.name, **args)
            if not getattr(self, 'title', None) and getattr(self.settingsWidget, 'title', None):
                self.title = self.settingsWidget.title
            if not getattr(self, 'menu_title', None) and getattr(self.settingsWidget, 'menu_title', None):
                self.menu_title = self.settingsWidget.menu_title
            if not getattr(self, 'menu_order', None) and getattr(self.settingsWidget, 'menu_order', None):
                self.menu_order = self.settingsWidget.menu_order
        else:
            self.settingsWidget = None
        if self.do_validate is None:
            self.do_validate = do_validate
        if self.do_store is None:
            self.do_store = do_store

    @expose(template="endian.emi.templates.settingscontroller_master")
    def index(self, **args):
        return self.index_internal(**args)

    @expose(template="endian.emi.templates.settingscontroller")
    def naked(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.NAKED, **args)

    @expose(template="endian.emi.templates.settingscontroller_standalone")
    def standalone(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.STANDALONE, **args)

    @expose(template="endian.emi.templates.settingscontroller_plugin")
    def plugin(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.PLUGIN, **args)

    def index_internal(self, **args):
        ret = BaseController.index_internal(self, **args)
        request_type = ret.get('request_type', REQUEST_TYPE.MASTER)
        # Store the request type in the request object, so it can be accessed by the error page
        request.request_type = request_type
        permissions = ret['permissions']
        args = ret['args']
        data = ret['data']
        error = ret['error']
        info = ret['info']
        important = ret['important']
        if self.storage and self.storage.changed:
            important = _("The configuration has been changed and needs to be applied in order to make the changes active.")
        else:
            important = ""
        success = error and False or True

        ret = dict(success=success,
                   error=error,
                   important=important,
                   info=info,
                   args=args,
                   data=data,
                   controllername=self.name,
                   request_type=request_type,
                   permissions=permissions)

        if request_type == REQUEST_TYPE.JSON:
            return ret

        if args.get("ACTION", "") == "" and data:
            for key, value in data.iteritems():
                args[key] = value

        ret.update(dict(settingseditor=self.settingsWidget,
                        hidecontentbox=self.hidecontentbox))
        return ret

    def getData(self, args, data_options=None):
        if data_options is None:
            data_options = {}
        nodata = data_options.get("nodata", None)
        # overwrite nodata by passing nodata=True/False to index_internal/getData
        if nodata is None:
            # XXX: settingswidget has no ajax support yet
            # # do not read data on load if gridwidget uses ajax,
            # if self.settingsWidget and self.settingsWidget.ajax:
            #     nodata = True
            # else: # read data per default
            nodata = False

        # check if data should be returned
        if nodata:
            logger.debug("data will be loaded using an ajax call")
            args = dict()
        else:
            args = self.storage and self.storage.load() or dict()

        args = self.onLoad(args)
        args["ACTION"] = self.action
        return args

    def error(self, data, invalid):
        logger.error("%s" % invalid)
        for k, v in self.schema.fields.items():
            if isinstance(v, formencode.declarative.DeclarativeMeta) and k not in data:
                data[k] = False
        return data

    def onLoad(self, data=None):
        """
        Triggered after loading
        """
        logger.debug("onLoad: %s, %s", id, data)
        return data

    def onSubmit(self, data):
        """
        Triggered before validation
        """
        return data

    def store(self, **args):
        settingsform = self.settingsWidget
        try:
            vargs = args.copy()
            vargs = self.onSubmit(vargs)
            if self.do_validate:
                vargs = settingsform.validate(vargs)
        except Invalid, i:
            form_error = i.error_dict.get('form')
            if form_error:
                args['form_error'] = form_error
            logger.error("Could not validate: %s" % vargs)
            logger.debug(str(i), exc_info=True)
            return self.error(args, i)
        else:
            if 'ACTION' in vargs:
                del vargs['ACTION']
            if 'CONTROLLERNAME' in vargs:
                del vargs['CONTROLLERNAME']
            vargs = self.onStore(vargs)
            if 'error' in vargs:
                return vargs
            if self.storage and self.do_store:
                self.storage.store(vargs)
            vargs = self.onStoreSuccess(vargs)
        return self.getData({})

    def onStore(self, data=None):
        """
        Triggered before saving
        """
        return data

    def onStoreSuccess(self, data):
        """
        Triggered after data has been written to storage
        """
        return data
