#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#
import endian.core.i18n
from endian.core import logger
from cgi import parse_qs
from endian.emi.framework import request
from endian.emi.controllers.base import BaseController, expose, REQUEST_TYPE
from endian.emi.widgets import TabContainer

__all__ = [
    'MultiController',
    'TabMultiController'
]

class MultiController(BaseController):
    '''
    BaseController class - provides generic methods
    '''
    
    hidecontentbox = False
    show_divider = False
    show_function = "naked"
    
    title = None
    menu_title = None

    controllers = []

    def __init__(self, *args, **kws):
        if "show_function" in kws:
            self.show_function = kws["show_function"]
        return super(MultiController, self).__init__(*args, **kws)

    @expose(template="endian.emi.templates.multicontroller_master")
    def index(self, **args):
        return self.index_internal(**args)
    
    @expose("json", content_type="application/json")
    def json(self, controllername="", **args):
        # hack to get post data from cherrypy....
        # cherrypy will not add post data to **args, it requires it to be a param...
        if request.method == "POST":
            try:
                post_data = parse_qs(request.body.read())
            except:
                post_data = {}
            args.update(post_data)
        
        controllername = controllername and controllername or args.get("CONTROLLERNAME", "")
        controller = None
        for c in self.controllers:
            if c.name == controllername:
                controller = c
                break
        if controller:
            return controller.json(**args)
        return super(MultiController, self).json(**args)
    
    @expose("json", content_type="application/json")
    def json_grid(self, controllername="", **args):
        controller = None
        for c in self.controllers:
            if c.name == controllername:
                controller = c
                break
        if controller and hasattr(controller, 'json_grid'):
            return controller.json_grid(**args)
        return {}
    
    @expose(template="endian.emi.templates.multicontroller")
    def naked(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.NAKED, **args)
    
    @expose(template="endian.emi.templates.multicontroller_standalone")
    def standalone(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.STANDALONE, **args)

    @expose(template="endian.emi.templates.multicontroller_plugin")
    def plugin(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.PLUGIN, **args)
    
    def index_internal(self, **args):
        ret = BaseController.index_internal(self, **args)
        controllername = args.get("controllername", args.get("CONTROLLERNAME", ""))
        action = args.get("ACTION")
        show_title = True
        controllers = []
        if action == "edit" and controllername:
            for controller in self.controllers:
                if controller.name == controllername:
                    controllers.append(controller)
                    show_title = False
                    break
        if not controllers:
            controllers = self.controllers
        permissions = ret['permissions']
        if "request_type" in args:
            del args["request_type"]
        return dict(permissions=permissions,
                    controllers=controllers,
                    args=args,
                    hidecontentbox=self.hidecontentbox,
                    show_divider=self.show_divider,
                    show_function=self.show_function,
                    show_title=show_title)

class TabMultiController(MultiController):
    hidecontentbox = True
    show_function = "naked"
    
    tabs = None
    tabs_class = TabContainer
    
    def __init__(self, *args, **kws):
        self.controller_dict = {}
        for i, controller in enumerate(self.controllers):
            self.controller_dict[controller.name] = (i,controller)
        return super(MultiController, self).__init__(*args, **kws)

    @expose(template="endian.emi.templates.tabmulticontroller_master")
    def index(self, **args):
        return self.index_internal(**args)
    
    @expose(template="endian.emi.templates.tabmulticontroller")
    def naked(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.NAKED, **args)
    
    @expose(template="endian.emi.templates.tabmulticontroller_standalone")
    def standalone(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.STANDALONE, **args)

    @expose(template="endian.emi.templates.tabmulticontroller_plugin")
    def plugin(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.PLUGIN, **args)
    
    def index_internal(self, **args):
        ret = BaseController.index_internal(self, **args)
        permissions = ret['permissions']
        selected = 0
        if "CONTROLLERNAME" in args:
            controller = self.controller_dict.get(args["CONTROLLERNAME"], None)
            if controller:
                selected = controller[0]
        tabs = self.tabs_class(id="tabs",
                               tabs=self.tabs,
                               panes_selector=".multitab .panes > div", 
                               selected=selected)
        
        if "request_type" in args:
            del args["request_type"]

        return dict(permissions=permissions,
                    controllers=self.controllers,
                    tabs=tabs,
                    args=args,
                    hidecontentbox=self.hidecontentbox,
                    show_function=self.show_function)
