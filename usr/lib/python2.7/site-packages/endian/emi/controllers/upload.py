#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#
"""
.. mod:: upload - Contains a generic upload controller.

.. synopsis:: Contains a generic upload controller.

.. automodule:: upload

Contains a generic upload controller.

.. moduleauthor:: Alber Maximilian
"""

from shutil import move
import os
from os import makedirs, path

from endian.data import DataSource
import endian.core.i18n
from endian.core import logger
from endian.emi import widgets
from endian.emi.framework import serve_file
from endian.emi.framework import request
from endian.emi.controllers.base import BaseController, REQUEST_TYPE, expose

__all__ = [
    'UpLoadController'
]

class UpLoadController(BaseController):
    """
    Provides an upload section and the upload handler
    on the server side. Basiclly the controller
    saves the file to the location saved in the datasource
    or if none is saved, to the default location
    and updates the filename in datasource.

    Advanced you can ovverride a pre and post hook
    function to manipulate the behavior.

    """
    
    actions = [
        "upload"
    ]
    permissions = [
        "store"
    ]
    
    entity = None
    """
    The entity, which stores the upload location.
    """
    storage = None
    """
    The storage, which stores the upload location.
    """
    key = ""
    """
    The key of the storage entry.
    """
    default_location = None
    """
    The default upload location, either a directory
    or a filename.
    """
    enable_download = False
    """
    Enable the possibility to download a just uploaded file.
    """

    upload_id = None
    """
    The id of the upload field.
    """
    upload_title = None
    """
    The title of the upload section.
    """
    description = None
    """
    The description of the upload. Not used at the moment.
    """
    submit_title = _("Upload")
    """
    The title of the submit button.
    """
    
    def __init__(self,
                 storage=None,
                 key=None,
                 pre_save=None,
                 post_save=None,
                 default_location=None,
                 enable_download=None,
                 upload_title=None,
                 submit_title=None,
                 description=None,
                 **params):
        """
        Initialzes the controller.

        :param entity: The entity, which stores the upload location.
        :type entity: Entity
        :param storage: The storage, which stores the upload location.
        :type storage: Storage
        :param key: The key of the storage entry.
        :type key: String
        :param pre_save: The function scheduled before writing the file.
          See the documentation of the upload function.
        :type pre_save: Function
        :param post_save: The function scheduled after writing the file.
          See the documentation of the upload/pre_save function.
        :type post_save: Function
        :param default_location: The default upload/post_save location,
          either a directory or a filename.
        :type default_location: String
        :param acl: See BaseController.__init__()
        :type acl: See BaseController.__init__()
        :param enable_download: Enable the possibility to download a
          just uploaded file.
        :type enable_download: bool
        :param name: The name of the controller.
        :type name: String
        :param upload_title: The title of the upload section.
        :type upload_title: String
        :param submit_title: The title of the submit button.
        :type submit_title: String
        :param description: The description of the upload.
          Not used at the moement.
        :type description: String
        """
        entity = params.get('entity')
        BaseController.__init__(self, **params)
        if self.entity:
            self.storage = self.entity.storage()        
        elif entity:
            self.storage = entity.storage()
        elif storage:
            self.storage = storage
        if key:
            self.key = key

        if self.name == "":
            self.name = self.key

        if enable_download != None:
            self.enable_download = enable_download

        if pre_save:
            self.pre_save = pre_save
        if post_save:
            self.post_save = post_save
        if upload_title:
            self.upload_title = upload_title
        if submit_title:
            self.submit_title = submit_title
        if not self.default_location:
            self.default_location = default_location
        if not self.upload_id:
            self.upload_id = self.name+'_upload'
        if not self.description:
            self.description = description



    @expose(template="endian.emi.templates.uploadcontroller_master")
    def index(self, **args):
        return self.index_internal(**args)
    
    @expose(template="endian.emi.templates.uploadcontroller")
    def naked(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.NAKED, **args)
    
    @expose(template="endian.emi.templates.uploadcontroller_standalone")
    def standalone(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.STANDALONE, **args)

    def index_internal(self, **args):
        oargs = args.copy()
        ret = BaseController.index_internal(self, **args)
        request_type = ret.get('request_type', REQUEST_TYPE.MASTER)
        # Store the request type in the request object, so it can be accessed by the error page
        request.request_type = request_type
        permissions = ret['permissions']
        args = ret['args']
        error = ret.get("error", None) or oargs.get('error', None)
        important = ret.get("important", None) or oargs.get('important', None)
        info = ret.get("info", None) or oargs.get('info', None)

        download_link = None
        if self.enable_download:
            try:
                vargs = self.storage.load()
                location = vargs.get(self.key, "")
            except (KeyError, AttributeError), e:
                location = ""

            if location and os.path.isfile(location):
                download_link = "%s/download?CONTROLLERNAME=%s&%s"\
                    % (self.name,
                       self.name,
                       self.upload_id)

        # Disable all the upload fields if demo mode is enabled
        try:
            ds = DataSource()
            disabled = ds.demo.settings.demo_enabled == 'on'
        except:
            disabled = False

        upload_field = widgets.UpLoadField(
            id=self.upload_id,
            title=self.upload_title,
            description=self.description,
            submit_title=self.submit_title,
            download_link=download_link,
            disabled=disabled)
        return dict(permissions=permissions,
                    upload_field=upload_field,
                    key=self.key,
                    args=args,
                    error=error,
                    important=important,
                    info=info,
                    controller_name=self.name,
                    request_type=request_type,
                    hidecontentbox=self.hidecontentbox)

    @expose(template="endian.emi.templates.uploadcontroller")
    def download(self, **args):
        """
        Returns the file for a download.
        """
        if not self.enable_download:
            raise Exception("Downloading not enabled.")

        if not self.upload_id in args and\
                args["CONTROLLERNAME"] != self.name:
            #may another upload controller
            raise Exception("Could not identify controller.")

        try:
            vargs = self.storage.load()
            location = vargs.get(self.key, "")
        except (KeyError, AttributeError), e:
            location = ""

        if location == "" or not path.exists(location):
            raise Exception("Could not find file.") 
        
        return serve_file(path.abspath(location),
                                  contentType="application/x-download",
                                  disposition="attachment",
                                  name=path.basename(location))    

    def upload(self, **args):
        """
        The upload handler. If a file upload
        for the current controller is provided, it will
        store it on the disk, performing:
        - search for the upload location in the datasource.
        - filter the filename with pre_save.
        - write file to disk.
        - filter the filename with post_save.
        - save the filename to the datasource.
    
        """
        if not self.upload_id in args:
            #may another upload controller
            return {}
        
        try:
            file_name = args[self.upload_id].filename
            value = args[self.upload_id].value
            if not value:
                raise KeyError('empty file')

            vargs = self.storage.load()
            location = vargs.get(self.key, "")

        except (KeyError, AttributeError), e:
            logger.error("No uploaded data.", exc_info=True)
            return {'error':
                        _("Could not upload file.")}
            
        try:
            if self.pre_save:
                location = self.pre_save(location)
        except Exception, e:
            logger.debug("Error during pre_save hook.", exc_info=True)
            return {'error':
                        _("Could not upload file.")}

        try:
            if not path.exists(
                path.dirname(location)):
                try:
                    makedirs(path.dirname(location))
                except OSError:
                    pass

            if path.isdir(location):
                location = path.join(location, file_name)

        except Exception, e:
            logger.debug("Error during preparing upload location.", exc_info=True)
            return {'error':
                        _("Could not upload file.%s" % e)}

        try:
            try:
                f = file(location, "w")
                f.write(value)
                f.close()
            except Exception, e:
                logger.debug("Error during saving data.", exc_info=True)
                return {'error':
                            _("Could not upload file.%s" % e)}
        finally:
            try:
                if self.post_save:
                    location = self.post_save(location)
                vargs[self.key] = location
                self.storage.store(vargs)
            except Exception, e:
                logger.debug("Error during post_save hook.", exc_info=True)
                return {'error':
                            _("Could not upload file.")}

        return {'info': 
                _("Successfully uploaded %s." % file_name),
                'controller_name': self.name}
    
    def getData(self, args,
                      data_options={}):
        return args

    def pre_save(self, file_name):
        """
        Scheduled before writing the file to disk.
        Can be used to manipulate the upload location.

        :param file_name: The determined upload location.
        :type file_name: String
        :return: The filterd file_name.
        :rtype: String
        """
        if file_name == None or\
                file_name == "":
            file_name = self.default_location
        return file_name

    def post_save(self, file_name):
        """
        Scheduled after writing the file to disk.
        Can be used to manipulate the filename stored
        in the datasource or to perform actions
        on the file.

        :param file_name: The upload file location.
        :type file_name: String
        :return: The filterd file_name.
        :rtype: String
        """
        if not path.exists(file_name):
            return ""
        return file_name
