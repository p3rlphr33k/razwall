#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import endian.core.i18n
from endian.core import logger
from endian.emi import widgets

from endian.emi.controllers.base import expose
from endian.emi.controllers.multi import MultiController

__all__ = [
    'SwitchController'
]

class SwitchController(MultiController):
    """
    Generic switch controller
    """
    
    actions = [
        "switch",
        "status"
    ]
    permissions = [
        "store"
    ]
    
    storage = None
    key = ""
    action = None
    check = None
    
    switch_title = "Switch"
    description = None
    
    switch_divider = False

    reload_on_enable = False
    reload_on_disable = False
    
    def __init__(self, storage=None, key=None, action=None, check=None, **params):
        MultiController.__init__(self, **params)
        if self.entity:
            self.storage = self.entity.storage()
        elif storage:
            self.storage = storage
        if key:
            self.key = key
        if action:
            self.action = action
        if check:
            self.check = check
    
    @expose(template="endian.emi.templates.switchcontroller")
    def index(self, **args):
        return self.index_internal(**args)

    def index_internal(self, **args):
        ret = MultiController.index_internal(self, **args)
        switch = widgets.Switch(controller=self, key=self.key)
        ret.update(dict(switch=switch,
            description=self.description,
            status=self.status()['status'],
            key=self.key,
            switch_divider=self.switch_divider))
        return ret
    
    def switch(self):
        """
        toggle the value of the key form on to off or off to on
        """
        vargs = self.storage.load()
        status = vargs.get(self.key, False)
        success = True
        error = ""
        if status:
            status = False
        else:
            if hasattr(self.check, '__call__'):
                success, error = self.check()
            if success:
                status = True
        if success:
            vargs[self.key] = status
            self.storage.store(vargs)
            self.storage.changed = False
            if self.action:
                self.action()
            status = vargs.get(self.key, False)
        return {'status': status, 'error': error}
    
    def status(self):
        """
        return current status
        """

        vargs = self.storage.load()
        status = vargs.get(self.key, False)
        error = ""
        if hasattr(self.check, '__call__'):
            success, error = self.check()
        return {'status': status, 'error': error}
