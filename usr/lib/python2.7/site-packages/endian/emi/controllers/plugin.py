#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import endian.core.i18n
from endian.core import logger
from endian.emi.framework import request
from endian.emi.controllers.base import BaseController, REQUEST_TYPE, expose

__all__ = [
    'PluginController'
]

class PluginController(BaseController):
    storage = None
    
    def __init__(self, pluginsWidget=None, **params):
        BaseController.__init__(self, **params)
        if not self.storage and self.entity:
            self.storage = self.entity.storage()
        if pluginsWidget:
            self.pluginsWidget = pluginsWidget(id="plugins")
            if not getattr(self,'title',None) and getattr(self.pluginsWidget, 'title', None):
                self.title = self.pluginsWidget.title
            if not getattr(self,'menu_title',None) and getattr(self.pluginsWidget, 'menu_title', None):
                self.menu_title = self.pluginsWidget.menu_title
            if not getattr(self,'menu_order',None) and getattr(self.pluginsWidget, 'menu_order', None):
                self.menu_order = self.pluginsWidget.menu_order
        else:
            self.pluginsWidget = None
    
    @expose(template="endian.emi.templates.plugincontroller_master")
    def index(self, **args):
        return self.index_internal(**args)
    
    @expose(template="endian.emi.templates.plugincontroller")
    def naked(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.NAKED, **args)
    
    @expose(template="endian.emi.templates.plugincontroller_standalone")
    def standalone(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.STANDALONE, **args)

    @expose(template="endian.emi.templates.plugincontroller_plugin")
    def plugin(self, **args):
        return self.index_internal(request_type=REQUEST_TYPE.PLUGIN, **args)
    
    def index_internal(self, **args):
        ret = BaseController.index_internal(self, **args)
        request_type = ret.get('request_type', REQUEST_TYPE.MASTER)
        request.request_type = request_type
        # Store the request type in the request object, so it can be accessed by the error page
        request.request_type = request_type
        permissions = ret['permissions']
        args = ret['args']
        data = ret['data']
        
        error = ret['error']
        info = ret['info']
        important = ret['important']
        self.updatePlugins()
        
        return dict(container=self.pluginsWidget,
                    args=args,
                    data=data,
                    error=error,
                    important=important,
                    info=info,
                    controllername=self.name,
                    request_type=request_type,
                    permissions=permissions,
                    hidecontentbox=self.hidecontentbox)
    
    def updatePlugins(self):
        if not self.storage:
            raise NotImplementedError()
        if self.storage.changed:
            tmp = self.pluginsWidget.id
            self.pluginsWidget = self.pluginsWidget.__class__(id=tmp)
            self.storage.changed = False
