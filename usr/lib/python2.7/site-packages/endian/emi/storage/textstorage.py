#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

from endian.emi.storage import Storage
from endian.core.logger import *

class TextStorage(Storage):

    _abstract_class = True
    
    def __new__(cls, *args, **kwargs):
        if cls.__dict__.get("_abstract_class", False):
            raise RuntimeError(cls.__name__ + " is an abstract class")
        return object.__new__(cls)
        
    def fieldToPython(self, ftype, value):
        """
        Parse the field value and transform into python value.
        """
        try:
            if ftype in ["Multiline"]:
                return value.replace("&", "\n")
            elif ftype == "Multichoice":
                if value:
                    return value.split("&")
                else:
                    return []
            elif ftype == "Int":
                if value == None:
                    return None
                value = int(value)
            elif ftype == "Bool":
                return value == "on"
        except Exception, e:
            error("mapFieldLoad: could not convert %s->%s [%s]" % (ftype, value, str(e)))
        #print "mapFieldLoad: %s, %s" % (ftype, value)
        return value

    def fieldToText(self, ftype, value):
        """
        Parse the field value and transform into string value.        
        """
        #debug("mapFieldStore: %s, %s", ftype, value)
        if ftype in ["Multiline", "Multichoice"]:
            if type(value) == list:
                value = map(lambda i: str(i), value)
                return "&".join(value)
            else:
                return value.replace("\n", "&")
        elif ftype == "Bool":
            if value or value == "on":
                value = "on"
            else:
                value = "off"
        return value        
        
    def dictToPython(self, data):
        for key in self.fields:
            ftype = self.schema.fields[key].__class__.__name__
            data[key] = self.fieldToPython(ftype, data.get(key))
        return data
        
    def dictToText(self, data):
        for key in self.fields:
            ftype = self.schema.fields[key].__class__.__name__
            data[key] = self.fieldToText(ftype, data.get(key))
        return data

    def valueToPython(self,name,value):
        try:
            ftype = self.schema.fields[name].__class__.__name__
        except Exception:
            debug("Value %s not defined in schema." %name)
            return value
        return self.fieldToPython(ftype,value)

    def valueToText(self,name,value):
        try:
            ftype = self.schema.fields[name].__class__.__name__
        except Exception:
            debug("Value %s not defined in schema." %name)
            return value
        return self.fieldToText(ftype, value)
