# Classes and methods for TurboGears utility module
#
# Copyright (c) 2005 Kevin Dangoor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 

from cherrypy import request
from turbogears import config
from inspect import getargspec

__all__ = ['Bunch',
           'request_available',
           'remove_keys',
           'adapt_call',
           'simplify_http_accept_header',
           'get_mime_type_for_format',
           'mime_type_has_charset',
          ]


class Bunch(dict):
    """Simple but handy collector of a bunch of named stuff."""

    def __repr__(self):
        keys = self.keys()
        keys.sort()
        args = ', '.join(['%s=%r' % (key, self[key]) for key in keys])
        return '%s(%s)' % (self.__class__.__name__, args)

    def __getattr__(self, name):
        try:
            return self[name]
        except KeyError:
            raise AttributeError(name)

    __setattr__ = dict.__setitem__

    def __delattr__(self, name):
        try:
            del self[name]
        except KeyError:
            raise AttributeError(name)


def request_available():
    """Check if cherrypy.request is available."""
    stage = getattr(request, 'stage', None)
    return stage is not None


def remove_keys(dict_, seq):
    """Gracefully remove keys from dict."""
    for key in seq:
        dict_.pop(key, None)
    return dict_


def adapt_call(func, args, kw, start=0):
    """
    Remove unsupported func arguments from given args list and kw dict.

    Returns args list and kw dict from which arguments unsupported by func
    have been removed. The passed in kw dict is also stripped as a side-effect.
    The returned objects can then be used to call the target function.

    Example:

        def myfunc(arg1, arg2, kwarg1='foo'):
            pass

        args, kw = adapt_call(myfunc, ['args1, 'bogus1'],
           {'kwargs1': 'bar', 'bogus2': 'spamm'})
        # --> ['args1'], {'kwargs1': 'bar'}
        myfunc(*args, **kw)

    :param func: the callable to inspect for supported arguments
    :type func: callable
    :param args: the names of the positional arguments intended to be passed to func
    :type args: list
    :param kw: the keyword arguments intended to be passed to func
    :type kw: dict
    :keyparam start: the number of items from the start of the argument list of
    :func to disregard. Set start=1 to use adapt_call on a bound method to
    :disregard the implicit self argument.
    :type start: int
    """
    argnames, varargs, kwargs = getargspec(func)[:3]
    del argnames[:start]
    if kwargs in (None, "_decorator__kwargs"):
        remove_keys(kw, [key for key in kw if key not in argnames])
    if varargs in (None, "_decorator__varargs"):
        args = args[:len(argnames)]
    for n, key in enumerate(argnames):
        if key in kw:
            args = args[:n]
            break
    return args, kw


def simplify_http_accept_header(accept):
    """
    Parse an HTTP Accept header (RFC 2616) into a preferred value.

    The quality factors in the header determine the preference.
    Possible media-range parameters are allowed, but will be ignored.
    This function can also be used for the Accept-Charset,
    Accept-Encoding and Accept-Language headers.

    This is similar to parse_http_accept_header(accept)[0], but faster.

    """
    if accept is None:
        return None
    best_item = accept
    best_q = 0
    for item in accept.split(','):
        params = item.split(';')
        item = params.pop(0)
        for param in params:
            param = param.split('=', 1)
            if param[0].strip() == 'q':
                try:
                    q = float(param[1])
                    if not 0 < q <= 1:
                        raise ValueError
                except (IndexError, ValueError):
                    q = 0
                break
        else:
            q = 1
        if q > best_q:
            item = item.strip()
            if item:
                best_item = item
                if q == 1:
                    break
                best_q = q
    return best_item


def get_template_encoding_default(engine_name=None):
    """ Return default encoding for template files """
    if engine_name is None:
        engine_name = "mako"
    return config.get('%s.encoding' % engine_name,
        config.get('%s.default_encoding' % engine_name, 'utf-8'))


_format_mime_types = dict(
    plain='text/plain', text='text/plain',
    html='text/html', xhtml = 'text/html',
    xml='text/xml', json='application/json')


def get_mime_type_for_format(format):
    """ Return default MIME media type for a template format. """
    mime_type = config.get('tg.format_mime_types', {}).get(format)
    if not mime_type:
        mime_type = _format_mime_types.get(format, 'text/html')
    return mime_type


def mime_type_has_charset(mime_type):
    """Return whether the MIME media type supports a charset parameter.

    Note: According to RFC4627, we do not output a charset parameter
    for "application/json" (this type always uses a UTF encoding).

    """
    if not mime_type:
        return False
    if mime_type.startswith('text/'):
        return True
    if mime_type.startswith('application/'):
        if mime_type.endswith('/xml') or mime_type.endswith('+xml'):
            return True
        if mime_type.endswith('/javascript'):
            return True
    return False

