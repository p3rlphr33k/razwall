# Derived from TurboJson
# Author: Elvelind Grandin et al
# License: MIT
#
# JSON encoding functions

import sqlalchemy
from datetime import date, datetime
from decimal import Decimal
try:
    from bson.objectid import ObjectId
except ImportError:
    class ObjectId(object):
        pass
try:
    from simplejson import JSONEncoder
except ImportError:
    from json import JSONEncoder

__all__ = ['GenericJSON']


class GenericJSON(JSONEncoder):

    def default(self, obj):
        """Generic function for converting objects to JSON.

        Specific functions should return a string or an object that can be
        serialized with JSON, i.e., it is made up of only lists, dictionaries
        (with string keys), strings, ints, and floats.

        """
        if hasattr(obj, '__json__'):
            return obj.__json__()
        elif isinstance(obj, Decimal):
            return float(obj)
        elif isinstance(obj, (set, frozenset, tuple)):
            return list(obj)
        elif isinstance(obj, (date, datetime, ObjectId)):
            return str(obj)
        elif isinstance(obj, sqlalchemy.orm.query.Query):
            return ",".join([str(x) for x in obj.all()])
        return JSONEncoder.default(self, obj)

generic_json_encoder = GenericJSON()


def dumps(obj):
    """
    .. autofunction: dumps
       Return a JSON string representation of a data structure.
    """
    return generic_json_encoder.encode(obj)
