#!/usr/bin/python

import collectd

# XXX: read from datasource when we have this
#      as a calculated value
def getUUID():
    uuidf = open("/etc/uuid", "r")
    uuid = uuidf.readline().strip()
    return uuid
uuid = ""
try:
    uuid = getUUID()
except:
    uuid = "invalid-uuid"

uuidlen = len(uuid)

SOCKET="/var/run/collectd"


def getAllCollectdData(idFilter=None, *argl, **args):
    """
    ... autofunction::: getAllCollectdData

    Fetches live-data from collectd.

    Connects to collectd through unixsocket, fetches
    the data and returns it as a dict of dict's in the
    following format:
    {
        'collectdplugin/identifier': {
            'key1': float, 
            'key2': float
            }
        }

    The optional parameter 'idFilter' accepts a list of
    strings, which can be used to filter down the amount of
    identifiers to be fetched values for.
    When supplied, only for identifiers containing one of
    those strings will be fetched data.
    
    :param idFilter: only data for identifiers containing these
    strings should be fetched.
    :type list: list of strings

    """

    # If the uuid is missing, use the full hostname
    global uuid, uuidlen
    if not uuid or uuid == "invalid-uuid":
        from socket import gethostname
        uuid = gethostname()
        uuidlen = len(uuid)
    
    c = collectd.Collectd(SOCKET, noisy=False)

    vlist = map(lambda x: x.split(), c.listval())
    vlist = filter(lambda x: x[1].startswith(uuid), vlist)

    ret = {}
    for i in vlist:
        stamp = i[0]
        id = i[1][uuidlen+1:]
        if idFilter:
            if not filter(lambda x: id.find(x) >= 0, idFilter):
                continue
        item = {
            'timestamp': stamp
            }
        ret[id] = item
        values = c.getval(i[1])
        for val in values:
            k, v = val.split("=")
            item[k] = float(v)
    return ret

def getCollectdSingleValues(keys=[], *argl, **args):
    c = collectd.Collectd(SOCKET, noisy=False)
    if not keys:
        keys = args.get("keys[]", [])

    # If the uuid is missing, use the full hostname
    global uuid, uuidlen
    if not uuid or uuid == "invalid-uuid":
        from socket import gethostname
        uuid = gethostname()
        uuidlen = len(uuid)

    timestamps = {}
    for listval in c.listval() or []:
        slistval = listval.split()
        if len(slistval) != 2:
            continue
        try:
            timestamp = int(slistval[0])
        except:
            continue
        timestamps[slistval[1]] = timestamp

    ret = {}
    for i in keys:
        key = uuid + "/" + i
        item = {}
        ret[i] = item
        values = None
        try:
            values = c.getval(key)
        except KeyError, e:
            continue
        if key in timestamps:
            item['timestamp'] = timestamps[key]
        for val in values:
            k, v = val.split("=")
            item[k] = float(v)
    return ret

def init(root=None):
    import endian.emi.status
    endian.emi.status.register("status.collectd.data",
                               getAllCollectdData)
    endian.emi.status.register("status.collectd.singlevalues",
                               getCollectdSingleValues)

if __name__ == '__main__':
    print getAllCollectdData(['tail-smtp', 'tail-snort'])
