#! /usr/bin/python
#
#        +-----------------------------------------------------------------------------+
#        | Endian Firewall                                                             |
#        +-----------------------------------------------------------------------------+
#        | Copyright (c) 2005-2011 Endian                                              |
#        |         Endian GmbH/Srl                                                     |
#        |         Bergweg 41 Via Monte                                                |
#        |         39057 Eppan/Appiano                                                 |
#        |         ITALIEN/ITALIA                                                      |
#        |         info@endian.it                                                      |
#        |                                                                             |
#        | This program is free software; you can redistribute it and/or               |
#        | modify it under the terms of the GNU General Public License                 |
#        | as published by the Free Software Foundation; either version 2              |
#        | of the License, or (at your option) any later version.                      |
#        |                                                                             |
#        | This program is distributed in the hope that it will be useful,             |
#        | but WITHOUT ANY WARRANTY; without even the implied warranty of              |
#        | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
#        | GNU General Public License for more details.                                |
#        |                                                                             |
#        | You should have received a copy of the GNU General Public License           |
#        | along with this program; if not, write to the Free Software                 |
#        | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. |
#        | http://www.fsf.org/                                                         |
#        +-----------------------------------------------------------------------------+
#

import os
import re
import shutil
import socket
import commands

from endian.core import logger
from endian.migration.migration import mainHandler


RRD_DIR = '/var/lib/collectd/rrd/'
UUID_FILE = '/etc/uuid'

re_uuid = re.compile('UUID="(.*)"', re.I)


def getPartitionUUID(mountPoint):
    """Return the UUID of the partition at the
    given mount point."""
    mounted = commands.getoutput('mount') or ''
    device = None
    for line in mounted.split(os.linesep):
        sline = line.split()
        if len(sline) < 3 or sline[2] != mountPoint:
            continue
        device = sline[0]
        break
    if not device:
        return None
    uuid_line = commands.getoutput('blkid %s -s UUID' % device) or ''
    match = re_uuid.findall(uuid_line)
    if match:
        return match[0]
    return None


def main():
    if not os.path.isdir(RRD_DIR):
        logger.warn('Not migrating rrd, since %s is not a directory', RRD_DIR)
        return
    uuid = None
    if os.path.isfile(UUID_FILE):
        try:
            uuid_file = open(UUID_FILE, 'r')
            uuid = uuid_file.read().strip()
            uuid_file.close()
        except Exception, e:
            logger.warn('Unable to read %s: %s', UUID_FILE, str(e))
    if not uuid:
        logger.info('%s not found; try to get UUID from the partition',
                    UUID_FILE)
        uuid = getPartitionUUID('/')
    if not uuid:
        logger.warn('Not migrating rrd: no UUID detected')
        return
    fqdn = socket.getfqdn()
    if not fqdn:
        logger.warn('Not migrating rrd: no fqdn detected')
        return
    rrd_fqdn = os.path.join(RRD_DIR, fqdn)
    if not os.path.isdir(rrd_fqdn):
        logger.info('Not migrating rrd: %s directory not found', rrd_fqdn)
    target_dir = os.path.join(RRD_DIR, uuid)
    if os.path.isdir(target_dir):
        logger.info('Not migrating rrd: %s directory already exists',
                    target_dir)
        return
    try:
        shutil.move(rrd_fqdn, target_dir)
    except Exception, e:
        logger.err('Not migrating rrd; unable to move %s to %s: %s',
                    rrd_fqdn, target_dir, str(e))
        return
    logger.info('Moved rrd files from %s to %s', rrd_fqdn, target_dir)


if __name__ == '__main__':
    mainHandler(main)

