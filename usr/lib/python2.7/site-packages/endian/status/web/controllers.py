#!/usr/bin/env python  
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2011 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | emi is free software: you can redistribute it and/or modify it under     |
# | the terms of GNU General Public License (GPL) version 2.0                |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | emi is distributed in the hope that it will be useful,                   |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with emi.           |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

import traceback
import time

from endian.emi.controllers import Controller, expose

from endian.core import logger
from endian.emi.framework import HTTPRedirect, HTTPError
from endian.emi.acl import AuthException
import endian.emi.status

from endian.commands.web.controllers import CommandsController

__all__ = [
    'StatusController'
]

class StatusController(CommandsController):
    default_type = "json"
    
    @expose(template="endian.status.web.templates.index")
    def index(self, root_node=None, **args):
        if not root_node:
            root_node = "status"
        return self._index_internal(root_node, **args)

    def _call_command(self, cmd, type_="text", **args):
        try:
            logger.debug("Call '%s' with parameters: '%s'" % (cmd, str(args)))
            ret = endian.emi.status.getData(cmd, **args)
            if not ret:
                ret = ""
            if type_ == "json":
                if not isinstance(ret, dict) and not isinstance(ret, list):
                    ret = {'info': ret}
                if isinstance(ret, dict) and not ret.has_key('time'):
                    ret['time'] = time.time()
            return ret
        except KeyError, e:
            logger.error("Status display '%s' not found." % cmd)
            logger.debug("Calling status display '%s' with parameters '%s' failed with: " % (
                   cmd,
                   str(args)),
                   exc_info=True)
            error = _("Status display '%(status)s' not found.") % {
                'status': cmd
            }
            if type_ == "json":
                return {'error': error,
                        'time': time.time()}
            return error
        except HTTPRedirect, e:
            raise e
        except HTTPError, e:
            errorcode, error = e
            if type_ == "json":
                return {'error': error,
                        'time': time.time()}
            return error
        except Exception, e:
            error = e
            if isinstance(error, list) or isinstance(error, dict):
                error = str(error)
            logger.error("Calling status display '%s' failed." % cmd)
            logger.debug("Calling status display '%s' with parameters '%s' failed with: " % (
                   cmd,
                   str(args)),
                   exc_info=True)
            if type_ == "json":
                return {'error': error,
                        'time': time.time()}
            return error

def test(force=False, msg="", **args):
    """
    ... autofunction::: test

    Test status interface

    Is a sample for a function of the EMI status interface.
    This text is multiline since it describes what exactly
    does this function.

    In this example the function does nothing of interest,
    it simple returns a python structure with some example
    values and parameters if supplied, which then are going
    to be serialized as JSON by the status EMI module.

    This text is only so long and says nothing in the end
    because I want to test the docstring parser with it and
    therefore I would like to have some paragraphs, which are
    separated by empty newlines.

    :param force: Forces something if True, otherwise does not
    force at all.
    :type force: boolean
    :param msg: Specify a cool message
    :type msg: string

    """
    values = {'integer': 42,
              'string': 'hello world',
              'list': [1,2,3],
              'hash': {'a': 'field', 'is': 'a field'},
              'force': force,
              'msg': msg,
              'generated': time.time(),
              }
    values.update(args)
    return values

endian.emi.status.register("status.status.test", test)
