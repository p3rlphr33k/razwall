#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

__author__ = "Peter Warasin <peter@endian.com>"
__date__ = "2008-01-01"

"""
Datasource class which defines a generic interface to
/var/efw settings- and config files
"""

import os
from endian.data.constants import constants, setConstant
from endian.data.exceptions import InvalidGetMethod
from endian.data.methods import lookup

__all__ = [
    'constants',
    'setConstant',
    'InvalidGetMethod',
    'DataSource'
]

class DataSource(dict):
    def __getitem__(self, item):
        ret = self.get(item)
        if ret is None:
             raise KeyError("'%s' in '%s'"%(item, self.path))
        return ret

    def items(self):
        return [(x, self[x]) for x in self]

    def iteritems(self):
        for key in self:
            yield (key, self[key])

    def itervalues(self):
        for key in self:
            yield self[key]

    def keys(self):
        return [x for x in self]

    def values(self):
        return [self[x] for x in self]

    def __repr__(self):
        repr = []
        for (key,value) in self.iteritems():
            repr.append("'%s': %s"%(key.upper(), value))
        return "{%s}"%",".join(repr)

    def copy(self):
        ret = {}
        for (key,value) in self.iteritems():
            ret[key] = value
        return ret

    def __getattr__(self, item):
        return DataSource.get(self, item)

    def __len__(self):
        count = 0
        for i in self:
            count += 1
        return count

    def __set__(self, key, value):
        raise NotImplementedError('DataSource is readonly')

    #
    # Here start implementation specific parts
    #
    def __init__(self, path='', root=None, base=None):
        self.path = path.lower()
        if root is not None:
            self.root = root
        else:
            self.root = self
        self.base = base or constants['USER_D']
        self.abspath = os.path.join(self.base, self.path)

    def __contains__(self, key):
        if not key or '/' in key:
            return False
        key = key.lower()
        return os.path.exists(os.path.join(self.abspath, key))

    def __iter__(self):
        try:
            return iter([x.upper() for x in sorted(os.listdir(self.abspath))])
        except:
            return iter([])

    def get(self, key, default=None):
        # Lookup the key
        key = key.lower()
        res = {}
        for method in lookup('get', key, 'leaf'):
            try:
                r = method(key, self, res)
                return r
            except InvalidGetMethod:
                pass
        return default

