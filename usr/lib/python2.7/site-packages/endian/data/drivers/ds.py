#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2012-04-30"

import os
from endian.data.exceptions import InvalidGetMethod

def get_hook_function(key, obj, res, configfiles=None, raise_exceptions=False):
    """
        Search for the module named 'obj.path' in 'endian.data.hooks'
        If the module exists, execute the function 'key'
        The function must be annotated with 'endian.hooks.hook'
    """
    if not key:
        raise InvalidGetMethod()
    try:
        key = key.lower()
        module = __import__('endian.data.hooks.%s' % obj.path.lower(), None, None, [__name__])
        if hasattr(module, 'root'):
            return module.root()[key]
        fn = getattr(module, key)
        if not fn._exposed:
            raise InvalidGetMethod()
        return fn()
    except:
        raise InvalidGetMethod()

def get_hook_module(key, obj, res, configfiles=None, raise_exceptions=False):
    """
        Check if a module with name 'key' exists in endian.data.hooks
        If in the module there is a function named 'root', the result of the function is returned.
        Otherwise a DataSource instance is returned
    """
    if obj.path:
        raise InvalidGetMethod()
    try:
        key = key.lower()
        module = __import__('endian.data.hooks.%s' % key, None, None, [__name__])
        if hasattr(module, 'root'):
            return module.root()
        from endian.data import DataSource
        return DataSource(os.path.join(obj.path, key), root=obj.root)
    except Exception:
        raise InvalidGetMethod()

def init():
    from endian.data.methods import register_lookup
    register_lookup(5, 'get', get_hook_function, 'leaf', '*')
    register_lookup(1400, 'get', get_hook_module, 'leaf', '*')

