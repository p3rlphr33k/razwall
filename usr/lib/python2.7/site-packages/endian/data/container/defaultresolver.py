#!/usr/bin/env python
# -*- coding: utf-8 -*-
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2004-2016 S.p.A. <info@endian.com>                         |
# |         Endian S.p.A.                                                    |
# |         via Pillhof 47                                                   |
# |         39057 Appiano (BZ)                                               |
# |         Italy                                                            |
# |                                                                          |
# | This program is free software; you can redistribute it and/or modify     |
# | it under the terms of the GNU General Public License as published by     |
# | the Free Software Foundation; either version 2 of the License, or        |
# | (at your option) any later version.                                      |
# |                                                                          |
# | This program is distributed in the hope that it will be useful,          |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
# | GNU General Public License for more details.                             |
# |                                                                          |
# | You should have received a copy of the GNU General Public License along  |
# | with this program; if not, write to the Free Software Foundation, Inc.,  |
# | 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.              |
# +--------------------------------------------------------------------------+

__author__ = "Peter Warasin <peter@endian.com>"
__date__ = "2011-03-28"
"""
implements resolver for fallback default files
"""

import os
from endian.core.filetools import filterGlob

class DefaultResolver(object):
    def _getReadFiles(self):
        for i in self._readFileOrder:
            subpath = ""
            pathsplit = self._pathsplit
            if not i['back']:
                pathsplit = [self._path]
            for pathpart in pathsplit:
                subpath = os.path.join(subpath, pathpart)
                file = os.path.join(
                    self._basePaths[i['base']],
                    subpath,
                    i['dir'],
                    self._basename
                    )
                if not i.get('globprio'):
                    yield(file, i['user'])
                if i.get('glob'):
                    for globfile in filterGlob(file + ".*",
                                               self._filterSuffices,
                                               sort=True,
                                               reverse=True):
                        yield(globfile, i['user'])
                if i.get('globprio'):
                    yield(file, i['user'])

