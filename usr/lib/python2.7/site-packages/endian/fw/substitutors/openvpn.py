#!/usr/bin/env python
# encoding: utf-8
#
# +--------------------------------------------------------------------------+
# | Endian Firewall                                                          |
# +--------------------------------------------------------------------------+
# | Copyright (c) 2005-2015 Endian                                           |
# |         Endian GmbH/Srl                                                  |
# |         Bergweg 41 Via Monte                                             |
# |         39057 Eppan/Appiano                                              |
# |         ITALIEN/ITALIA                                                   |
# |         info@endian.com                                                  |
# |                                                                          |
# | endian-core is free software: you can redistribute it and/or modify      |
# | it under the terms of GNU General Public License (GPL) version 2.0       |
# | when released with the Community edition                                 |
# | or the GNU Lesser General Public License (LGPL) version 2.1              |
# | when released with the Enterprise edition.                               |
# |                                                                          |
# | endian-core is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the             |
# | GNU General Public License for more details or the                       |
# | GNU Lesser General Public License for more details.                      |
# |                                                                          |
# | You should have received a copy of the license along with endian-core.   |
# | If not, see <http://www.gnu.org/licenses/>.                              |
# +--------------------------------------------------------------------------+
#

__author__ = "Andrea Bonomi <a.bonomi@endian.com>"
__date__ = "2015-06-23"

from endian.fw import ipset
from endian.fw.substitutors import AbstractSubstitutor, AbstractMappingSubstitutor, LIST_SEPARATOR

__all__ = [
    'SubstOpenVPNUserIP',
    'SubstOpenVPNNets',
    'SubstOpenVPNDevice',
    'SubstOpenVPNAnyUser',
]

class BaseOpenVPNSubst(AbstractSubstitutor):

    def get_remote_vpn_nets(self, user):
        """
            Return the remote networks for a given OpenVPN user

            :param user: user name
            :type user: str
            :return: the remote networks as a list of strings
            :rtype: list
        """
        import openvpnutils
        ret = []
        userconf = openvpnutils.getUser(user)
        for net in userconf['remotenet'].split(","):
            net = net.strip()
            if net == '' or net == 'None':
                continue
            ret.append(net)
        return ret


class SubstOpenVPNUserIP(BaseOpenVPNSubst):
    """
        Substiture OPENVPNUSER:xxx with VPN IPs
    """

    def substitute_values(self, rule, values, job):
        """
            Substitute the values

            :param rule: rule
            :type rule:
            :param values: '&'-separated values
            :type values: str
            :param job: firewall job instance
            :type job: Job
            :return: '&'-separated substituted values
            :rtype: str
        """
        from endian.fw.name_hash import name_hash, list_hash
        result = [value for value in values.split(LIST_SEPARATOR) if value is not None and not value.startswith('OPENVPNUSER:')]
        elements = [name_hash(value) for value in values.split(LIST_SEPARATOR) if value is not None and value.startswith('OPENVPNUSER:')]
        if elements:
            for element in elements:
                # Add the IP set
                try:
                    ipset.create_set(element)
                except:
                    pass
            # Create an IP set list containing all the IP set
            set_name = list_hash(job.firewall_name, elements)
            try:
                ipset.create_set_list(set_name, elements)
            except:
                pass
            result.append('SET:%s' % set_name)
        return LIST_SEPARATOR.join(result)


class SubstOpenVPNNets(BaseOpenVPNSubst):
    """
        Substiture OPENVPNUSER:xxx with VPN IPs and remote networks
    """

    def substitute_values(self, rule, values, job):
        """
            Substitute the values

            :param rule: rule
            :type rule:
            :param values: '&'-separated values
            :type values: str
            :param job: firewall job instance
            :type job: Job
            :return: '&'-separated substituted values
            :rtype: str
        """
        from endian.fw.name_hash import name_hash, list_hash
        result = [value for value in values.split(LIST_SEPARATOR) if value is not None and not value.startswith('OPENVPNUSER:')]
        elements = [name_hash(value) for value in values.split(LIST_SEPARATOR) if value is not None and value.startswith('OPENVPNUSER:')]
        usernames = [value.split(':')[1] for value in values.split(LIST_SEPARATOR) if value is not None and value.startswith('OPENVPNUSER:')]
        if elements:
            for element in elements:
                # Add the IP set
                try:
                    ipset.create_set(element)
                except:
                    pass
            # Create an IP set list containing all the IP set
            set_name = list_hash(job.firewall_name, elements)
            try:
                ipset.create_set_list(set_name, elements)
            except:
                pass
            result.append('SET:%s' % set_name)
            # Add the remote networks
            for username in usernames:
                try:
                    # Add the remote networks
                    remote_nets = self.get_remote_vpn_nets(username)
                    if remote_nets:
                        result.extend(remote_nets)
                except:
                    pass
        return LIST_SEPARATOR.join(result)


class SubstOpenVPNDevice(BaseOpenVPNSubst):

    def process(self, value, rule=None, params=None):
        if not value.startswith('VPN:'):
            if self.list_separator:
                return value
            else:
                return [value]
        self.debug("Substitute VPN '%s'", value)
        openvpnconn = value.split(':', 1)[1]
        if openvpnconn == '':
            self.debug("Key '%s' contains no value.", value)
            raise KeyError("Key '%s' contains no value." % value)
        devlist = self.get_vpn_device(openvpnconn)
        if len(devlist) <= 0:
            self.debug("Connection '%s' has no Devices.", openvpnconn)
            raise KeyError("Connection '%s' has no Devices." % openvpnconn)
        self.debug("Substituted VPN '%s' to: %s", value, devlist)
        if self.list_separator:
            return self.list_separator.join(devlist)
        else:
            return devlist


class SubstOpenVPNAnyUser(AbstractMappingSubstitutor):

    def substitute_values(self, rule, job):
        """
            Substitute
            src_ip = 'OPENVPNUSER:ALL' witth src_dev = 'VPN:SERVER'
            and
            dst_ip = 'OPENVPNUSER:ALL' witth dst_dev = 'VPN:SERVER'

            :param rule: rule
            :type rule:
            :param job: firewall job instance
            :type job: Job
            :return: a dict with key=field, value=values
            :rtype: dict
        """
        ips = rule.src_ip.split(LIST_SEPARATOR)
        if 'OPENVPNUSER:ALL' in ips:
            ips = [ip for ip in ips if ip != 'OPENVPNUSER:ALL']
            rule.src_dev = 'VPN:SERVER'
        rule.src_ip = LIST_SEPARATOR.join(ips)

        ips = rule.dst_ip.split(LIST_SEPARATOR)
        if 'OPENVPNUSER:ALL' in ips:
            ips = [ip for ip in ips if ip != 'OPENVPNUSER:ALL']
            rule.dst_dev = 'VPN:SERVER'
        rule.dst_ip = LIST_SEPARATOR.join(ips)
        return rule
